package com.nucco.beans;

/**
 * Sales.java
 *
 * 매출
 *
 * 작성일 - 2011/04/05, 정원광
 * 수정일 - 2015/12/30 ~ 2016/01/06, 박영길
 *
 */

import java.util.*;
import java.sql.*;
import com.nucco.*;
import com.nucco.cfg.*;
import com.nucco.lib.*;
import com.nucco.lib.db.DBLibrary;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class Sales {
	/** 사이트 설정 */
	private GlobalConfig cfg;
	/** org.apache.log4j.Logger*/
	private Logger logger = null;
	/** 소속 */
	public ArrayList<GeneralConfig> company;
	/** 조직 */
	public ArrayList<GeneralConfig> organ;
	/** 설치위치 */
	public ArrayList<GeneralConfig> place;
	/** 상품 */
	public ArrayList<GeneralConfig> goods;
	/** 결제 방식 */
	public ArrayList<GeneralConfig> payment;
	/** 결제 진행 상태 */
	public ArrayList<GeneralConfig> step;
	/** 선불 */
	public ArrayList<GeneralConfig> prepay;
	/** 카드 */
	public ArrayList<GeneralConfig> card;
	/** 결과 목록 */
	public ArrayList<GeneralConfig> list;
	/** 조회 값 */
	public GeneralConfig data;
	/** 총 레코드수 */
	public long records;
	/** 총 페이지수 */
	public long pages;

	/**
	 * 생성자
	 */
	public Sales(GlobalConfig cfg) throws Exception {
	// set config
		this.cfg = cfg;

	// set log4j
		PropertyConfigurator.configure(cfg.get("config.log4j"));
		this.logger = Logger.getLogger(this.getClass());
	}

	/**
	 * 매출 현황
	 *
	 * @param mode 유형
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String report(int mode) throws Exception {
	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 소속
		this.company = new ArrayList<GeneralConfig>();

		try {
//20160104 시스템관리자 ORDER BY NAME 추가, INDEX(A PK_COMPANY)에서 PK_COMPANY 제거, CASE WHEN 제거
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ INDEX(A PK_COMPANY) */ SEQ, NAME, (SELECT NVL(MAX(DEPTH), 0) FROM TB_ORGANIZATION WHERE COMPANY_SEQ = A.SEQ) AS DEPTH FROM TB_COMPANY A WHERE (CASE WHEN ? > 0 THEN SEQ ELSE 1 END) = (CASE WHEN ? > 0 THEN ? ELSE 1 END)");
//			ps.setLong(1, this.cfg.getLong("user.company"));
//			ps.setLong(2, this.cfg.getLong("user.company"));
//			ps.setLong(3, this.cfg.getLong("user.company"));
			ps = dbLib.prepareStatement(conn,
					"SELECT" + (this.cfg.getLong("user.company") > 0L ? " /*+ INDEX(A) */" : "")
							+ " SEQ,"
							+ " NAME,"
							+ " ("
								+ " SELECT /*+ INDEX(B) */"
										+ " NVL(MAX(DEPTH), 0)"
									+ " FROM TB_ORGANIZATION B"
									+ " WHERE COMPANY_SEQ = A.SEQ"
							+ " ) AS DEPTH"
						+ " FROM TB_COMPANY A"
				+ (this.cfg.getLong("user.company") > 0L
						? " WHERE SEQ = ?"
						: ""
					)
						+ " ORDER BY NAME"
				);

			if (this.cfg.getLong("user.company") > 0L) {
				ps.setLong(1, this.cfg.getLong("user.company"));
			}

			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("SEQ", rs.getLong("SEQ"));
				c.put("NAME", rs.getString("NAME"));
				c.put("DEPTH", rs.getInt("DEPTH"));

				this.company.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 조직 및 설치 위치
		if (this.cfg.getLong("user.company") > 0) {
		// 최상위 조직 타이틀
			this.data = new GeneralConfig();

			try {
//20160106 INDEX 힌트 추가
//				ps = dbLib.prepareStatement(conn, "SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = ? AND DEPTH = 0 AND SORT = 0 AND ROWNUM = 1");
				ps = dbLib.prepareStatement(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_ORGANIZATION A"
							+ " WHERE COMPANY_SEQ = ?"	// 1:user.company
								+ " AND DEPTH = 0"
								+ " AND SORT = 0"
								+ " AND ROWNUM = 1"
					);
				ps.setLong(1, this.cfg.getLong("user.company"));
				rs = ps.executeQuery();

				if (rs.next()) {
					this.data.put("TITLE", rs.getString("NAME"));
				}
			} catch (Exception e) {
				this.logger.error(e);
				error = e.getMessage();
			} finally {
				dbLib.close(rs);
				dbLib.close(ps);
			}

			if (!StringEx.isEmpty(error)) {
				dbLib.close(conn);
				return error;
			}

		// 최상위 조직 목록
		// :: 내가 속한 조직의 최상위 단계 및 나에게 조회가 허락된 조직의 최상위 단계
		// :: 자판기 운영자일 경우, 과거 조직 중 매출이 발생한 조직 추가
			this.organ = new ArrayList<GeneralConfig>();

			try {
//20160218 쿼리통합
//				if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
////20160106 UNION을 IN에 병합 및 INDEX 힌트 추가
////					ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE DEPTH = 0 START WITH SEQ = ? CONNECT BY SEQ = PRIOR PARENT_SEQ"
////						+ " UNION"
////						+ " SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE DEPTH = 0 START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ"
////						+ " UNION"
////						+ " SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE DEPTH = 0 START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_SALES_DAILY WHERE USER_SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ");
////					ps.setLong(1, this.cfg.getLong("user.organ"));
////					ps.setLong(2, this.cfg.getLong("user.seq"));
////					ps.setLong(3, this.cfg.getLong("user.seq"));
//					ps = dbLib.prepareStatement(conn,
//							"SELECT /*+ INDEX(A) */"
//									+ " SEQ,"
//									+ " NAME"
//								+ " FROM TB_ORGANIZATION A"
////20160120 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//								+ " WHERE COMPANY_SEQ = ?"				// 1:user.company
//									+ " AND DEPTH = 0"
//								+ " START WITH SEQ IN ("
//										+ " SELECT ? FROM DUAL"			// 2:user.organ
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_A) */"
//												+ " ORGANIZATION_SEQ"
//											+ " FROM TB_USER_APP_ORGAN A_A"
//											+ " WHERE SEQ = ?"			// 3:user.seq
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_B) */"
//												+ " ORGANIZATION_SEQ"
////20160119 TB_SALES_DAILY를 TB_VENDIGING_MACHINE_HISTORY로 변경
////											+ " FROM TB_SALES_DAILY A_B"
//											+ " FROM TB_VENDING_MACHINE_HISTORY A_B"
////20160121 COMPANY_SEQ 조건 추가
//											+ " WHERE COMPANY_SEQ = ?"	// 4:user.company
//												+ " AND USER_SEQ = ?"	// 5:user.seq
//											+ " GROUP BY ORGANIZATION_SEQ"
//									+ " )"
//								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
//								+ " GROUP BY NAME, SEQ"
//								+ " ORDER BY NAME, SEQ"
//						);
//					ps.setLong(1, this.cfg.getLong("user.company"));
//					ps.setLong(2, this.cfg.getLong("user.organ"));
//					ps.setLong(3, this.cfg.getLong("user.seq"));
//					ps.setLong(4, this.cfg.getLong("user.company"));
//					ps.setLong(5, this.cfg.getLong("user.seq"));
//				} else if (this.cfg.getLong("user.organ") > 0) {
////20160106 UNION을 IN에 통합 및 INDEX 힌트 추가
////					ps = dbLib.prepareStatement(conn,
////							"SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE DEPTH = 0 START WITH SEQ = ? CONNECT BY SEQ = PRIOR PARENT_SEQ"
////									+ " UNION"
////						+ " SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE DEPTH = 0 START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ");
//					ps = dbLib.prepareStatement(conn,
//							"SELECT /*+ INDEX(A) */"
//									+ " SEQ, NAME"
//								+ " FROM TB_ORGANIZATION A"
////20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//								+ " WHERE COMPANY_SEQ = ?"			// 1:user.company
//									+ " AND DEPTH = 0"
//								+ " START WITH SEQ IN ("
//										+ " SELECT ? FROM DUAL"		// 2:user.organ
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_A) */"
//												+ " ORGANIZATION_SEQ"
//											+ " FROM TB_USER_APP_ORGAN A_A"
//											+ " WHERE SEQ = ?"		// 3:user.seq
//									+ " )"
//								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
//								+ " GROUP BY NAME, SEQ"
//								+ " ORDER BY NAME, SEQ"
//						);
//					ps.setLong(1, this.cfg.getLong("user.company"));
//					ps.setLong(2, this.cfg.getLong("user.organ"));
//					ps.setLong(3, this.cfg.getLong("user.seq"));
//				} else {
////20160106 INDEX 힌트 추가, ORDER BY 추가
////					ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = ? AND DEPTH = 0 AND SORT = 1");
//					ps = dbLib.prepareStatement(conn,
//							"SELECT /*+ INDEX(A) */"
//									+ " SEQ, NAME"
//								+ " FROM TB_ORGANIZATION A"
//								+ " WHERE COMPANY_SEQ = ?"			// user.company
//									+ " AND DEPTH = 0"
//									+ " AND SORT = 1"
//								+ " ORDER BY NAME, SEQ"
//						);
//					ps.setLong(1, this.cfg.getLong("user.company"));
//				}
				ps = dbLib.prepareStatement(conn,
						"SELECT /*+ INDEX(A) */"
								+ " SEQ,"
								+ " NAME"
							+ " FROM TB_ORGANIZATION A"
							+ " WHERE DEPTH = 0"
								+ " AND SORT = 1"
				+ (this.cfg.getLong("user.organ") > 0L
					// 조직이 정해진 일반관리자, 자판기 운영자
						? 	" START WITH COMPANY_SEQ = ?"				// 1:user.company
								+ " AND SEQ IN ("
										+ " SELECT ? FROM DUAL"			// 2:user.organ
										+ " UNION"
										+ " SELECT /*+ INDEX(A_A) */"
												+ " ORGANIZATION_SEQ"
											+ " FROM TB_USER_APP_ORGAN A_A"
											+ " WHERE SEQ = ?"		// 3:user.seq
								+ (this.cfg.get("user.operator").equals("Y")
									// 자판기 운영자
										? " UNION"
										+ " SELECT /*+ INDEX(A_B) */"
												+ " ORGANIZATION_SEQ"
											+ " FROM TB_VENDING_MACHINE_HISTORY A_B"
											+ " WHERE COMPANY_SEQ = ?"	// 4:user.company
												+ " AND USER_SEQ = ?"	// 5:user.seq
											+ " GROUP BY ORGANIZATION_SEQ"
									// 조직이 정해진 일반관리자
										: ""
									)
									+ " )"
							+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
							+ " GROUP BY NAME, SEQ"
						: 		" AND COMPANY_SEQ = ?"					// 1:user.company
					)
							+ " ORDER BY NAME, SEQ"
					);
				ps.setLong(1, this.cfg.getLong("user.company"));
				if (this.cfg.getLong("user.organ") > 0) {
					ps.setLong(2, this.cfg.getLong("user.organ"));
					ps.setLong(3, this.cfg.getLong("user.seq"));
					if (this.cfg.get("user.operator").equals("Y")) {
						ps.setLong(4, this.cfg.getLong("user.company"));
						ps.setLong(5, this.cfg.getLong("user.seq"));
					}
				}
				rs = ps.executeQuery();

				while (rs.next()) {
					GeneralConfig c = new GeneralConfig();

					c.put("SEQ", rs.getLong("SEQ"));
					c.put("NAME", rs.getString("NAME"));

					this.organ.add(c);
				}
			} catch (Exception e) {
				this.logger.error(e);
				error = e.getMessage();
			} finally {
				dbLib.close(rs);
				dbLib.close(ps);
			}

			if (!StringEx.isEmpty(error)) {
				dbLib.close(conn);
				return error;
			}

		// 설치 위치
			this.place = new ArrayList<GeneralConfig>();

			try {
//20160218 쿼리통합
//				if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
////20160106 JOIN 단순화 및 INDEX(A) 힌트를 FULL(A)로 변경
////20160113 정렬순서를 SEQ, PLACE에서 PLACE, SEQ로 변경
////20160121 FULL(A)를 INDEX(A)로 변경
////					ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) INDEX(A PK_VM) */ A.SEQ, A.PLACE FROM TB_VENDING_MACHINE_PLACE A INNER JOIN TB_VENDING_MACHINE B ON A.VM_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_HISTORY C ON B.SEQ = C.VM_SEQ WHERE C.USER_SEQ = ? GROUP BY A.SEQ, A.PLACE");
//					ps = dbLib.prepareStatement(conn,
//							"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
//									+ " B.SEQ, B.PLACE, B.END_DATE"
//								+ " FROM TB_VENDING_MACHINE_HISTORY A"
//									+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
//										+ " ON A.VM_SEQ = B.VM_SEQ"
//									+ " INNER JOIN TB_VENDING_MACHINE C"
//										+ " ON A.VM_SEQ = C.SEQ"
////20160120 타소속의 자판기가 검색되지 않도록 COMPANY_SEQ 조건 추가
//								+ " WHERE A.COMPANY_SEQ = ?"		// 1:user.company
//									+ " AND A.USER_SEQ = ?"		// 2:user.seq
//								+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
//								+ " ORDER BY B.PLACE, B.SEQ"
//						);
//					ps.setLong(1, this.cfg.getLong("user.company"));
//					ps.setLong(2, this.cfg.getLong("user.seq"));
//				} else {
////20160106 JOIN 단순화
////20160113 정렬순서를 SEQ, PLACE에서 PLACE, SEQ로 변경
////20160121 FULL(A)를 INDEX(A)로 변경
////					ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) INDEX(A PK_VM) */ A.SEQ, A.PLACE FROM TB_VENDING_MACHINE_PLACE A INNER JOIN TB_VENDING_MACHINE B ON A.VM_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_HISTORY C ON B.SEQ = C.VM_SEQ WHERE C.COMPANY_SEQ = ? AND C.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = ? UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ?) GROUP BY A.SEQ, A.PLACE");
////					ps.setLong(1, this.cfg.getLong("user.company"));
////					ps.setLong(2, this.cfg.getLong("user.organ"));
////					ps.setLong(3, this.cfg.getLong("user.organ"));
////					ps.setLong(4, this.cfg.getLong("user.seq"));
////					ps.setLong(5, this.cfg.getLong("user.seq"));
//					ps = dbLib.prepareStatement(conn,
//							"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
//									+ " B.SEQ, B.PLACE, B.END_DATE"
//								+ " FROM TB_VENDING_MACHINE_HISTORY A"
//									+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
//										+ " ON A.VM_SEQ = B.VM_SEQ"
//									+ " INNER JOIN TB_VENDING_MACHINE C"
//										+ " ON A.VM_SEQ = C.SEQ"
//								+ " WHERE A.COMPANY_SEQ = ?"					// 1:user.company
//									+ " AND A.ORGANIZATION_SEQ IN ("
//											+ " SELECT /*+ INDEX(A_A) */"
//													+ " SEQ"
//												+ " FROM TB_ORGANIZATION A_A"
//												+ " WHERE SEQ = ?"				// 2:user.organ
//											+ " UNION"
//											+ " SELECT /*+ INDEX(A_B) */"
//													+ " SEQ"
//												+ " FROM TB_ORGANIZATION A_B"
////20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//												+ " WHERE COMPANY_SEQ = ?"		// 3:user.company
//													+ " AND SORT = 1"
//												+ " START WITH PARENT_SEQ IN ("
//														+ " SELECT ? FROM DUAL"	// 4:user.organ
//														+ " UNION"
//														+ " SELECT /*+ INDEX(A_B_A) */"
//																+ " ORGANIZATION_SEQ"
//															+ " FROM TB_USER_APP_ORGAN A_B_A"
//															+ " WHERE SEQ = ?"	// 5:user.seq
//													+" )"
//												+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//											+ " UNION"
//											+ " SELECT /*+ INDEX(A_C) */"
//													+ " ORGANIZATION_SEQ"
//												+ " FROM TB_USER_APP_ORGAN A_C"
//												+ " WHERE SEQ = ?"				// 6:user.seq
//										+ " )"
//								+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
//								+ " ORDER BY B.PLACE, B.SEQ"
//						);
//					ps.setLong(1, this.cfg.getLong("user.company"));
//					ps.setLong(2, this.cfg.getLong("user.organ"));
//					ps.setLong(3, this.cfg.getLong("user.company"));
//					ps.setLong(4, this.cfg.getLong("user.organ"));
//					ps.setLong(5, this.cfg.getLong("user.seq"));
//					ps.setLong(6, this.cfg.getLong("user.seq"));
//				}
				ps = dbLib.prepareStatement(conn,
						"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
								+ " B.SEQ,"
								+ " B.PLACE,"
								+ " B.END_DATE"
							+ " FROM TB_VENDING_MACHINE_HISTORY A"
								+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
									+ " ON A.VM_SEQ = B.VM_SEQ"
								+ " INNER JOIN TB_VENDING_MACHINE C"
									+ " ON A.VM_SEQ = C.SEQ"
							+ " WHERE A.COMPANY_SEQ = ?"						// 1:user.company
						+ (this.cfg.get("user.operator").equals("Y")
							// 자판기 운영자
								? " AND A.USER_SEQ = ?"							// 2:user.seq
							// 시스템관리자, 일반관리자
								: " AND A.ORGANIZATION_SEQ IN ("
										+ " SELECT /*+ INDEX(A_A) */"
												+ " SEQ"
											+ " FROM TB_ORGANIZATION A_A"
											+ " WHERE SEQ = ?"					// 2:user.organ
										+ " UNION"
										+ " SELECT /*+ INDEX(A_C) */"
												+ " ORGANIZATION_SEQ"
											+ " FROM TB_USER_APP_ORGAN A_C"
											+ " WHERE SEQ = ?"					// 3:user.seq
										+ " UNION"
										+ " SELECT /*+ INDEX(A_B) */"
												+ " SEQ"
											+ " FROM TB_ORGANIZATION A_B"
											+ " WHERE SORT = 1"
											+ " START WITH COMPANY_SEQ = ?"		// 4:user.company
												+ " AND PARENT_SEQ IN ("
														+ " SELECT ? FROM DUAL"	// 5:user.organ
														+ " UNION"
														+ " SELECT /*+ INDEX(A_B_A) */"
																+ " ORGANIZATION_SEQ"
															+ " FROM TB_USER_APP_ORGAN A_B_A"
															+ " WHERE SEQ = ?"	// 6:user.seq
													+" )"
											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
									+ " )"
							)
							+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
							+ " ORDER BY B.PLACE, B.SEQ"
					);
				ps.setLong(1, this.cfg.getLong("user.company"));
				if (this.cfg.get("user.operator").equals("Y")) {
					ps.setLong(2, this.cfg.getLong("user.seq"));
				} else {
					ps.setLong(2, this.cfg.getLong("user.organ"));
					ps.setLong(3, this.cfg.getLong("user.seq"));
					ps.setLong(4, this.cfg.getLong("user.company"));
					ps.setLong(5, this.cfg.getLong("user.organ"));
					ps.setLong(6, this.cfg.getLong("user.seq"));
				}
				rs = ps.executeQuery();

				while (rs.next()) {
					GeneralConfig c = new GeneralConfig();

					c.put("SEQ", rs.getLong("SEQ"));

//20160113 설치장소를 [삭제날짜]+설치장소로 변경
//					c.put("PLACE", rs.getString("PLACE"));
					String endDate = rs.getString("END_DATE");
					c.put("PLACE", (endDate == null ? "" : "[" + endDate + "] ") + rs.getString("PLACE"));

					this.place.add(c);
				}
			} catch (Exception e) {
				this.logger.error(e);
				error = e.getMessage();
			} finally {
				dbLib.close(rs);
				dbLib.close(ps);
			}

			if (!StringEx.isEmpty(error)) {
				dbLib.close(conn);
				return error;
			}
		}

	// 유형별 추가 정보
		switch (mode) {
			case 1 : // 상세 매출
			// 결제 방식
				this.payment = new ArrayList<GeneralConfig>();

				try {
//20160106 INDEX 힌트 추가 및 NOT IN을 <>로 변경
//					ps = dbLib.prepareStatement(conn, "SELECT CODE, NAME FROM TB_CODE A WHERE TYPE = 'PAY_TYPE' AND CODE NOT IN ('000') ORDER BY CODE");
					ps = dbLib.prepareStatement(conn,
							"SELECT /*+ INDEX(A) */"
									+ " CODE,"
									+ " NAME"
								+ " FROM TB_CODE A"
								+ " WHERE TYPE = 'PAY_TYPE'"
									+ " AND CODE <> '000'"
								+ " ORDER BY CODE"
						);
					rs = ps.executeQuery();

					while (rs.next()) {
						GeneralConfig c = new GeneralConfig();

						c.put("CODE", rs.getString("CODE"));
						c.put("NAME", rs.getString("NAME"));

						this.payment.add(c);
					}
				} catch (Exception e) {
					this.logger.error(e);
					error = e.getMessage();
				} finally {
					dbLib.close(rs);
					dbLib.close(ps);
				}

				if (!StringEx.isEmpty(error)) {
					dbLib.close(conn);
					return error;
				}

			// 결제 진행 상태
				this.step = new ArrayList<GeneralConfig>();

				try {
//20160106 INDEX 힌트 추가 및 NOT IN을 <>로 변경
//					ps = dbLib.prepareStatement(conn, "SELECT CODE, NAME FROM TB_CODE WHERE TYPE = 'PAY_STEP' AND CODE NOT IN ('000') ORDER BY CODE");
					ps = dbLib.prepareStatement(conn,
							"SELECT /*+ INDEX(A) */"
									+ " CODE,"
									+ " NAME"
								+ " FROM TB_CODE A"
								+ " WHERE TYPE = 'PAY_STEP'"
									+ " AND CODE <> '000'"
								+ " ORDER BY CODE"
						);
					rs = ps.executeQuery();

					while (rs.next()) {
						GeneralConfig c = new GeneralConfig();

						c.put("CODE", rs.getString("CODE"));
						c.put("NAME", rs.getString("NAME"));

						this.step.add(c);
					}
				} catch (Exception e) {
					this.logger.error(e);
					error = e.getMessage();
				} finally {
					dbLib.close(rs);
					dbLib.close(ps);
				}

				if (!StringEx.isEmpty(error)) {
					dbLib.close(conn);
					return error;
				}

				break;
		}

	// 리소스 반환
		dbLib.close(conn);

		return null;
	}

	/**
	 * 하부 조직
	 *
	 * @param organ 조직
	 * @param depth 깊이
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String organ(long organ, int depth) throws Exception {
	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 하위 조직 타이틀
		this.data = new GeneralConfig();

		try {
//20160107 INDEX 힌트 추가
//			ps = dbLib.prepareStatement(conn, "SELECT NAME FROM TB_ORGANIZATION A WHERE COMPANY_SEQ = ? AND DEPTH = ? AND SORT = 0 AND ROWNUM = 1");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ INDEX(A) */"
							+ " NAME"
						+ " FROM TB_ORGANIZATION A"
						+ " WHERE COMPANY_SEQ = ?"	// 1:user.company
							+ " AND DEPTH = ?"
							+ " AND SORT = 0"
							+ " AND ROWNUM = 1"
				);
			ps.setLong(1, this.cfg.getLong("user.company"));
			ps.setLong(2, depth);
			rs = ps.executeQuery();

			if (rs.next()) {
				this.data.put("DISPLAY", rs.getString("NAME"));
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 하위 조직 검색
	// :: 내가 속한 조직 및 나에게 조회가 허락된 조직에서의 트리
	// :: 자판기 운영자일 경우, 과거 조직 중 매출이 발생한 조직 추가
		this.organ = new ArrayList<GeneralConfig>();

		try {
//20160218 쿼리통합
//			if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
////20160108 INDEX 힌트 추가, UNION을 IN에 통합
////20160113 정렬순서를 SEQ, NAME에서 NAME, SEQ로 변경
////				ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME || (CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END) AS NAME FROM TB_ORGANIZATION A WHERE SEQ IN ("
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ = ? CONNECT BY SEQ = PRIOR PARENT_SEQ"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? AND PARENT_SEQ = ?"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_SALES_DAILY WHERE USER_SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ"
////					+ " ) START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ");
////				ps.setInt(1, depth);
////				ps.setLong(2, this.cfg.getLong("user.organ"));
////				ps.setInt(3, depth);
////				ps.setLong(4, this.cfg.getLong("user.organ"));
////				ps.setInt(5, depth);
////				ps.setLong(6, this.cfg.getLong("user.seq"));
////				ps.setInt(7, depth);
////				ps.setLong(8, this.cfg.getLong("user.seq"));
////				ps.setInt(9, depth);
////				ps.setLong(10, this.cfg.getLong("user.seq"));
////				ps.setLong(11, organ);
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ INDEX(A) */"
//								+ " SEQ,"
//								+ " NAME || CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END AS NAME"
//							+ " FROM TB_ORGANIZATION A"
//							+ " WHERE DEPTH = ?"									// 1:depth
//								+ " AND SEQ IN ("
//										+ " SELECT /*+ INDEX(A_A) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_A"
//											+ " WHERE DEPTH = ?"					// 2:depth
//												+ " AND PARENT_SEQ = ?"				// 3:user.organ
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_B) */"
//												+ " SEQ"
//												+ " FROM TB_ORGANIZATION A_B"
////20160121 COMPANY_SEQ 조건 추가
//											+ " WHERE COMPANY_SEQ = ?"				// 4:user.company
//												+ " AND DEPTH = ?"					// 5:depth
//											+ " START WITH SEQ IN ("
//													+ " SELECT ? FROM DUAL"			// 6:user.organ
//													+ " UNION"
//													+ " SELECT /*+ INDEX(A_B_A) */"
//															+ " ORGANIZATION_SEQ"
//														+ " FROM TB_USER_APP_ORGAN A_B_A"
//														+ " WHERE SEQ = ?"			// 7:user.seq
//														+ " GROUP BY ORGANIZATION_SEQ"
//													+ " UNION"
//													+ " SELECT /*+ INDEX(A_B_B) */"
//															+ " ORGANIZATION_SEQ"
////20160120 TB_SALES_DAILY를 TB_VENDIGING_MACHINE_HISTORY로 변경
////														+ " FROM TB_SALES_DAILY A_B_B"
//														+ " FROM TB_VENDING_MACHINE_HISTORY A_B_B"
////20160121 COMPANY_SEQ 조건 추가
//														+ " WHERE COMPANY_SEQ = ?"	// 8:user.company
//															+ " AND USER_SEQ = ?"	// 9:user.seq
//														+ " GROUP BY ORGANIZATION_SEQ"
//												+ " )"
//											+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
//									+ " )"
//							+ " START WITH PARENT_SEQ = ?"							// 10:organ
//							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//							+ " ORDER BY NAME, SEQ"
//					);
//				ps.setInt(1, depth);
//				ps.setInt(2, depth);
//				ps.setLong(3, this.cfg.getLong("user.organ"));
//				ps.setLong(4, this.cfg.getLong("user.company"));
//				ps.setInt(5, depth);
//				ps.setLong(6, this.cfg.getLong("user.organ"));
//				ps.setLong(7, this.cfg.getLong("user.seq"));
//				ps.setLong(8, this.cfg.getLong("user.company"));
//				ps.setLong(9, this.cfg.getLong("user.seq"));
//				ps.setLong(10, organ);
//			} else if (this.cfg.getLong("user.organ") > 0) {
////20160111 INDEX 힌트 추가, UNION을 IN에 통합
////20160113 정렬순서를 SEQ, NAME에서 NAME, SEQ로 변경
////				ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME || (CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END) AS NAME FROM TB_ORGANIZATION A WHERE SEQ IN ("
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ = ? CONNECT BY SEQ = PRIOR PARENT_SEQ "
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ "
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? AND PARENT_SEQ = ?"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ"
////					+ " UNION"
////					+ " SELECT SEQ FROM TB_ORGANIZATION WHERE DEPTH = ? START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
////					+ " ) START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ");
////				ps.setInt(1, depth);
////				ps.setLong(2, this.cfg.getLong("user.organ"));
////				ps.setInt(3, depth);
////				ps.setLong(4, this.cfg.getLong("user.organ"));
////				ps.setInt(5, depth);
////				ps.setLong(6, this.cfg.getLong("user.organ"));
////				ps.setInt(7, depth);
////				ps.setLong(8, this.cfg.getLong("user.seq"));
////				ps.setInt(9, depth);
////				ps.setLong(10, this.cfg.getLong("user.seq"));
////				ps.setLong(11, organ);
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ INDEX(A) */"
//								+ " SEQ,"
//								+ " NAME || CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END AS NAME"
//							+ " FROM TB_ORGANIZATION A"
//							+ " WHERE DEPTH = ?"								// 1:depth
//								+ " AND SEQ IN ("
//										+ " SELECT /*+ INDEX(A_A) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_A"
////20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//											+ " WHERE COMPANY_SEQ = ?"			// 2:user.company
//												+ " AND DEPTH = ?"				// 3:depth
//											+ " START WITH SEQ IN ("
//													+ " SELECT ? FROM DUAL"		// 4:user.organ
//													+ " UNION"
//													+ " SELECT /*+ INDEX(A_A_A) */"
//														+ " ORGANIZATION_SEQ"
//													+ " FROM TB_USER_APP_ORGAN A_A_A"
//													+ " WHERE SEQ = ?"			// 5:user.seq
//													+ " GROUP BY ORGANIZATION_SEQ"
//												+ " )"
//											+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_B) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_B"
////20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//											+ " WHERE COMPANY_SEQ = ?"			// 6:user.company
//												+ " AND DEPTH = ?"				// 7:depth
//											+ " START WITH PARENT_SEQ IN ("
//													+ " SELECT ? FROM DUAL"		// 8:user.organ
//													+ " UNION"
//													+ " SELECT /*+ INDEX(A_B_A) */"
//															+ " ORGANIZATION_SEQ"
//														+ " FROM TB_USER_APP_ORGAN A_B_A"
//														+ " WHERE SEQ = ?"		// 9:user.seq
//														+ " GROUP BY ORGANIZATION_SEQ"
//												+ " )"
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//									+ " )"
//							+ " START WITH PARENT_SEQ = ?"						// 10:organ
//							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//							+ " ORDER BY NAME, SEQ"
//					);
//				ps.setInt(1, depth);
//				ps.setLong(2, this.cfg.getLong("user.company"));
//				ps.setInt(3, depth);
//				ps.setLong(4, this.cfg.getLong("user.organ"));
//				ps.setLong(5, this.cfg.getLong("user.seq"));
//				ps.setLong(6, this.cfg.getLong("user.company"));
//				ps.setInt(7, depth);
//				ps.setLong(8, this.cfg.getLong("user.organ"));
//				ps.setLong(9, this.cfg.getLong("user.seq"));
//				ps.setLong(10, organ);
//			} else {
////20160108 INDEX 힌트 추가
////20160113 정렬순서를 SEQ, NAME에서 NAME, SEQ로 변경
////				ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME || (CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END) AS NAME FROM TB_ORGANIZATION A WHERE COMPANY_SEQ = ? AND PARENT_SEQ = ? AND SORT = 1");
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ INDEX(A) */"
//								+ " SEQ,"
//								+ " NAME || CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END AS NAME"
//							+ " FROM TB_ORGANIZATION A"
//							+ " WHERE COMPANY_SEQ = ?"		// 1:user.company
//								+ " AND PARENT_SEQ = ?"		// 2:organ
//								+ " AND SORT = 1"
//							+ " ORDER BY NAME, SEQ"
//					);
//				ps.setLong(1, this.cfg.getLong("user.company"));
//				ps.setLong(2, organ);
//			}
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ INDEX(A) */"
							+ " SEQ,"
							+ " NAME || CASE WHEN IS_ENABLED = 'N' THEN '(' || NVL(SUBSTR(SUM_DATE, 3, 6), '000000') || ')' ELSE '' END AS NAME"
						+ " FROM TB_ORGANIZATION A"
			+ (this.cfg.getLong("user.organ") > 0
				// 조직이 지정된 일반관리자, 자판기 운영자
					?	" WHERE DEPTH = ?"											// 1:depth
							+ " AND SORT = 1"
							+ " AND SEQ IN ("
									+ " SELECT /*+ INDEX(A_A) */"
											+ " SEQ"
											+ " FROM TB_ORGANIZATION A_A"
										+ " WHERE DEPTH = ?"						// 2:depth
											+ " AND SORT = 1"
										+ " START WITH COMPANY_SEQ = ?"				// 3:user.company
											+ " AND SEQ IN ("
													+ " SELECT ? FROM DUAL"			// 4:user.organ
													+ " UNION"
													+ " SELECT /*+ INDEX(A_A_A) */"
															+ " ORGANIZATION_SEQ"
														+ " FROM TB_USER_APP_ORGAN A_A_A"
														+ " WHERE SEQ = ?"			// 5:user.seq
														+ " GROUP BY ORGANIZATION_SEQ"
								+ (this.cfg.get("user.operator").equals("Y")
									// 자판기 운영자
										?			" UNION"
													+ " SELECT /*+ INDEX(A_A_B) */"
															+ " ORGANIZATION_SEQ"
														+ " FROM TB_VENDING_MACHINE_HISTORY A_A_B"
														+ " WHERE COMPANY_SEQ = ?"	// 6:user.company
															+ " AND USER_SEQ = ?"	// 7:user.seq
														+ " GROUP BY ORGANIZATION_SEQ"
									// 조직이 지정된 일반관리자
										: ""
									)
												+ " )"
										+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
									+ " UNION"
									+ " SELECT /*+ INDEX(A_B) */"
											+ " SEQ"
										+ " FROM TB_ORGANIZATION A_B"
										+ " WHERE DEPTH = ?"						// 8, 6:depth
											+ " AND SORT = 1"
							+ (this.cfg.get("user.operator").equals("Y")
								// 자판기 운영자
									?		" AND COMPANY_SEQ = ?"					// 9:user.company
											+ " AND PARENT_SEQ = ?"					// 10:user.organ
								// 조직이 지정된 일반관리자
									:	" START WITH COMPANY_SEQ = ?"				// 7:user.company
											+ " AND PARENT_SEQ IN ("
													+ " SELECT ? FROM DUAL"			// 8:user.organ
													+ " UNION"
													+ " SELECT /*+ INDEX(A_B_A) */"
															+ " ORGANIZATION_SEQ"
														+ " FROM TB_USER_APP_ORGAN A_B_A"
														+ " WHERE SEQ = ?"			// 9:user.seq
														+ " GROUP BY ORGANIZATION_SEQ"
												+ " )"
										+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
								)
								+ " )"
						+ " START WITH PARENT_SEQ = ?"								// 11, 10:organ
						+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
				// 시스템관리자, 조직이 지정되지 않은 일반관리자
					:	" WHERE PARENT_SEQ = ?"										// 1:organ
							+ " AND SORT = 1"
					+ (this.cfg.getLong("user.company") > 0
							? " AND COMPANY_SEQ = ?"
							: ""
						)
				)
						+ " ORDER BY NAME, SEQ"
				);

			if (this.cfg.getLong("user.organ") > 0) {
				ps.setInt(1, depth);
				ps.setInt(2, depth);
				ps.setLong(3, this.cfg.getLong("user.company"));
				ps.setLong(4, this.cfg.getLong("user.organ"));
				ps.setLong(5, this.cfg.getLong("user.seq"));
				if (this.cfg.get("user.operator").equals("Y")) {
					ps.setLong(6, this.cfg.getLong("user.company"));
					ps.setLong(7, this.cfg.getLong("user.seq"));
					ps.setInt(8, depth);
					ps.setLong(9, this.cfg.getLong("user.company"));
					ps.setLong(10, this.cfg.getLong("user.organ"));
					ps.setLong(11, organ);
				} else {
					ps.setInt(6, depth);
					ps.setLong(7, this.cfg.getLong("user.company"));
					ps.setLong(8, this.cfg.getLong("user.organ"));
					ps.setLong(9, this.cfg.getLong("user.seq"));
					ps.setLong(10, organ);
				}
			} else {
				ps.setLong(1, organ);
				if (this.cfg.getLong("user.company") > 0) {
					ps.setLong(1, this.cfg.getLong("user.company"));
				}
			}

			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("SEQ", rs.getLong("SEQ"));
				c.put("NAME", rs.getString("NAME"));

				this.organ.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 설치 위치
		error = this.place(organ);

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 리소스 반환
		dbLib.close(conn);

		return null;
	}

	/**
	 * 설치 위치
	 *
	 * @param organ 조직
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String place(long organ) throws Exception {
	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색
		this.place = new ArrayList<GeneralConfig>();

		try {
//20160218 쿼리통합
//			if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
////20160108 JOIN 순서 변경, INDEX 힌트 추가, UNION을 IN에 통합, FULL 힌트 추가
////20160121 FULL(A)를 INDEX(A)로 변경
////				ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) INDEX(A PK_VM) */ A.SEQ, A.PLACE FROM TB_VENDING_MACHINE_PLACE A INNER JOIN TB_VENDING_MACHINE B ON A.VM_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_HISTORY C ON B.SEQ = C.VM_SEQ WHERE C.USER_SEQ = ? AND C.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = ?) GROUP BY A.SEQ, A.PLACE");
////				ps.setLong(1, this.cfg.getLong("user.seq"));
////				ps.setLong(2, organ);
////				ps.setLong(3, organ);
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
//								+ " B.SEQ,"
//								+ " B.PLACE,"
//								+ " B.END_DATE"
//							+ " FROM TB_VENDING_MACHINE_HISTORY A"
//								+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
//									+ " ON A.VM_SEQ = B.VM_SEQ"
//								+ " INNER JOIN TB_VENDING_MACHINE C"
//									+ " ON A.VM_SEQ = C.SEQ"
////20160121 COMPANY_SEQ 조건 추가
//							+ " WHERE A.COMPANY_SEQ = ?"					// 1:user.company
//								+ " AND A.USER_SEQ = ?"						// 2:user.seq
//								+ " AND A.ORGANIZATION_SEQ IN ("
//										+ " SELECT /*+ INDEX(A_A) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_A"
//											+ " WHERE SEQ = ?"				// 3:organ
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_B) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_B"
//											+ " WHERE SORT = 1"
//											+ " START WITH PARENT_SEQ = ?"	// 4:organ
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//									+ " )"
//							+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
//							+ " ORDER BY B.PLACE, B.SEQ"
//					);
//				ps.setLong(1, this.cfg.getLong("user.company"));
//				ps.setLong(2, this.cfg.getLong("user.seq"));
//				ps.setLong(3, organ);
//				ps.setLong(4, organ);
//			} else {
////20160108 JOIN 순서 변경, INDEX 힌트 추가, UNION을 IN에 통합
////20160121 FULL(A)를 INDEX(A)로 변경
////				ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) INDEX(A PK_VM) */ A.SEQ, A.PLACE FROM TB_VENDING_MACHINE_PLACE A INNER JOIN TB_VENDING_MACHINE B ON A.VM_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_HISTORY C ON B.SEQ = C.VM_SEQ WHERE C.COMPANY_SEQ = ? AND C.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = ? UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ? GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = ?) AND C.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = ? CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = ?) GROUP BY A.SEQ, A.PLACE");
////				ps.setLong(1, this.cfg.getLong("user.company"));
////				ps.setLong(2, this.cfg.getLong("user.organ"));
////				ps.setLong(3, this.cfg.getLong("user.organ"));
////				ps.setLong(4, this.cfg.getLong("user.seq"));
////				ps.setLong(5, this.cfg.getLong("user.seq"));
////				ps.setLong(6, organ);
////				ps.setLong(7, organ);
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
//								+ " B.SEQ,"
//								+ " B.PLACE,"
//								+ " B.END_DATE"
//							+ " FROM TB_VENDING_MACHINE_HISTORY A"
//								+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
//									+ " ON A.VM_SEQ = B.VM_SEQ"
//								+ " INNER JOIN TB_VENDING_MACHINE C"
//									+ " ON A.VM_SEQ = C.SEQ"
//							+ " WHERE A.COMPANY_SEQ = ?"					// 1:user.company
//								+ " AND A.ORGANIZATION_SEQ IN ("
//										+ " SELECT	/*+ INDEX(A_A) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_A"
//											+ " WHERE SEQ = ?"				// 2:user.organ
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_B) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_B"
////20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
//											+ " WHERE COMPANY_SEQ = ?"		// 3.user.company
//												+ " AND SORT = 1"
//											+ " START WITH PARENT_SEQ IN ("
//													+ " SELECT ? FROM DUAL"	// 4:user.organ
//													+ " UNION"
//													+ " SELECT /*+ INDEX(A_B_A) */"
//															+ " ORGANIZATION_SEQ"
//														+ " FROM TB_USER_APP_ORGAN A_B_A"
//														+ " WHERE SEQ = ?"	// 5:user.seq
//														+ " GROUP BY ORGANIZATION_SEQ"
//												+ " )"
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_C) */"
//												+ " ORGANIZATION_SEQ"
//											+ " FROM TB_USER_APP_ORGAN A_C"
//											+ " WHERE SEQ = ?"				// 6:user.seq
//									+ ")"
//								+ " AND A.ORGANIZATION_SEQ IN ("
//										+ " SELECT /*+ INDEX(A_D) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_D"
//											+ " WHERE SORT = 1"
//											+ " START WITH PARENT_SEQ = ?"	// 7:organ
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//										+ " UNION"
//										+ " SELECT /*+ INDEX(A_E) */"
//												+ " SEQ"
//											+ " FROM TB_ORGANIZATION A_E"
//											+ " WHERE SEQ = ?"				// 8:organ
//									+ " )"
//							+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
//							+ " ORDER BY B.PLACE, B.SEQ"
//					);
//				ps.setLong(1, this.cfg.getLong("user.company"));
//				ps.setLong(2, this.cfg.getLong("user.organ"));
//				ps.setLong(3, this.cfg.getLong("user.company"));
//				ps.setLong(4, this.cfg.getLong("user.organ"));
//				ps.setLong(5, this.cfg.getLong("user.seq"));
//				ps.setLong(6, this.cfg.getLong("user.seq"));
//				ps.setLong(7, organ);
//				ps.setLong(8, organ);
//			}
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A) USE_NL(B C) */"
							+ " B.SEQ,"
							+ " B.PLACE,"
							+ " B.END_DATE"
						+ " FROM TB_VENDING_MACHINE_HISTORY A"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
								+ " ON A.VM_SEQ = B.VM_SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE C"
								+ " ON A.VM_SEQ = C.SEQ"
						+ " WHERE A.ORGANIZATION_SEQ IN ("
									+ " SELECT /*+ INDEX(A_A) */"
											+ " SEQ"
										+ " FROM TB_ORGANIZATION A_A"
										+ " WHERE SEQ = ?"					// 1:organ
									+ " UNION"
									+ " SELECT /*+ INDEX(A_B) */"
											+ " SEQ"
										+ " FROM TB_ORGANIZATION A_B"
										+ " WHERE SORT = 1"
										+ " START WITH PARENT_SEQ = ?"		// 2:organ
										+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
								+ " )"
					+ (this.cfg.get("user.operator").equals("Y")
						// 자판기 운영자
							? " AND A.USER_SEQ = ?"							// 3:user.seq
						// 시스템관리자, 일반관리자
							: " AND A.ORGANIZATION_SEQ IN ("
									+ " SELECT	/*+ INDEX(A_C) */"
											+ " SEQ"
										+ " FROM TB_ORGANIZATION A_C"
										+ " WHERE SEQ = ?"					// 3:user.organ
									+ " UNION"
									+ " SELECT /*+ INDEX(A_E) */"
											+ " ORGANIZATION_SEQ"
										+ " FROM TB_USER_APP_ORGAN A_E"
										+ " WHERE SEQ = ?"					// 4:user.seq
									+ " UNION"
									+ " SELECT /*+ INDEX(A_D) */"
											+ " SEQ"
										+ " FROM TB_ORGANIZATION A_D"
										+ " WHERE SORT = 1"
										+ " START WITH PARENT_SEQ IN ("
													+ " SELECT ? FROM DUAL"	// 5:user.organ
													+ " UNION"
													+ " SELECT /*+ INDEX(A_D_A) */"
															+ " ORGANIZATION_SEQ"
														+ " FROM TB_USER_APP_ORGAN A_D_A"
														+ " WHERE SEQ = ?"	// 6:user.seq
														+ " GROUP BY ORGANIZATION_SEQ"
												+ " )"
									+ (this.cfg.getLong("user.company") > 0
											? " AND COMPANY_SEQ = ?"		// 7:user.company
											: ""
										)
										+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
								+ ")"
						)
					+ (this.cfg.getLong("user.company") > 0
							? " AND A.COMPANY_SEQ = ?"						// 4, 8:user.company
							: ""
						)
						+ " GROUP BY B.PLACE, B.SEQ, B.END_DATE"
						+ " ORDER BY B.PLACE, B.SEQ"
				);

			ps.setLong(1, organ);
			ps.setLong(2, organ);
			if (this.cfg.get("user.operator").equals("Y")) {
				ps.setLong(3, this.cfg.getLong("user.seq"));
				if (this.cfg.getLong("user.company") > 0) {
					ps.setLong(4, this.cfg.getLong("user.company"));
				}
			} else {
				ps.setLong(3, this.cfg.getLong("user.organ"));
				ps.setLong(4, this.cfg.getLong("user.seq"));
				ps.setLong(5, this.cfg.getLong("user.organ"));
				ps.setLong(6, this.cfg.getLong("user.seq"));
				if (this.cfg.getLong("user.company") > 0) {
					ps.setLong(7, this.cfg.getLong("user.company"));
					ps.setLong(8, this.cfg.getLong("user.company"));
				}
			}

			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("SEQ", rs.getLong("SEQ"));
//20160113 설치장소를 [삭제날짜]+설치장소로 변경
//				c.put("PLACE", rs.getString("PLACE"));
				String endDate = rs.getString("END_DATE");
				c.put("PLACE", (endDate == null ? "" : "[" + endDate + "] ") + rs.getString("PLACE"));

				this.place.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 리소스 반환
		dbLib.close(conn);

		return error;
	}

	/**
	 * 일별 매출 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String daily(String sType, long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE = " A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE = '" + sType + "'";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160108 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20151230 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
			long[] cnt = {0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0};

//20151230 서브쿼리 제거
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) */"
//					+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//					+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//					+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//					+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//					+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//					+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//					+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//					+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//					+ ", A.YYYY, A.MM, A.DD, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME AS ORGAN"
//					//20120604 자판기코드 추가
//					+ ", NVL(RX.VM_CODE, '') AS VM_CODE "
//					+ " FROM TB_SALES_DAILY A INNER JOIN TB_VENDING_MACHINE_PLACE B ON A.VM_PLACE_SEQ = B.SEQ INNER JOIN TB_ORGANIZATION C ON A.ORGANIZATION_SEQ = C.SEQ"
//					//20120604 자판기코드 추가
//					+ " INNER JOIN (SELECT TX1.CODE VM_CODE, TX2.SEQ PLACE_SEQ FROM TB_VENDING_MACHINE TX1, TB_VENDING_MACHINE_PLACE TX2 WHERE TX1.SEQ = TX2.VM_SEQ ) RX ON A.VM_PLACE_SEQ = RX.PLACE_SEQ "
//					+ " WHERE " + WHERE
//					//20120604 자판기코드 추가
//					+ " GROUP BY A.YYYY, A.MM, A.DD, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME, RX.VM_CODE"
//					//20120604 자판기코드 추가
//					//+ " ORDER BY A.YYYY, A.MM, A.DD");
//					+ " ORDER BY B.PLACE ,A.YYYY, A.MM, A.DD");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_DAILY_YYYYMMDD) USE_HASH(B C D) */"
							+ " A.YYYYMMDD,"
							+ " A.COMPANY_SEQ,"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.VM_PLACE_SEQ,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
//20151230 직접 JOIN에 따른 컬럼명 RX.VM_CODE를 D.CODE로 변경
							+ " D.CODE AS VM_CODE,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY,"
							+ " NVL(SUM(A.CNT), 0) AS CNT_TOTAL,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
						+ " FROM TB_SALES_DAILY A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
//20151230 직접 JOIN으로 변경
							+ " INNER JOIN TB_VENDING_MACHINE D"
								+ " ON C.VM_SEQ = D.SEQ"
						+ " WHERE" + WHERE
//10151230 직접 JOIN에 따른 컬럼명 RX.VM_CODE를 D.CODE로 변경
						+ " GROUP BY A.YYYYMMDD, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ,"
							+ " B.NAME, C.PLACE, D.CODE"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME DESC, A.YYYYMMDD, C.PLACE DESC, D.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE DESC, B.NAME DESC, A.YYYYMMDD, D.CODE" :
								// default: 날짜
												" ORDER BY A.YYYYMMDD DESC, B.NAME, C.PLACE, D.CODE"
							) : (			// ASC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME, A.YYYYMMDD, C.PLACE, D.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE, B.NAME, A.YYYYMMDD, D.CODE" :
								// default: 날짜
												" ORDER BY A.YYYYMMDD, B.NAME, C.PLACE, D.CODE"
								)
							)
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

//20160111 YYYY, MM, DD에서 YYYYMMDD로 변경
//				c.put("YYYY", rs.getString("YYYY"));
//				c.put("MM", rs.getString("MM"));
//				c.put("DD", rs.getString("DD"));
//				c.put("DATE", rs.getString("YYYY") + "-" + rs.getString("MM") + "-" + rs.getString("DD"));
				String yyyymmdd = rs.getString("YYYYMMDD");
				c.put("YYYYMMDD", yyyymmdd);
				c.put("DATE", yyyymmdd.substring(0, 4) + "-" + yyyymmdd.substring(4, 6) + "-" + yyyymmdd.substring(6, 8));

				c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				//20120604 자판기코드 추가
				c.put("VM_CODE", rs.getString("VM_CODE"));

				c.put("CNT_CARD", rs.getLong("CNT_CARD"));
				c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				c.put("CNT_CASH", rs.getLong("CNT_CASH"));
				c.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
				c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				c.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
				c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));

				this.list.add(c);

				cnt[0] += rs.getLong("CNT_CARD");
				cnt[1] += rs.getLong("CNT_CASH");
				cnt[2] += rs.getLong("CNT_PREPAY");
				cnt[3] += rs.getLong("CNT_TOTAL");
				amt[0] += rs.getLong("AMOUNT_CARD");
				amt[1] += rs.getLong("AMOUNT_CASH");
				amt[2] += rs.getLong("AMOUNT_PREPAY");
				amt[3] += rs.getLong("AMOUNT_TOTAL");
			}

			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_CASH", cnt[1]);
			this.data.put("CNT_PREPAY", cnt[2]);
			this.data.put("CNT_TOTAL", cnt[3]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_CASH", amt[1]);
			this.data.put("AMOUNT_PREPAY", amt[2]);
			this.data.put("AMOUNT_TOTAL", amt[3]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 조직명
//20160111 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
						+ " FROM ("
								+ " SELECT /*+ INDEX(A) */"
										+ " NAME"
									+ " FROM TB_ORGANIZATION A"
									+ " WHERE COMPANY_SEQ = " + company
										+ " AND SORT = 0"
									+ " ORDER BY DEPTH DESC"
							+ " )"
						+ " WHERE ROWNUM = 1"
					)
			);

	// 검색 설정
//20160111 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//20160111 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160111 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160111 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

	// 정렬
//20160111 쿼리문에서 ORDER BY로 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//			default :	// 날짜
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("DATE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("DATE", true));
//				}
//		}

		return error;
	}

	/**
	 * 월별 매출 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String monthly(String sType, long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE = " A.YYYYMM BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE = '" + sType + "'";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160112 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160112 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
			long[] cnt = {0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0};

//20160112 서브쿼리 제거
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) */"
//				+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//				+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//				+ ", A.YYYY, A.MM, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME AS ORGAN"
//				+ ", I.CODE AS VENDING_MACHINE_CODE "
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_VENDING_MACHINE_PLACE B ON A.VM_PLACE_SEQ = B.SEQ INNER JOIN TB_ORGANIZATION C ON A.ORGANIZATION_SEQ = C.SEQ INNER JOIN (select I1.seq vmseq, I1.CODE, I2.SEQ place_seq from TB_VENDING_MACHINE I1, TB_VENDING_MACHINE_PLACE I2 WHERE I1.seq = I2.VM_SEQ) I ON  A.VM_PLACE_SEQ = I.place_seq "
//				+ " WHERE " + WHERE
//				+ " GROUP BY A.YYYY, A.MM, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME, I.CODE "
//				+ " ORDER BY A.YYYY, A.MM,  A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME, I.CODE ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_MONTHLY_YYYYMM) USE_HASH(B C D) */"
							+ " A.YYYYMM,"
							+ " A.COMPANY_SEQ,"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.VM_PLACE_SEQ,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
							+ " D.CODE AS VM_CODE,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY,"
							+ " NVL(SUM(A.CNT), 0) AS CNT_TOTAL,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
						+ " FROM TB_SALES_MONTHLY A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE D"
								+ " ON C.VM_SEQ = D.SEQ"
						+ " WHERE" + WHERE
						+ " GROUP BY A.YYYYMM, A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ,"
							+ " B.NAME, C.PLACE, D.CODE"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME DESC, A.YYYYMM, C.PLACE DESC, D.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE DESC, B.NAME DESC, A.YYYYMM, D.CODE" :
								// default: 날짜
												" ORDER BY A.YYYYMM DESC, B.NAME, C.PLACE, D.CODE"
							) : (			// ASC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME, A.YYYYMM, C.PLACE, D.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE, B.NAME, A.YYYYMM, D.CODE" :
								// default: 날짜
												" ORDER BY A.YYYYMM, B.NAME, C.PLACE, D.CODE"
								)
							)
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

//				c.put("YYYY", rs.getString("YYYY"));
//				c.put("MM", rs.getString("MM"));
//				c.put("DATE", rs.getString("YYYY") + "-" + rs.getString("MM"));
				String yyyymm = rs.getString("YYYYMM");
				c.put("YYYYMM", yyyymm);
				c.put("DATE", yyyymm.substring(0, 4) + "-" + yyyymm.substring(4, 6));

				c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				c.put("VM_CODE", rs.getString("VM_CODE"));

				c.put("CNT_CARD", rs.getLong("CNT_CARD"));
				c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				c.put("CNT_CASH", rs.getLong("CNT_CASH"));
				c.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
				c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				c.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
				c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));

				this.list.add(c);

				cnt[0] += rs.getLong("CNT_CARD");
				cnt[1] += rs.getLong("CNT_CASH");
				cnt[2] += rs.getLong("CNT_PREPAY");
				cnt[3] += rs.getLong("CNT_TOTAL");
				amt[0] += rs.getLong("AMOUNT_CARD");
				amt[1] += rs.getLong("AMOUNT_CASH");
				amt[2] += rs.getLong("AMOUNT_PREPAY");
				amt[3] += rs.getLong("AMOUNT_TOTAL");
			}

			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_CASH", cnt[1]);
			this.data.put("CNT_PREPAY", cnt[2]);
			this.data.put("CNT_TOTAL", cnt[3]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_CASH", amt[1]);
			this.data.put("AMOUNT_PREPAY", amt[2]);
			this.data.put("AMOUNT_TOTAL", amt[3]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 조직명
//20160112 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
										+ " ORDER BY DEPTH DESC"
								+ " )"
							+ " WHERE ROWNUM = 1"
					)
			);

	// 검색 설정
//201601112 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//201601112 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//201601112 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//201601112 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

	// 정렬
//20160111 쿼리문에서 ORDER BY로 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//			default :	// 날짜
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("DATE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("DATE", true));
//				}
//		}

		return error;
	}

	/**
	 * 자판기별 매출 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String vm(String sType, long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE = " A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE = '" + sType + "'";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160112 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160112 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
			long[] cnt = {0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0};

//20160112 서브쿼리 제거
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) */"
//				+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//				+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//				+ ", A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME AS ORGAN"
//				//20120604 자판기코드 추가
//				+ ", NVL(RX.VM_CODE, '') AS VM_CODE "
//				+ " FROM TB_SALES_DAILY A INNER JOIN TB_VENDING_MACHINE_PLACE B ON A.VM_PLACE_SEQ = B.SEQ INNER JOIN TB_ORGANIZATION C ON A.ORGANIZATION_SEQ = C.SEQ"
//				//20120604 자판기코드 추가
//				+ " INNER JOIN (SELECT TX1.CODE VM_CODE, TX2.SEQ PLACE_SEQ FROM TB_VENDING_MACHINE TX1, TB_VENDING_MACHINE_PLACE TX2 WHERE TX1.SEQ = TX2.VM_SEQ ) RX ON A.VM_PLACE_SEQ = RX.PLACE_SEQ "
//				+ " WHERE " + WHERE
//				//20120604 자판기코드 추가
//				+ " GROUP BY A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, B.PLACE, C.NAME, RX.VM_CODE "
//				//+ " ORDER BY A.COMPANY_SEQ, A.ORGANIZATION_SEQ");
//				+ " ORDER BY B.PLACE, A.COMPANY_SEQ, A.ORGANIZATION_SEQ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_DAILY_YYYYMMDD) USE_HASH(B C D) */"
							+ " A.VM_PLACE_SEQ,"
							+ " A.COMPANY_SEQ,"
							+ " A.ORGANIZATION_SEQ,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
							+ " D.CODE AS VM_CODE,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY,"
							+ " NVL(SUM(A.CNT), 0) AS CNT_TOTAL,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
						+ " FROM TB_SALES_DAILY A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE D"
								+ " ON C.VM_SEQ = D.SEQ"
						+ " WHERE" + WHERE
						+ " GROUP BY A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ,"
							+ " B.NAME, C.PLACE, D.CODE"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME DESC, C.PLACE, D.CODE" :
								// default: 설치장소
												" ORDER BY C.PLACE DESC, B.NAME, D.CODE"
							) : (			// ASC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME, C.PLACE, D.CODE" :
								// default: 설치장소
												" ORDER BY C.PLACE, B.NAME, D.CODE"
								)
							)
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				//20120604 자판기코드 추가
				c.put("VM_CODE", rs.getString("VM_CODE"));

				c.put("CNT_CARD", rs.getLong("CNT_CARD"));
				c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				c.put("CNT_CASH", rs.getLong("CNT_CASH"));
				c.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
				c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				c.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
				c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));

				this.list.add(c);

				cnt[0] += rs.getLong("CNT_CARD");
				cnt[1] += rs.getLong("CNT_CASH");
				cnt[2] += rs.getLong("CNT_PREPAY");
				cnt[3] += rs.getLong("CNT_TOTAL");
				amt[0] += rs.getLong("AMOUNT_CARD");
				amt[1] += rs.getLong("AMOUNT_CASH");
				amt[2] += rs.getLong("AMOUNT_PREPAY");
				amt[3] += rs.getLong("AMOUNT_TOTAL");
			}

			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_CASH", cnt[1]);
			this.data.put("CNT_PREPAY", cnt[2]);
			this.data.put("CNT_TOTAL", cnt[3]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_CASH", amt[1]);
			this.data.put("AMOUNT_PREPAY", amt[2]);
			this.data.put("AMOUNT_TOTAL", amt[3]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 조직명
//20160112 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
										+ " ORDER BY DEPTH DESC"
								+ " )"
							+ " WHERE ROWNUM = 1"
					)
			);

	// 검색 설정
//20160112 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//20160112 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160112 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160112 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

	// 정렬
//20160112 쿼리문에서 ORDER BY로 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//		}

		return error;
	}

	/**
	 * 상품별 매출 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param goods 상품
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String goods(String sType, long company, long organ, long place, String sDate, String eDate, String goods, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE = " A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE = '" + sType + "'";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160113 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160113 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

		if (!StringEx.isEmpty(goods)) { // 상품
			WHERE += " AND D.NAME LIKE '%" + goods + "%'";
		}

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
			long[] cnt = {0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0};

//20160113 서브쿼리 제거
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C D) */"
//				+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//				+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//				+ ", A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.GOODS_SEQ, B.PLACE, C.NAME AS ORGAN, D.NAME AS GOODS"
//				//20120604 자판기코드 추가
//				+ ", NVL(RX.VM_CODE, '') AS VM_CODE "
//				+ " FROM TB_SALES_DAILY A INNER JOIN TB_VENDING_MACHINE_PLACE B ON A.VM_PLACE_SEQ = B.SEQ INNER JOIN TB_ORGANIZATION C ON A.ORGANIZATION_SEQ = C.SEQ INNER JOIN TB_GOODS D ON A.GOODS_SEQ = D.SEQ"
//				//20120604 자판기코드 추가
//				+ " INNER JOIN (SELECT TX1.CODE VM_CODE, TX2.SEQ PLACE_SEQ FROM TB_VENDING_MACHINE TX1, TB_VENDING_MACHINE_PLACE TX2 WHERE TX1.SEQ = TX2.VM_SEQ ) RX ON A.VM_PLACE_SEQ = RX.PLACE_SEQ "
//				+ " WHERE " + WHERE
//				//20120604 자판기코드 추가
//				//+ " GROUP BY A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.GOODS_SEQ, B.PLACE, C.NAME, D.NAME"
//				+ " GROUP BY A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.GOODS_SEQ, B.PLACE, C.NAME, D.NAME, RX.VM_CODE "
//				//20120604 자판기코드 추가
//				//+ " ORDER BY A.COMPANY_SEQ, A.ORGANIZATION_SEQ");
//				+ " ORDER BY B.PLACE, A.COMPANY_SEQ, A.ORGANIZATION_SEQ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_DAILY_YYYYMMDD) USE_HASH(B C D E) */"
							+ " A.COMPANY_SEQ,"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.VM_PLACE_SEQ,"
							+ " A.GOODS_SEQ,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
							+ " D.NAME AS GOODS,"
							+ " E.CODE AS VM_CODE,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY,"
							+ " NVL(SUM(A.CNT), 0) AS CNT_TOTAL,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
						+ " FROM TB_SALES_DAILY A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_GOODS D"
								+ " ON A.GOODS_SEQ = D.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE E"
								+ " ON C.VM_SEQ = E.SEQ"
						+ " WHERE" + WHERE
						+ " GROUP BY A.VM_PLACE_SEQ, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.GOODS_SEQ,"
							+ " B.NAME, C.PLACE, D.NAME, E.CODE"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME DESC, D.NAME, C.PLACE, E.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE DESC, B.NAME, D.NAME, E.CODE" :
								// default: 상품명
												" ORDER BY D.NAME DESC, B.NAME, C.PLACE, E.CODE"
							) : (			// ASC
								// 거래처
								(oMode == 1) ?	" ORDER BY B.NAME, D.NAME, C.PLACE, E.CODE" :
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE, B.NAME, D.NAME, E.CODE" :
								// default: 상품명
												" ORDER BY D.NAME, B.NAME, C.PLACE, E.CODE"
								)
							)
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				c.put("GOODS_SEQ", rs.getLong("GOODS_SEQ"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				c.put("GOODS", rs.getString("GOODS"));
				//20120604 자판기코드 추가
				c.put("VM_CODE", rs.getString("VM_CODE"));

				c.put("CNT_CARD", rs.getLong("CNT_CARD"));
				c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				c.put("CNT_CASH", rs.getLong("CNT_CASH"));
				c.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
				c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				c.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
				c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));

				this.list.add(c);

				cnt[0] += rs.getLong("CNT_CARD");
				cnt[1] += rs.getLong("CNT_CASH");
				cnt[2] += rs.getLong("CNT_PREPAY");
				cnt[3] += rs.getLong("CNT_TOTAL");
				amt[0] += rs.getLong("AMOUNT_CARD");
				amt[1] += rs.getLong("AMOUNT_CASH");
				amt[2] += rs.getLong("AMOUNT_PREPAY");
				amt[3] += rs.getLong("AMOUNT_TOTAL");
			}

			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_CASH", cnt[1]);
			this.data.put("CNT_PREPAY", cnt[2]);
			this.data.put("CNT_TOTAL", cnt[3]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_CASH", amt[1]);
			this.data.put("AMOUNT_PREPAY", amt[2]);
			this.data.put("AMOUNT_TOTAL", amt[3]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 조직명
//20160114 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
											+ " ORDER BY DEPTH DESC"
								+ " )"
							+ " WHERE ROWNUM = 1"
					)
			);

	// 검색 설정
//20160114 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//20160114 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160114 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160114 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		if (!StringEx.isEmpty(goods)) {
			sDesc += "&상품명=" + goods;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

	// 정렬
//20160114 쿼리문에서 ORDER BY로 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//			case 3 :	// 상품명
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("GOODS", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("GOODS", true));
//				}
//
//				break;
//		}

		return error;
	}

	/**
	 * 상세 매출 현황 - 엑셀
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param goods 상품
	 * @param payment 결제 방식
	 * @param step 진행 상태
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String sales(String sType, long company, long organ, long place, String sDate, String eDate, long goods, String payment, String step) throws Exception {
	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE;
		int type = StringEx.str2int(sType);

		switch (type) {
			case 2 : // 매입
				WHERE = " A.PURCHASE_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			case 3 : // 입금
				WHERE = " A.PAY_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			case 4 : // 마감
				WHERE = " A.CLOSING_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			default: // 거래
				WHERE = " A.TRANSACTION_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
		}

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160114 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160114 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ ")"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

		if (goods > 0) { // 상품
			WHERE += " AND A.GOODS_SEQ = " + goods;
		}

		if (!StringEx.isEmpty(payment)) { // 결제유형
			WHERE += " AND A.PAY_TYPE = '" + payment + "'";
		}

		if (!StringEx.isEmpty(step)) { // 상태
			WHERE += " AND A.PAY_STEP = '" + step + "'";
		}

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
//20160114
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C D E F G H) INDEX_DESC(A UK_SALES_2) */"
//				+ "  TO_CHAR(TO_DATE(A.TRANSACTION_DATE || A.TRANSACTION_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS TRANSACTION_DATE"
//				+ ", TO_CHAR(TO_DATE(A.PURCHASE_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') AS PURCHASE_DATE"
//				+ ", CASE A.PAY_STEP WHEN '02' THEN TO_CHAR(TO_DATE(A.PAY_DATE_EXP, 'YYYYMMDD'), 'YYYY-MM-DD') WHEN '03' THEN TO_CHAR(TO_DATE(A.PAY_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') ELSE NULL END AS PAY_DATE"
//				+ ", TO_CHAR(TO_DATE(A.CLOSING_DATE || A.CLOSING_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS CLOSING_DATE"
//				+ ", TO_CHAR(TO_DATE(A.CANCEL_DATE || A.CANCEL_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS CANCEL_DATE"
//				+ ", A.TERMINAL_ID, A.TRANSACTION_NO, A.AMOUNT, E.NAME AS PAY_TYPE, F.NAME AS PAY_STEP, G.NAME AS INPUT_TYPE, H.NAME AS PAY_CARD, B.PLACE, C.NAME AS ORGAN, D.NAME AS GOODS"
//				+ ", I.CODE AS VENDING_MACHINE_CODE "
//				+ " FROM TB_SALES A"
//				+ " INNER JOIN TB_VENDING_MACHINE_PLACE B"
//					+ " ON A.VM_PLACE_SEQ = B.SEQ"
//				+ " INNER JOIN TB_ORGANIZATION C"
//					+ " ON A.ORGANIZATION_SEQ = C.SEQ"
//				+ " INNER JOIN TB_GOODS D"
//					+ " ON A.GOODS_SEQ = D.SEQ"
//				+ " LEFT JOIN TB_CODE E"
//					+ " ON (A.PAY_TYPE = E.CODE AND E.TYPE = 'PAY_TYPE')"
//				+ " LEFT JOIN TB_CODE F"
//					+ " ON (A.PAY_STEP = F.CODE AND F.TYPE = 'PAY_STEP')"
//				+ " LEFT JOIN TB_CODE G"
//					+ " ON (A.INPUT_TYPE = G.CODE AND G.TYPE = 'INPUT_TYPE')"
//				+ " LEFT JOIN TB_CODE H"
//					+ " ON (A.PAY_CARD = H.CODE AND H.TYPE = 'PAY_CARD')"
//				+ " INNER JOIN TB_VENDING_MACHINE I"
//					+ " ON A.TERMINAL_ID=I.TERMINAL_ID"
//				+ " WHERE " + WHERE);
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A"
							+ (
								type == 1 ? " IX_SALES_TRANSACTION_DATE" :
								type == 2 ? " IX_SALES_PURCHASE_DATE" :
								type == 3 ? " IX_SALES_PAY_DATE" :
								type == 4 ? " IX_SALES_CLOSING_DATE" : ""
								)
							+ ") USE_NL(B C D E F G H I) */"
							+ " A.TRANSACTION_DATE || A.TRANSACTION_TIME AS TRANSACTION_DATE,"
							+ " A.PURCHASE_DATE,"
							+ " CASE A.PAY_STEP"
									+ " WHEN '02' THEN A.PAY_DATE_EXP"
									+ " WHEN '03' THEN A.PAY_DATE"
								+ " END AS PAY_DATE,"
							+ " CASE WHEN A.CLOSING_DATE IS NOT NULL THEN A.CLOSING_DATE || NVL(A.CLOSING_TIME, '000000') END AS CLOSING_DATE,"
//20160122 사용안함
//							+ " CASE WHEN A.CANCEL_DATE IS NOT NULL THEN A.CANCEL_DATE || NVL(A.CANCEL_TIME, '000000') END AS CANCEL_DATE,"
							+ " A.TERMINAL_ID,"
							+ " A.TRANSACTION_NO,"
							+ " A.AMOUNT,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
							+ " D.NAME AS GOODS,"
							+ " E.CODE AS VM_CODE,"
							+ " F.NAME AS PAY_TYPE,"
							+ " G.NAME AS PAY_STEP,"
							+ " H.NAME AS INPUT_TYPE,"
							+ " I.NAME AS PAY_CARD"
						+ " FROM TB_SALES A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_GOODS D"
								+ " ON A.GOODS_SEQ = D.SEQ"
								//TODO: FK_SALES_TERMINAL_ID 생성 후 INNER JOIN으로 변경
							+ " LEFT JOIN TB_VENDING_MACHINE E"
								+ " ON A.TERMINAL_ID = E.TERMINAL_ID"
							+ " LEFT JOIN TB_CODE F"
								+ " ON A.PAY_TYPE = F.CODE"
									+ " AND F.TYPE = 'PAY_TYPE'"
							+ " LEFT JOIN TB_CODE G"
								+ " ON A.PAY_STEP = G.CODE"
									+ " AND G.TYPE = 'PAY_STEP'"
							+ " LEFT JOIN TB_CODE H"
								+ " ON A.INPUT_TYPE = H.CODE"
									+ " AND H.TYPE = 'INPUT_TYPE'"
							+ " LEFT JOIN TB_CODE I"
								+ " ON A.PAY_CARD = I.CODE"
									+ " AND I.TYPE = 'PAY_CARD'"
						+ " WHERE" + WHERE
						+ " ORDER BY A.TRANSACTION_DATE DESC, A.TRANSACTION_TIME DESC"
					);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

// 20160114 날짜포멧을 JAVA로 처리
//				c.put("TRANSACTION_DATE", rs.getString("TRANSACTION_DATE"));
//				c.put("PURCHASE_DATE", rs.getString("PURCHASE_DATE"));
//				c.put("PAY_DATE", rs.getString("PAY_DATE"));
//				c.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
//				c.put("CANCEL_DATE", rs.getString("CANCEL_DATE"));
				String date = rs.getString("TRANSACTION_DATE");
				c.put("TRANSACTION_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
				date = rs.getString("PURCHASE_DATE");
				c.put("PURCHASE_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8)
							: ""
					);
				date = rs.getString("PAY_DATE");
				c.put("PAY_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8)
							: ""
					);
				date = rs.getString("CLOSING_DATE");
				c.put("CLOSING_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
//20160122 사용안함
//				date = rs.getString("CANCEL_DATE");
//				c.put("CANCEL_DATE",
//						date != null
//							? date.substring(0, 4) + "-"
//								+ date.substring(4, 6) + "-"
//								+ date.substring(6, 8) + " "
//								+ date.substring(8, 10) + ":"
//								+ date.substring(10, 12) + ":"
//								+ date.substring(12, 14)
//						: ""
//					);
				c.put("TERMINAL_ID", rs.getString("TERMINAL_ID"));
				c.put("TRANSACTION_NO", rs.getString("TRANSACTION_NO"));
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				c.put("VMCODE", rs.getString("VM_CODE"));
				c.put("GOODS", rs.getString("GOODS"));
				c.put("PAY_TYPE", rs.getString("PAY_TYPE"));
				c.put("PAY_STEP", rs.getString("PAY_STEP"));
				c.put("INPUT_TYPE", rs.getString("INPUT_TYPE"));
				c.put("PAY_CARD", rs.getString("PAY_CARD"));

				this.list.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 마감 출력 여부, 2011.06.11, 정원광
//20160114 INDEX 힌트 추가
//		this.data.put("IS_VIEW_CLOSING", dbLib.getResult(conn, "SELECT IS_VIEW_CLOSING FROM TB_COMPANY WHERE SEQ = " + company));
		this.data.put("IS_VIEW_CLOSING",
				dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " IS_VIEW_CLOSING"
							+ " FROM TB_COMPANY A"
							+ " WHERE SEQ = " + company
					)
			);

	// 검색 설정
//20160114 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//20160115 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160114 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160114 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		if (goods > 0) {
//20160114 INDEX 힌트 추가
//			sDesc += "&상품명=" + dbLib.getResult(conn, "SELECT NAME FROM TB_GOODS WHERE SEQ = " + goods);
			sDesc += "&상품명="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_GOODS A"
								+ " WHERE SEQ = " + goods
						)
				;
		}

		if (!StringEx.isEmpty(payment)) {
//20160114 INDEX 힌트 추가
//			sDesc += "&결제유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'PAY_TYPE' AND CODE = '" + payment + "'");
			sDesc += "&결제유형="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_CODE A"
								+ " WHERE TYPE = 'PAY_TYPE'"
									+ " AND CODE = '" + payment + "'"
						)
				;
		}

		if (!StringEx.isEmpty(step)) {
//20160114 INDEX 힌트 추가
//			sDesc += "&진행상태=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'PAY_STEP' AND CODE = '" + step + "'");
			sDesc += "&진행상태="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_CODE A"
								+ " WHERE TYPE = 'PAY_STEP'"
								+ " AND CODE = '" + step + "'"
						)
				;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

		return error;
	}

	/**
	 * 상세 매출 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param goods 상품
	 * @param payment 결제 방식
	 * @param step 진행 상태
	 * @param pageNo 페이지
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String sales(String sType, long company, long organ, long place, String sDate, String eDate, long goods, String payment, String step, int pageNo) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE;
		int type = StringEx.str2int(sType);

		switch (type) {
			case 2 : // 매입
				WHERE = " A.PURCHASE_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			case 3 : // 입금
				WHERE = " A.PAY_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			case 4 : // 마감
				WHERE = " A.CLOSING_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
				break;
			default: // 거래
				WHERE = " A.TRANSACTION_DATE BETWEEN '" + sDate + "' AND '" + eDate + "'";
		}

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160114 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160114 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ ")"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

		if (goods > 0) { // 상품
			WHERE += " AND A.GOODS_SEQ = " + goods;
		}

		if (!StringEx.isEmpty(step)) { // 상태
			WHERE += " AND A.PAY_STEP = '" + step + "'";
		}

		if (!StringEx.isEmpty(payment)) { // 결제유형
			WHERE += " AND A.PAY_TYPE = '" + payment + "'";
		}

	// 총 레코드수
//20150114 불필요한 JOIN 제거
//		this.records = StringEx.str2long(dbLib.getResult(conn, "SELECT /*+ ORDERED USE_NL(B C D E F G H) */ COUNT(*) FROM " + TABLE + " WHERE " + WHERE));
		this.records = StringEx.str2long(
				dbLib.getResult(conn,
						"SELECT /*+ INDEX(A"
								+ (
									type == 1 ? " IX_SALES_TRANSACTION_DATE" :
									type == 2 ? " IX_SALES_PURCHASE_DATE" :
									type == 3 ? " IX_SALES_PAY_DATE" :
									type == 4 ? " IX_SALES_CLOSING_DATE" : ""
									)
								+ ") */"
								+ " COUNT(*)"
							+ " FROM TB_SALES A"
							+ " WHERE" + WHERE
					)
			);

	// 총 페이지수
		this.pages = Pager.getSize(this.records, cfg.getInt("limit.list"));

	// 리스트 가상번호
		long no = this.records - (pageNo - 1) * cfg.getInt("limit.list");

	// 목록 가져오기
		this.list = new ArrayList<GeneralConfig>();
		this.data = new GeneralConfig();

		try {
			int s = ((pageNo - 1) * cfg.getInt("limit.list")) + 1;
			int e = (s - 1) + cfg.getInt("limit.list");

// 20160115 20160114 ORDER BY 추가, TO_CHAR(TO_DATE())를 JAVA에서 처리
//			ps = dbLib.prepareStatement(conn, "SELECT S2.*"
//					+ " FROM"
//					+ " ("
//					+ " SELECT ROWNUM AS RNUM, S1.*"
//					+ " FROM"
//					+ " ("
//					+ " SELECT /*+ ORDERED USE_NL(B C D E F G H) INDEX_DESC(A UK_SALES_2) */"
//					+ "  TO_CHAR(TO_DATE(A.TRANSACTION_DATE || A.TRANSACTION_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS TRANSACTION_DATE"
//					+ ", TO_CHAR(TO_DATE(A.PURCHASE_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') AS PURCHASE_DATE"
//					+ ", CASE A.PAY_STEP WHEN '02' THEN TO_CHAR(TO_DATE(A.PAY_DATE_EXP, 'YYYYMMDD'), 'YYYY-MM-DD') WHEN '03' THEN TO_CHAR(TO_DATE(A.PAY_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') ELSE NULL END AS PAY_DATE"
//					+ ", TO_CHAR(TO_DATE(A.CLOSING_DATE || A.CLOSING_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS CLOSING_DATE"
//					+ ", TO_CHAR(TO_DATE(A.CANCEL_DATE || A.CANCEL_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS CANCEL_DATE"
//					+ ", A.TERMINAL_ID, A.TRANSACTION_NO, A.AMOUNT, E.NAME AS PAY_TYPE, F.NAME AS PAY_STEP, G.NAME AS INPUT_TYPE, H.NAME AS PAY_CARD, B.PLACE, C.NAME AS ORGAN, D.NAME AS GOODS"
//					+ ", I.CODE AS VENDING_MACHINE_CODE "
//					+ " FROM " + TABLE
//					+ " WHERE " + WHERE
//					+ " ) S1"
//					+ " WHERE ROWNUM <= " + e
//					+ " ) S2"
//					+ " WHERE RNUM >= " + s);
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED USE_NL(B C D E F G H I) */"
							+ " AAA.TRANSACTION_DATE || AAA.TRANSACTION_TIME AS TRANSACTION_DATE,"
							+ " AAA.PURCHASE_DATE,"
							+ " CASE AAA.PAY_STEP"
									+ " WHEN '02' THEN AAA.PAY_DATE_EXP"
									+ " WHEN '03' THEN AAA.PAY_DATE"
								+ " END AS PAY_DATE,"
							+ " CASE WHEN AAA.CLOSING_DATE IS NOT NULL THEN AAA.CLOSING_DATE || NVL(AAA.CLOSING_TIME, '000000') END AS CLOSING_DATE,"
//20160122 사용안함
//							+ " CASE WHEN AAA.CANCEL_DATE IS NOT NULL THEN AAA.CANCEL_DATE || NVL(AAA.CANCEL_TIME, '000000') END AS CANCEL_DATE,"
							+ " AAA.TERMINAL_ID,"
							+ " AAA.TRANSACTION_NO,"
							+ " AAA.AMOUNT,"
							+ " B.NAME AS ORGAN,"
							+ " C.PLACE,"
							+ " D.NAME AS GOODS,"
							+ " E.CODE AS VM_CODE,"
							+ " F.NAME AS PAY_TYPE,"
							+ " G.NAME AS PAY_STEP,"
							+ " H.NAME AS INPUT_TYPE,"
							+ " I.NAME AS PAY_CARD"
						+ " FROM ("
									+ " SELECT"
											+ " ROWNUM AS ROW_NUM,"
											+ " AA.*"
										+ " FROM ("
												+ " SELECT /*+ INDEX(A"
														+ (
															type == 1 ? " IX_SALES_TRANSACTION_DATE" :
															type == 2 ? " IX_SALES_PURCHASE_DATE" :
															type == 3 ? " IX_SALES_PAY_DATE" :
															type == 4 ? " IX_SALES_CLOSING_DATE" : ""
															)
														+ ") */"
														+ " *"
													+ " FROM TB_SALES A"
													+ " WHERE" + WHERE
													+ " ORDER BY A.TRANSACTION_DATE DESC, A.TRANSACTION_TIME DESC"
											+ " ) AA"
										+ " WHERE ROWNUM <= " + e
								+ ") AAA"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON AAA.ORGANIZATION_SEQ = B.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON AAA.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_GOODS D"
								+ " ON AAA.GOODS_SEQ = D.SEQ"
							//TODO: FK_SALES_TERMINAL_ID 생성 후 INNER JOIN으로 변경
							+ " LEFT JOIN TB_VENDING_MACHINE E"
								+ " ON AAA.TERMINAL_ID = E.TERMINAL_ID"
								//+ " ON C.VM_SEQ = E.SEQ
							+ " LEFT JOIN TB_CODE F"
								+ " ON AAA.PAY_TYPE = F.CODE"
									+ " AND F.TYPE = 'PAY_TYPE'"
							+ " LEFT JOIN TB_CODE G"
								+ " ON AAA.PAY_STEP = G.CODE"
									+ " AND G.TYPE = 'PAY_STEP'"
							+ " LEFT JOIN TB_CODE H"
								+ " ON AAA.INPUT_TYPE = H.CODE"
									+ " AND H.TYPE = 'INPUT_TYPE'"
							+ " LEFT JOIN TB_CODE I"
								+ " ON AAA.PAY_CARD = I.CODE"
									+ " AND I.TYPE = 'PAY_CARD'"
						+ " WHERE AAA.ROW_NUM >= " + s
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

//20160114 날짜포멧을 JAVA로 처리
//				c.put("TRANSACTION_DATE", rs.getString("TRANSACTION_DATE"));
//				c.put("PURCHASE_DATE", rs.getString("PURCHASE_DATE"));
//				c.put("PAY_DATE", rs.getString("PAY_DATE"));
//				c.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
//				c.put("CANCEL_DATE", rs.getString("CANCEL_DATE"));
				String date = rs.getString("TRANSACTION_DATE");
				c.put("TRANSACTION_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
				date = rs.getString("PURCHASE_DATE");
				c.put("PURCHASE_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8)
							: ""
					);
				date = rs.getString("PAY_DATE");
				c.put("PAY_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8)
							: ""
					);
				date = rs.getString("CLOSING_DATE");
				if ((date != null) && (date.length() < 14)) System.out.println(date);
				c.put("CLOSING_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
//20160122 사용안함
//				date = rs.getString("CANCEL_DATE");
//				c.put("CANCEL_DATE",
//						date != null
//							? date.substring(0, 4) + "-"
//								+ date.substring(4, 6) + "-"
//								+ date.substring(6, 8) + " "
//								+ date.substring(8, 10) + ":"
//								+ date.substring(10, 12) + ":"
//								+ date.substring(12, 14)
//							: ""
//					);
				c.put("TERMINAL_ID", rs.getString("TERMINAL_ID"));
				c.put("TRANSACTION_NO", rs.getString("TRANSACTION_NO"));
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("ORGAN", rs.getString("ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				c.put("VMCODE", rs.getString("VM_CODE"));
				c.put("GOODS", rs.getString("GOODS"));
				c.put("PAY_TYPE", rs.getString("PAY_TYPE"));
				c.put("PAY_STEP", rs.getString("PAY_STEP"));
				c.put("INPUT_TYPE", rs.getString("INPUT_TYPE"));
				c.put("PAY_CARD", rs.getString("PAY_CARD"));

				c.put("NO", no--);

				this.list.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 조직명
//20160114 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
										+ " ORDER BY DEPTH DESC"
								+ ")"
							+ " WHERE ROWNUM = 1"
					)
			);

	// 마감 출력 여부, 2011.06.11, 정원광
//20160115 INDEX 힌트 추가
//		this.data.put("IS_VIEW_CLOSING", dbLib.getResult(conn, "SELECT IS_VIEW_CLOSING FROM TB_COMPANY WHERE SEQ = " + company));
		this.data.put("IS_VIEW_CLOSING",
				dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " IS_VIEW_CLOSING"
							+ " FROM TB_COMPANY A"
							+ " WHERE SEQ = " + company
					)
			);

	// 리소스 반환
		dbLib.close(conn);

		return error;
	}

	/**
	 * 매출 마감 현황
	 *
	 * @param sType 집계 유형
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 시작일
	 * @param eDate 종료일
	 * @param isAll 상품 마감 현황 포함 여부
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String closing(String sType, long company, long organ, long place, String sDate, String eDate, boolean isAll, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sType) || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

//20160121 마감 사용여부 쿼리
		String useClosing = dbLib.getResult(conn,
				"SELECT /*+ INDEX(A) */"
						+ " IS_USED_CLOSING"
					+ " FROM TB_COMPANY A"
					+ " WHERE SEQ = " + company
			);
		// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 검색절 생성
		String WHERE = " A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE = '" + sType + "'";
//		String W_SUB = "1 = 1";
//		String W_ADD = "";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
//			W_ADD += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
//			W_SUB += " AND USER_SEQ = " + this.cfg.get("user.seq");
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
//				W_ADD += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160114 INDEX 힌트 추가, UNION을 IN에 통합
//				WHERE += W_ADD += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
//20160121 타소속의 조직이 검색되지 않도록 COMPANY_SEQ 조건 추가
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
//			W_ADD += " AND A.COMPANY_SEQ = " + company;
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160114 INDEX 힌트 추가
//			WHERE += W_ADD += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ ")"
				;
		}

		if (place > 0) { // 위치
//			W_ADD += " AND A.VM_PLACE_SEQ = " + place;
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

	// 상품별 마감 현황
//20160125 사용되는 곳 없음
//		if (isAll) {
//			this.goods = new ArrayList<GeneralConfig>();
//
//			try {
////20160121 마감 사용여부에 따라 쿼리 분리
////				ps = dbLib.prepareStatement(conn, "SELECT * FROM (SELECT /*+ ORDERED USE_NL(B C) */"
////				//	+ "  NVL(SUM(A.CNT), 0) AS CNT"
////					+ "  CASE WHEN ? = '03' AND C.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING_GOODS WHERE " + W_SUB + " AND TYPE = '03' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND GOODS_SEQ = A.GOODS_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.CNT END), 0) END AS CNT"
////					+ ", A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.GOODS_SEQ, B.NAME"
////					+ " FROM TB_CLOSING_GOODS A INNER JOIN TB_GOODS B ON A.GOODS_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
////				//	+ " WHERE " + WHERE
////					+ " WHERE A.YYYYMMDD BETWEEN ? AND ?" + W_ADD
////					+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.GOODS_SEQ, B.NAME, C.IS_USED_CLOSING) T WHERE CNT > 0");
////				ps.setString(1, sType);
////				ps.setString(2, sDate);
////				ps.setString(3, eDate);
////				ps.setString(4, sType);
////				ps.setString(5, sDate);
////				ps.setString(6, eDate);
//				ps = dbLib.prepareStatement(conn,
//						"SELECT /*+ ORDERED INDEX(A) USE_NL(B) */"
//								+ " A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.GOODS_SEQ,"
//								+ " B.NAME,"
//								+ " SUM(A.CNT) AS CNT"
//							+ " FROM TB_CLOSING_GOODS A"
//								+ " INNER JOIN TB_GOODS B"
//									+ " ON A.GOODS_SEQ = B.SEQ"
//							+ " WHERE " + WHERE
//								+ (("03".equals(sType) && "N".equals(useClosing))
//									? " AND EXISTS ("
//											+ " SELECT /*+ INDEX(A_A) */"
//													+ " YYYYMMDD"
//												+ " FROM TB_CLOSEING A_A"
//												+ " WHERE YYYYMMDD = A.YYYYMMDD"
//													+ " AND COMPANY_SEQ = A.COMPANY_SEQ"
//													+ " AND TYPE IN ('05', '07', '08')"
//													+ " AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ"
//													+ " AND VM_PLACE_SEQ = A.VM_PLACE_SEQ"
//										+ " )"
//									: "")
//							+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.GOODS_SEQ,"
//								+ " B.NAME"
//							+ " HAVING SUM(CNT) > 0"
//					);
//				rs = ps.executeQuery();
//
//				while (rs.next()) {
//					GeneralConfig c = new GeneralConfig();
//
//					c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//					c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//					c.put("GOODS_SEQ", rs.getLong("GOODS_SEQ"));
//					c.put("NAME", rs.getString("NAME"));
//
//					c.put("CNT", rs.getLong("CNT"));
//
//					this.goods.add(c);
//				}
//			} catch (Exception e) {
//				this.logger.error(e);
//				error = e.getMessage();
//			} finally {
//				dbLib.close(rs);
//				dbLib.close(ps);
//			}
//
//			if (!StringEx.isEmpty(error)) {
//				dbLib.close(conn);
//				return error;
//			}
//		}

		String SUM_OF_EACH_PREPAY_COMPANY = "";
		String[] prepaySummaryColumns = new String[] {};
		ArrayList<String> prepaySummaryColumnList = new ArrayList<String>();

	// 선불 카드사
		this.company = new ArrayList<GeneralConfig>();

		try {
//20160114 INDEX 힌트 추가
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */ B.CODE, B.NAME FROM TB_CLOSING A INNER JOIN TB_CODE B ON (A.PAY_CARD = B.CODE AND B.TYPE = 'PAY_CARD') WHERE " + WHERE + " AND A.PAY_TYPE IN ('11') GROUP BY B.CODE, B.NAME");
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);

//20160124 TB_CODE 검색으로 변경(모든 선불사 목록)
//			ps = dbLib.prepareStatement(conn,
//					"SELECT /*+ ORDERED INDEX(A) USE_NL(B) */"
//							+ " B.CODE, B.NAME"
//						+ " FROM TB_CLOSING A"
//							+ " INNER JOIN TB_CODE B"
//								+ " ON A.PAY_CARD = B.CODE"
//									+ " AND B.TYPE = 'PAY_CARD'"
//							+ " WHERE" + WHERE
//								+ " AND A.PAY_TYPE = '11'"
//							+ " GROUP BY B.CODE, B.NAME"
//				);
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ INDEX(A) */"
							+ " CODE,"
							+ " NAME"
						+ " FROM TB_CODE A"
						+ " WHERE TYPE = 'PAY_CARD'"
							+ " AND CODE <> '000'"
						+ " ORDER BY CODE"
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				String code = rs.getString("CODE");
				c.put("CODE", code);
				c.put("NAME", rs.getString("NAME"));

				this.company.add(c);

				SUM_OF_EACH_PREPAY_COMPANY += " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' AND A.PAY_CARD = '" + code + "' THEN A.CNT END), 0) AS CNT_PREPAY_" + code + ","
						+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' AND A.PAY_CARD = '" + code + "' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY_" + code + ","
						+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' AND A.PAY_CARD = '" + code + "' THEN A.COMMISSION END), 0) AS COMMISSION_PREPAY_" + code + ","
						+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' AND A.PAY_CARD = '" + code + "' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_PREPAY_" + code + ","
					;
				prepaySummaryColumnList.add("CNT_PREPAY_" + code);
				prepaySummaryColumnList.add("AMOUNT_PREPAY_" + code);
				prepaySummaryColumnList.add("COMMISSION_PREPAY_" + code);
				prepaySummaryColumnList.add("PAY_AMOUNT_PREPAY_" + code);
			}

			prepaySummaryColumns = prepaySummaryColumnList.toArray(new String[prepaySummaryColumnList.size()]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			prepaySummaryColumnList = null;

			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 선불 카드사별 마감 현황
//20160124 메인 쿼리에 병합
//		this.prepay = new ArrayList<GeneralConfig>();
//
////		try {
////20160121 입금별/자동마감 합계를 WHERE 조건으로 변경
////			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
////			//	+ "  NVL(SUM(A.CNT), 0) AS CNT"
////			//	+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
////				+ "  CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND PAY_CARD = A.PAY_CARD AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.CNT END), 0) END AS CNT"
////				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND PAY_CARD = A.PAY_CARD AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.AMOUNT END), 0) END AS AMOUNT"
////				+ ", NVL(SUM(CASE WHEN A.TYPE = ? THEN A.COMMISSION END), 0) AS COMMISSION"
////				+ ", NVL(SUM(CASE WHEN A.TYPE = ? THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT"				+ ", A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD"
////				+ " FROM TB_CLOSING A INNER JOIN TB_COMPANY B ON A.COMPANY_SEQ = B.SEQ"
////			//	+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('11')"
////				+ " WHERE A.YYYYMMDD BETWEEN ? AND ? AND PAY_TYPE IN ('11')" + W_ADD
////				+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD, B.IS_USED_CLOSING");
////			ps.setString(1, sType);
////			ps.setString(2, sDate);
////			ps.setString(3, eDate);
////			ps.setString(4, sType);
////			ps.setString(5, sType);
////			ps.setString(6, sDate);
////			ps.setString(7, eDate);
////			ps.setString(8, sType);
////			ps.setString(9, sType);
////			ps.setString(10, sType);
////			ps.setString(11, sDate);
////			ps.setString(12, eDate);
//			ps = dbLib.prepareStatement(conn,
//					"SELECT /*+ ORDERED INDEX(A) */"
//							+ " A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD,"
//							+ " NVL(SUM(A.CNT), 0) AS CNT,"
//							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT,"
//							+ " NVL(SUM(A.COMMISSION), 0) AS COMMISSION,"
//							+ " NVL(SUM(A.PAY_AMOUNT), 0) AS PAY_AMOUNT"
//						+ " FROM TB_CLOSING A"
//						+ " WHERE" + WHERE
//							+ " AND PAY_TYPE = '11'"
//							+ (("03".equals(sType) && "N".equals(useClosing))
//								? " AND EXISTS ("
//										+ " SELECT /*+ INDEX(A_F) */"
//												+ " YYYYMMDD"
//											+ " FROM TB_CLOSING A_F"
//											+ " WHERE YYYYMMDD = A.YYYYMMDD"
//												+ " AND COMPANY_SEQ = A.COMPANY_SEQ"
//												+ " AND TYPE IN ('05', '07', '08')"
//												+ " AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ"
//												+ " AND VM_PLACE_SEQ = A.VM_PLACE_SEQ"
//									+ " )"
//								: "")
//						+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD"
//				);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//				c.put("PAY_CARD", rs.getString("PAY_CARD"));
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("COMMISSION", rs.getLong("COMMISSION"));
//				c.put("PAY_AMOUNT", rs.getLong("PAY_AMOUNT"));
//
//				this.prepay.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}

	// 자판기별 마감 현황
		this.data = new GeneralConfig();
		this.list = new ArrayList<GeneralConfig>();

		try {
			long[] cnt = {0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0};
			long[] cms = {0, 0, 0, 0};
			long[] pam = {0, 0, 0, 0};

//20160121 입금별/자동마감 합계를 WHERE 조건으로 변경
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C D) */"
//			//	+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//				+ "  CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '01' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) END AS CNT_CARD"
//				+ ", CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '01' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) END AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.COMMISSION END), 0) AS COMMISSION_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CARD"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//				+ ", CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '10' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) END AS CNT_CASH"
//				+ ", CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '10' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) END AS AMOUNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.COMMISSION END), 0) AS COMMISSION_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CASH"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//				+ ", CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) END AS CNT_PREPAY"
//				+ ", CASE WHEN ? = '03' AND D.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ AND VM_PLACE_SEQ = A.VM_PLACE_SEQ AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) END AS AMOUNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.COMMISSION END), 0) AS COMMISSION_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_PREPAY"
//			//	+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//			//	+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION_TOTAL"
//				+ ", NVL(SUM(A.PAY_AMOUNT), 0) AS PAY_AMOUNT_TOTAL"
//				+ ", NVL(MIN(TO_CHAR(TO_DATE(A.START_DATE || A.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS START_DATE"
//				+ ", NVL(MAX(TO_CHAR(TO_DATE(A.END_DATE || A.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS END_DATE"
//				+ ", A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.NAME AS ORGAN, C.PLACE, (SELECT LTRIM(SYS_CONNECT_BY_PATH(SEQ, ';'), ';') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN_PATH"
//
//				+ ", RX.VM_CODE AS VENDING_MACHINE_CODE "
//
//				+ " FROM TB_CLOSING A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_PLACE C ON A.VM_PLACE_SEQ = C.SEQ INNER JOIN TB_COMPANY D ON A.COMPANY_SEQ = D.SEQ"
//
//				+ " INNER JOIN (SELECT TX1.CODE VM_CODE, TX2.SEQ PLACE_SEQ FROM TB_VENDING_MACHINE TX1, TB_VENDING_MACHINE_PLACE TX2 WHERE TX1.SEQ = TX2.VM_SEQ ) RX ON A.VM_PLACE_SEQ = RX.PLACE_SEQ "
//
//				+ " WHERE " + WHERE
//				+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.PARENT_SEQ, B.NAME, C.PLACE, D.IS_USED_CLOSING , RX.VM_CODE "
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ");
//			ps.setString(1, sType);
//			ps.setString(2, sDate);
//			ps.setString(3, eDate);
//			ps.setString(4, sType);
//			ps.setString(5, sDate);
//			ps.setString(6, eDate);
//			ps.setString(7, sType);
//			ps.setString(8, sDate);
//			ps.setString(9, eDate);
//			ps.setString(10, sType);
//			ps.setString(11, sDate);
//			ps.setString(12, eDate);
//			ps.setString(13, sType);
//			ps.setString(14, sDate);
//			ps.setString(15, eDate);
//			ps.setString(16, sType);
//			ps.setString(17, sDate);
//			ps.setString(18, eDate);
			ps = dbLib.prepareStatement(conn,
					" SELECT /*+ ORDERED INDEX(A IX_CLOSING_YYYYMMDD) USE_HASH(B C D) */"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.VM_PLACE_SEQ,"
							+ " B.NAME AS ORGAN,"
//20160125 추가
							+ " ("
									+ " SELECT /*+ INDEX(E) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION E"
										+ " WHERE PARENT_SEQ = " + (organ > 0 ? organ : 0)
											+ " AND SORT = 1"
											+ " AND SEQ <> A.ORGANIZATION_SEQ"
										+ " START WITH SEQ = A.ORGANIZATION_SEQ"
										+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
								+ ") AS PARENT_ORGAN,"
								//20160125 사용안함
//								+ " ("
//										+ " SELECT /*+ INDEX(E) */"
//												+ " LTRIM(SYS_CONNECT_BY_PATH(SEQ, ';'), ';')"
//											+ " FROM TB_ORGANIZATION E"
//											+ " WHERE SEQ = A.ORGANIZATION_SEQ"
//											+ " START WITH PARENT_SEQ = 0"
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//									+ " ) AS ORGAN_PATH,"
							+ " C.PLACE,"
							+ " D.CODE AS VM_CODE,"
							+ " MIN(A.START_DATE || NVL(A.START_TIME, '000000')) AS START_DATE,"
							+ " MAX(A.END_DATE || NVL(A.END_TIME, '000000')) AS END_DATE,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.COMMISSION END), 0) AS COMMISSION_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CARD,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.COMMISSION END), 0) AS COMMISSION_CASH,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CASH,"
							+ SUM_OF_EACH_PREPAY_COMPANY
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.COMMISSION END), 0) AS COMMISSION_PREPAY,"
							+ " NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_PREPAY"
						+ " FROM TB_CLOSING A"
							+ " INNER JOIN TB_ORGANIZATION B"
								+ " ON A.ORGANIZATION_SEQ = B.SEQ"
									+ " AND B.COMPANY_SEQ = " + company
							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
								+ " ON A.VM_PLACE_SEQ = C.SEQ"
							+ " INNER JOIN TB_VENDING_MACHINE D"
								+ " ON C.VM_SEQ = D.SEQ"
						+ " WHERE" + WHERE
							+ (("03".equals(sType) && "N".equals(useClosing))
								? " AND EXISTS ("
										+ " SELECT /*+ INDEX(A_C) */"
												+ " 1"
											+ " FROM TB_CLOSING A_C"
											+ " WHERE YYYYMMDD = A.YYYYMMDD"
												+ " AND COMPANY_SEQ = A.COMPANY_SEQ"
												+ " AND TYPE IN ('05', '07', '08')"
												+ " AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ"
												+ " AND VM_PLACE_SEQ = A.VM_PLACE_SEQ"
									+ " )"
								: "")
//20160126 정렬순서에서 PARENT_SEQ 제거
//						+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.PARENT_SEQ, B.NAME, C.PLACE, D.CODE"
						+ " GROUP BY A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.NAME, C.PLACE, D.CODE"
						//+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE DESC, PARENT_ORGAN DESC, B.NAME DESC, D.CODE DESC" :
								// default: 거래처
												" ORDER BY PARENT_ORGAN DESC, B.NAME DESC, C.PLACE DESC, D.CODE DESC"
							) : (			// ASC
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE, PARENT_ORGAN, B.NAME, D.CODE" :
								// default: 거래처
												" ORDER BY PARENT_ORGAN, B.NAME, C.PLACE, D.CODE"
								)
							)
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				c.put("ORGAN", rs.getString("ORGAN"));
//20160125 사용안함
//				c.put("ORGAN_PATH", rs.getString("ORGAN_PATH"));
				c.put("PARENT_ORGAN", rs.getString("PARENT_ORGAN"));
				c.put("PLACE", rs.getString("PLACE"));
				c.put("VM_CODE", rs.getString("VM_CODE"));

//20160121 날짜포멧을 JAVA로 처리
//				c.put("START_DATE", rs.getString("START_DATE"));
//				c.put("END_DATE", rs.getString("END_DATE"));
				String date = rs.getString("START_DATE");
				c.put("START_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: "-"
					);
				date = rs.getString("END_DATE");
				c.put("END_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: "-"
					);

				c.put("CNT_CARD", rs.getLong("CNT_CARD"));
				c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				c.put("COMMISSION_CARD", rs.getLong("COMMISSION_CARD"));
				c.put("PAY_AMOUNT_CARD", rs.getLong("PAY_AMOUNT_CARD"));
				c.put("CNT_CASH", rs.getLong("CNT_CASH"));
				c.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
				c.put("COMMISSION_CASH", rs.getLong("COMMISSION_CASH"));
				c.put("PAY_AMOUNT_CASH", rs.getLong("PAY_AMOUNT_CASH"));
				c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				c.put("COMMISSION_PREPAY", rs.getLong("COMMISSION_PREPAY"));
				c.put("PAY_AMOUNT_PREPAY", rs.getLong("PAY_AMOUNT_PREPAY"));
				//c.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
				//c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));
				c.put("CNT_TOTAL", rs.getLong("CNT_CARD") + rs.getLong("CNT_CASH") + rs.getLong("CNT_PREPAY"));
				c.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_CARD") + rs.getLong("AMOUNT_CASH") + rs.getLong("AMOUNT_PREPAY"));
				//c.put("COMMISSION_TOTAL", rs.getLong("COMMISSION_TOTAL"));
				//c.put("PAY_AMOUNT_TOTAL", rs.getLong("PAY_AMOUNT_TOTAL"));
				c.put("COMMISSION_TOTAL", rs.getLong("COMMISSION_CARD") + rs.getLong("COMMISSION_CASH") + rs.getLong("COMMISSION_PREPAY"));
				c.put("PAY_AMOUNT_TOTAL", rs.getLong("PAY_AMOUNT_CARD") + rs.getLong("PAY_AMOUNT_CASH") + rs.getLong("PAY_AMOUNT_PREPAY"));

//20160125 사용되는 곳 없음
//				if (isAll) { // 상품 마감 현황
//					for (int i = 0; i < this.goods.size(); i++) {
//						GeneralConfig s = (GeneralConfig) this.goods.get(i);
//
//						if (rs.getLong("ORGANIZATION_SEQ") == s.getLong("ORGANIZATION_SEQ") && rs.getLong("VM_PLACE_SEQ") == s.getLong("VM_PLACE_SEQ")) {
//							c.put("GOODS_" + s.getLong("GOODS_SEQ"), s.getLong("CNT"));
//
//							this.data.put("PLACE_GOODS_" + s.getLong("GOODS_SEQ"), this.data.getLong("PLACE_GOODS_" + s.getLong("GOODS_SEQ")) + s.getLong("CNT"));
//						}
//					}
//				}

//20160124 선불카드사별 집계를 메인 쿼리에서 추출
//				if (this.prepay.size() > 0) { // 선불 카드사별 마감 현황
//					for (int i = 0; i < this.prepay.size(); i++) {
//						GeneralConfig s = (GeneralConfig) this.prepay.get(i);
//
//						if (rs.getLong("ORGANIZATION_SEQ") == s.getLong("ORGANIZATION_SEQ") && rs.getLong("VM_PLACE_SEQ") == s.getLong("VM_PLACE_SEQ")) {
//							c.put("CNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("CNT"));
//							c.put("AMOUNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("AMOUNT"));
//							c.put("COMMISSION_PREPAY_" + s.get("PAY_CARD"), s.getLong("COMMISSION"));
//							c.put("PAY_AMOUNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("PAY_AMOUNT"));
//
//							this.data.put("PLACE_CNT_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("PLACE_CNT_PREPAY_" + s.get("PAY_CARD")) + s.getLong("CNT"));
//							this.data.put("PLACE_AMOUNT_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("PLACE_AMOUNT_PREPAY_" + s.get("PAY_CARD")) + s.getLong("AMOUNT"));
//							this.data.put("PLACE_COMMISSION_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("PLACE_COMMISSION_PREPAY_" + s.get("PAY_CARD")) + s.getLong("COMMISSION"));
//							this.data.put("PLACE_PAY_AMOUNT_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("PLACE_PAY_AMOUNT_PREPAY_" + s.get("PAY_CARD")) + s.getLong("PAY_AMOUNT"));
//						}
//					}
//				}

//20160126 columnNames를 사용하여 처리
//				if (this.company.size() > 0) { // 선불카드사별 마감 현황
//					String[] columnNames = { "CNT_PREPAY_", "AMOUNT_PREPAY_", "COMMISSION_PREPAY_", "PAY_AMOUNT_PREPAY_" };
//
//					for (int i = 0; i < this.company.size(); i++) {
//						GeneralConfig s = (GeneralConfig) this.company.get(i);
//
//						long value;
//						String code = s.get("CODE");
//
//						for (String columnName : columnNames) {
//							columnName += code;
//							value = rs.getLong(columnName);
//
//							c.put(columnName, value);
//							this.data.put(columnName, this.data.getLong(columnName) + value);
//						}
//					}
//				}
				for (String columnName : prepaySummaryColumns) {
					c.put(columnName, rs.getLong(columnName));
					this.data.put(columnName, this.data.getLong(columnName) + rs.getLong(columnName));
				}

				this.list.add(c);

				cnt[0] += c.getLong("CNT_CARD");
				cnt[1] += c.getLong("CNT_CASH");
				cnt[2] += c.getLong("CNT_PREPAY");
				cnt[3] += c.getLong("CNT_TOTAL");
				amt[0] += c.getLong("AMOUNT_CARD");
				amt[1] += c.getLong("AMOUNT_CASH");
				amt[2] += c.getLong("AMOUNT_PREPAY");
				amt[3] += c.getLong("AMOUNT_TOTAL");
				cms[0] += c.getLong("COMMISSION_CARD");
				cms[1] += c.getLong("COMMISSION_CASH");
				cms[2] += c.getLong("COMMISSION_PREPAY");
				cms[3] += c.getLong("COMMISSION_TOTAL");
				pam[0] += c.getLong("PAY_AMOUNT_CARD");
				pam[1] += c.getLong("PAY_AMOUNT_CASH");
				pam[2] += c.getLong("PAY_AMOUNT_PREPAY");
				pam[3] += c.getLong("PAY_AMOUNT_TOTAL");
			}

			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_CASH", cnt[1]);
			this.data.put("CNT_PREPAY", cnt[2]);
			this.data.put("CNT_TOTAL", cnt[3]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_CASH", amt[1]);
			this.data.put("AMOUNT_PREPAY", amt[2]);
			this.data.put("AMOUNT_TOTAL", amt[3]);
			this.data.put("COMMISSION_CARD", cms[0]);
			this.data.put("COMMISSION_CASH", cms[1]);
			this.data.put("COMMISSION_PREPAY", cms[2]);
			this.data.put("COMMISSION_TOTAL", cms[3]);
			this.data.put("PAY_AMOUNT_CARD", pam[0]);
			this.data.put("PAY_AMOUNT_CASH", pam[1]);
			this.data.put("PAY_AMOUNT_PREPAY", pam[2]);
			this.data.put("PAY_AMOUNT_TOTAL", pam[3]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 최하위 조직 타이틀
//20160121 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
										+ " ORDER BY DEPTH DESC"
								+ " )"
							+ " WHERE ROWNUM = 1"
					)
			);

	// 선택된 조직의 하위 조직
//20160125 페이지 내에서 JAVA 소스로 집계처리
//		this.organ = new ArrayList<GeneralConfig>();
//
//		try {
//			long[] cnt = {0, 0, 0, 0};
//			long[] amt = {0, 0, 0, 0};
//			long[] cms = {0, 0, 0, 0};
//			long[] pam = {0, 0, 0, 0};
//
////20160121
////		ps = dbLib.prepareStatement(conn, "SELECT SEQ, NAME FROM TB_ORGANIZATION A WHERE COMPANY_SEQ = ? AND PARENT_SEQ = ? AND SORT = 1 AND SEQ IN (SELECT SEQ FROM TB_ORGANIZATION START WITH SEQ IN (SELECT A.ORGANIZATION_SEQ FROM TB_CLOSING A WHERE " + WHERE + " GROUP BY A.ORGANIZATION_SEQ) CONNECT BY SEQ = PRIOR PARENT_SEQ) ORDER BY NAME");
//			ps = dbLib.prepareStatement(conn,
//					"SELECT /*+ INDEX(A_A_A) */"
//							+ " SEQ, NAME"
//						+ " FROM TB_ORGANIZATION A_A_A"
//						+ " WHERE COMPANY_SEQ = ?"
//							+ " AND PARENT_SEQ = ?"
//							+ " AND SORT = 1"
//							+ " AND SEQ IN ("
//									+ " SELECT /*+ INDEX(A_A) */"
//											+ " SEQ"
//										+ " FROM TB_ORGANIZATION A_A"
//										+ " START WITH SEQ IN ("
//												+ " SELECT /*+ INDEX(A) */"
//														+ " ORGANIZATION_SEQ"
//													+ " FROM TB_CLOSING A"
//													+ " WHERE " + WHERE
//													+ " GROUP BY ORGANIZATION_SEQ"
//											+ " )"
//										+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
//								+ " )"
//						+ " ORDER BY NAME, SEQ"
//				);
//			ps.setLong(1, company);
//			ps.setLong(2, organ);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = this.closing(conn, sType, company, rs.getLong("SEQ"), place, sDate, eDate, isAll);
//
//				c.put("SEQ", rs.getLong("SEQ"));
//				c.put("NAME", rs.getString("NAME"));
//
//				this.organ.add(c);
//
//				cnt[0] += c.getLong("CNT_CARD");
//				cnt[1] += c.getLong("CNT_CASH");
//				cnt[2] += c.getLong("CNT_PREPAY");
//				cnt[3] += c.getLong("CNT_TOTAL");
//				amt[0] += c.getLong("AMOUNT_CARD");
//				amt[1] += c.getLong("AMOUNT_CASH");
//				amt[2] += c.getLong("AMOUNT_PREPAY");
//				amt[3] += c.getLong("AMOUNT_TOTAL");
//				cms[0] += c.getLong("COMMISSION_CARD");
//				cms[1] += c.getLong("COMMISSION_CASH");
//				cms[2] += c.getLong("COMMISSION_PREPAY");
//				cms[3] += c.getLong("COMMISSION_TOTAL");
//				pam[0] += c.getLong("PAY_AMOUNT_CARD");
//				pam[1] += c.getLong("PAY_AMOUNT_CASH");
//				pam[2] += c.getLong("PAY_AMOUNT_PREPAY");
//				pam[3] += c.getLong("PAY_AMOUNT_TOTAL");
//
//				if (isAll) { // 상품 마감 현황 합계
//					for (int i = 0; i < this.goods.size(); i++) {
//						GeneralConfig s = (GeneralConfig) this.goods.get(i);
//
//						this.data.put("ORGAN_GOODS_" + s.getLong("GOODS_SEQ"), this.data.getLong("ORGAN_GOODS_" + s.getLong("GOODS_SEQ")) + c.getLong("GOODS_"  + s.getLong("GOODS_SEQ")));
//					}
//				}
//
//				if (this.company.size() > 0) { // 선불 카드사별 마감 합계
//					for (int i = 0; i < this.company.size(); i++) {
//						GeneralConfig s = (GeneralConfig) this.company.get(i);
//
//						this.data.put("ORGAN_CNT_PREPAY_" + s.get("CODE"), this.data.getLong("ORGAN_CNT_PREPAY_" + s.get("CODE")) + c.getLong("CNT_PREPAY_" + s.get("CODE")));
//						this.data.put("ORGAN_AMOUNT_PREPAY_" + s.get("CODE"), this.data.getLong("ORGAN_AMOUNT_PREPAY_" + s.get("CODE")) + c.getLong("AMOUNT_PREPAY_" + s.get("CODE")));
//						this.data.put("ORGAN_COMMISSION_PREPAY_" + s.get("CODE"), this.data.getLong("ORGAN_COMMISSION_PREPAY_" + s.get("CODE")) + c.getLong("COMMISSION_PREPAY_" + s.get("CODE")));
//						this.data.put("ORGAN_PAY_AMOUNT_PREPAY_" + s.get("CODE"), this.data.getLong("ORGAN_PAY_AMOUNT_PREPAY_" + s.get("CODE")) + c.getLong("PAY_AMOUNT_PREPAY_" + s.get("CODE")));
//					}
//				}
//			}
//
//			this.data.put("ORGAN_CNT_CARD", cnt[0]);
//			this.data.put("ORGAN_CNT_CASH", cnt[1]);
//			this.data.put("ORGAN_CNT_PREPAY", cnt[2]);
//			this.data.put("ORGAN_CNT_TOTAL", cnt[3]);
//			this.data.put("ORGAN_AMOUNT_CARD", amt[0]);
//			this.data.put("ORGAN_AMOUNT_CASH", amt[1]);
//			this.data.put("ORGAN_AMOUNT_PREPAY", amt[2]);
//			this.data.put("ORGAN_AMOUNT_TOTAL", amt[3]);
//			this.data.put("ORGAN_COMMISSION_CARD", cms[0]);
//			this.data.put("ORGAN_COMMISSION_CASH", cms[1]);
//			this.data.put("ORGAN_COMMISSION_PREPAY", cms[2]);
//			this.data.put("ORGAN_COMMISSION_TOTAL", cms[3]);
//			this.data.put("ORGAN_PAY_AMOUNT_CARD", pam[0]);
//			this.data.put("ORGAN_PAY_AMOUNT_CASH", pam[1]);
//			this.data.put("ORGAN_PAY_AMOUNT_PREPAY", pam[2]);
//			this.data.put("ORGAN_PAY_AMOUNT_TOTAL", pam[3]);
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}

	// 마감 출력 여부, 2011.06.11, 정원광
//20160121 INDEX 힌트 추가
//		this.data.put("IS_VIEW_CLOSING", dbLib.getResult(conn, "SELECT IS_VIEW_CLOSING FROM TB_COMPANY WHERE SEQ = " + company));
		this.data.put("IS_VIEW_CLOSING",
				dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " IS_VIEW_CLOSING"
							+ " FROM TB_COMPANY A"
							+ " WHERE SEQ = " + company
					)
			);

	// 검색 설정
//20160121 INDEX 힌트 추가
//		String sDesc = "집계유형=" + dbLib.getResult(conn, "SELECT NAME FROM TB_CODE WHERE TYPE = 'SUM_TYPE' AND CODE = '" + sType + "'") + "&검색기간=" + sDate + "-" + eDate;
		String sDesc = "집계유형="
				+ dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " NAME"
							+ " FROM TB_CODE A"
							+ " WHERE TYPE = 'SUM_TYPE'"
								+ " AND CODE = '" + sType + "'"
					)
				+ "&검색기간=" + sDate + "-" + eDate
			;

		if (company > 0) {
//20160121 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160121 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160121 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		this.data.put("sDesc", sDesc);

	// 리소스 반환
		dbLib.close(conn);

	// 정렬
//20160125 쿼리에서 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						Collections.sort(this.organ, new UserCompare("NAME", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//						Collections.sort(this.organ, new UserCompare("NAME", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//		}

		return null;
	}

//	/**
//	 * 조직별 매출 마감 현황 - 20160126 사용안함
//	 *
//	 * @param conn java.sql.Connection
//	 * @param sType 집계 유형
//	 * @param company 소속
//	 * @param organ 조직
//	 * @param place 위치
//	 * @param sDate 시작일
//	 * @param eDate 종료일
//	 * @param isAll 상품 마감 현황 포함 여부
//	 * @return 조직별 매출 마감 현황
//	 *
//	 */
//	private GeneralConfig closing(Connection conn, String sType, long company, long organ, long place, String sDate, String eDate, boolean isAll) throws Exception {
//	// 실행에 사용될 변수
//		DBLibrary dbLib = new DBLibrary(this.logger);
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//
//	// 검색절 생성
//		String WHERE = "A.TYPE = '" + sType + "' AND A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'";
//		String W_SUB = "1 = 1";
//		String W_ADD = "";
//
//		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
//			WHERE += W_ADD += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
//			W_SUB += " AND USER_SEQ = " + this.cfg.get("user.seq");
//		} else {
//			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
//				WHERE += W_ADD += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
//				W_SUB += " AND COMPANY_SEQ = " + this.cfg.getLong("user.company");
//			}
//
//			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//				WHERE += W_ADD += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
//				W_SUB += " AND ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
//			}
//		}
//
//		if (company > 0) { // 소속
//			WHERE += W_ADD += " AND A.COMPANY_SEQ = " + company;
//			W_SUB += " AND COMPANY_SEQ = " + company;
//		}
//
//		if (organ > 0) { // 조직
//			WHERE += W_ADD += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
//			W_SUB += " AND ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
//		}
//
//		if (place > 0) { // 위치
//			WHERE += W_ADD += " AND A.VM_PLACE_SEQ = " + place;
//			W_SUB += " AND VM_PLACE_SEQ = " + place;
//		}
//
//	// 상품별 마감 현황
//		ArrayList<GeneralConfig> goods = null;
//
//		if (isAll) {
//			goods = new ArrayList<GeneralConfig>();
//
//			try {
//				ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B C) */"
//				//	+ "  NVL(SUM(A.CNT), 0) AS CNT"
//					+ "  CASE WHEN ? = '03' AND C.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING_GOODS WHERE " + W_SUB + " AND TYPE = '03' AND GOODS_SEQ = A.GOODS_SEQ AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.CNT END), 0) END AS CNT"
//					+ ", A.GOODS_SEQ, B.NAME AS GOODS"
//					+ " FROM TB_CLOSING_GOODS A INNER JOIN TB_GOODS B ON A.GOODS_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				//	+ " WHERE " + WHERE
//					+ " WHERE A.YYYYMMDD BETWEEN ? AND ?" + W_ADD
//					+ " GROUP BY A.GOODS_SEQ, B.NAME, C.IS_USED_CLOSING");
//				ps.setString(1, sType);
//				ps.setString(2, sDate);
//				ps.setString(3, eDate);
//				ps.setString(4, sType);
//				ps.setString(5, sDate);
//				ps.setString(6, eDate);
//				rs = ps.executeQuery();
//
//				while (rs.next()) {
//					GeneralConfig c = new GeneralConfig();
//
//					c.put("CNT", rs.getLong("CNT"));
//					c.put("GOODS_SEQ", rs.getLong("GOODS_SEQ"));
//					c.put("GOODS", rs.getString("GOODS"));
//
//					goods.add(c);
//				}
//			} catch (Exception e) {
//				this.logger.error(e);
//			} finally {
//				dbLib.close(rs);
//				dbLib.close(ps);
//			}
//		}
//
//	// 선불 카드사별 마감 현황
//		ArrayList<GeneralConfig> prepay = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//			//	+ "  NVL(SUM(A.CNT), 0) AS CNT"
//			//	+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ "  CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND PAY_CARD = A.PAY_CARD AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.CNT END), 0) END AS CNT"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND PAY_CARD = A.PAY_CARD AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.TYPE = ? THEN A.AMOUNT END), 0) END AS AMOUNT"
//				+ ", NVL(SUM(CASE WHEN A.TYPE = ? THEN A.COMMISSION END), 0) AS COMMISSION"
//				+ ", NVL(SUM(CASE WHEN A.TYPE = ? THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT"
//				+ ", A.PAY_CARD"
//				+ " FROM TB_CLOSING A INNER JOIN TB_COMPANY B ON A.COMPANY_SEQ = B.SEQ"
//			//	+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('11')"
//				+ " WHERE A.YYYYMMDD BETWEEN ? AND ? AND PAY_TYPE IN ('11')" + W_ADD
//				+ " GROUP BY A.PAY_CARD, B.IS_USED_CLOSING");
//			ps.setString(1, sType);
//			ps.setString(2, sDate);
//			ps.setString(3, eDate);
//			ps.setString(4, sType);
//			ps.setString(5, sType);
//			ps.setString(6, sDate);
//			ps.setString(7, eDate);
//			ps.setString(8, sType);
//			ps.setString(9, sType);
//			ps.setString(10, sType);
//			ps.setString(11, sDate);
//			ps.setString(12, eDate);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("COMMISSION", rs.getLong("COMMISSION"));
//				c.put("PAY_AMOUNT", rs.getLong("PAY_AMOUNT"));
//				c.put("PAY_CARD", rs.getString("PAY_CARD"));
//
//				prepay.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 마감 현황
//		GeneralConfig data = new GeneralConfig();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//			//	+ "  NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//				+ "  CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '01' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.CNT END), 0) END AS CNT_CARD"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '01' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) END AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.COMMISSION END), 0) AS COMMISSION_CARD"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '01' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CARD"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) AS CNT_CASH"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) AS AMOUNT_CASH"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '10' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.CNT END), 0) END AS CNT_CASH"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '10' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.AMOUNT END), 0) END AS AMOUNT_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.COMMISSION END), 0) AS COMMISSION_CASH"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '10' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_CASH"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//			//	+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(CNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.CNT END), 0) END AS CNT_PREPAY"
//				+ ", CASE WHEN ? = '03' AND B.IS_USED_CLOSING = 'N' THEN (SELECT NVL(SUM(AMOUNT), 0) FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE = '03' AND PAY_TYPE = '11' AND YYYYMMDD IN (SELECT YYYY || MM || DD FROM TB_CLOSING WHERE " + W_SUB + " AND TYPE IN ('05', '07', '08') AND YYYYMMDD BETWEEN ? AND ? GROUP BY YYYY, MM, DD)) ELSE NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) END AS AMOUNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.COMMISSION END), 0) AS COMMISSION_PREPAY"
//				+ ", NVL(SUM(CASE WHEN A.PAY_TYPE = '11' THEN A.PAY_AMOUNT END), 0) AS PAY_AMOUNT_PREPAY"
//			//	+ ", NVL(SUM(A.CNT), 0) AS CNT_TOTAL"
//			//	+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT_TOTAL"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION_TOTAL"
//				+ ", NVL(SUM(A.PAY_AMOUNT), 0) AS PAY_AMOUNT_TOTAL"
//				+ ", NVL(MIN(TO_CHAR(TO_DATE(A.START_DATE || A.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS START_DATE"
//				+ ", NVL(MAX(TO_CHAR(TO_DATE(A.END_DATE || A.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS END_DATE"
//				+ " FROM TB_CLOSING A INNER JOIN TB_COMPANY B ON A.COMPANY_SEQ = B.SEQ"
//				+ " WHERE " + WHERE
//				+ " GROUP BY B.IS_USED_CLOSING");
//			ps.setString(1, sType);
//			ps.setString(2, sDate);
//			ps.setString(3, eDate);
//			ps.setString(4, sType);
//			ps.setString(5, sDate);
//			ps.setString(6, eDate);
//			ps.setString(7, sType);
//			ps.setString(8, sDate);
//			ps.setString(9, eDate);
//			ps.setString(10, sType);
//			ps.setString(11, sDate);
//			ps.setString(12, eDate);
//			ps.setString(13, sType);
//			ps.setString(14, sDate);
//			ps.setString(15, eDate);
//			ps.setString(16, sType);
//			ps.setString(17, sDate);
//			ps.setString(18, eDate);
//			rs = ps.executeQuery();
//
//			if (rs.next()) {
//				data.put("CNT_CARD", rs.getLong("CNT_CARD"));
//				data.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
//				data.put("COMMISSION_CARD", rs.getLong("COMMISSION_CARD"));
//				data.put("PAY_AMOUNT_CARD", rs.getLong("PAY_AMOUNT_CARD"));
//				data.put("CNT_CASH", rs.getLong("CNT_CASH"));
//				data.put("AMOUNT_CASH", rs.getLong("AMOUNT_CASH"));
//				data.put("COMMISSION_CASH", rs.getLong("COMMISSION_CASH"));
//				data.put("PAY_AMOUNT_CASH", rs.getLong("PAY_AMOUNT_CASH"));
//				data.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
//				data.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
//				data.put("COMMISSION_PREPAY", rs.getLong("COMMISSION_PREPAY"));
//				data.put("PAY_AMOUNT_PREPAY", rs.getLong("PAY_AMOUNT_PREPAY"));
//				//data.put("CNT_TOTAL", rs.getLong("CNT_TOTAL"));
//				//data.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_TOTAL"));
//				data.put("CNT_TOTAL", rs.getLong("CNT_CARD") + rs.getLong("CNT_CASH") + rs.getLong("CNT_PREPAY"));
//				data.put("AMOUNT_TOTAL", rs.getLong("AMOUNT_CARD") + rs.getLong("AMOUNT_CASH") + rs.getLong("AMOUNT_PREPAY"));
//				data.put("COMMISSION_TOTAL", rs.getLong("COMMISSION_TOTAL"));
//				data.put("PAY_AMOUNT_TOTAL", rs.getLong("PAY_AMOUNT_TOTAL"));
//				data.put("START_DATE", rs.getString("START_DATE"));
//				data.put("END_DATE", rs.getString("END_DATE"));
//
//				if (isAll) { // 상품 마감 현황
//					for (int i = 0; i < goods.size(); i++) {
//						GeneralConfig s = (GeneralConfig) goods.get(i);
//
//						data.put("GOODS_" + s.getLong("GOODS_SEQ"), s.getLong("CNT"));
//					}
//				}
//
//				if (prepay.size() > 0) { // 선불 카드사별 마감 현황
//					for (int i = 0; i < prepay.size(); i++) {
//						GeneralConfig s = (GeneralConfig) prepay.get(i);
//
//						data.put("CNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("CNT"));
//						data.put("AMOUNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("AMOUNT"));
//						data.put("COMMISSION_PREPAY_" + s.get("PAY_CARD"), s.getLong("COMMISSION"));
//						data.put("PAY_AMOUNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("PAY_AMOUNT"));
//					}
//				}
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//		return data;
//	}

//	/**
//	 * 마감별 입금 현황 - 20160127 사용안함
//	 *
//	 * @param company 소속
//	 * @param organ 조직
//	 * @param place 위치
//	 * @param sDate 검색일
//	 * @param eDate 종료일
//	 * @param oMode 정렬필드
//	 * @param oType 정렬방법
//	 * @return 에러가 있을 경우 에러 내용
//	 *
//	 */
//	public String payment(long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
//	// 필수 검색 조건이 없을 때
//		if (company == 0 || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
//			return null;
//		}
//
//	// 실행에 사용될 변수
//		DBLibrary dbLib = new DBLibrary();
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String error = null;
//
//	// DB 연결
//		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));
//
//		if (conn == null) {
//			return "DB 연결에 실패하였습니다.";
//		}
//
//	// 검색절 생성
//		String WHERE = "";
//
//		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
//			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
//		} else {
//			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
//				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
//			}
//
//			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
//			}
//		}
//
//		if (company > 0) { // 소속
//			WHERE += " AND A.COMPANY_SEQ = " + company;
//		}
//
//		if (organ > 0) { // 조직
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
//		}
//
//		if (place > 0) { // 위치
//			WHERE += " AND A.VM_PLACE_SEQ = " + place;
//		}
//
//	// 입금일로 마감일 가져오기
//		ArrayList<GeneralConfig> date = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = conn.prepareStatement("SELECT A.YYYY, A.MM, A.DD, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ"
//				+ " FROM TB_CLOSING A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_PLACE C ON A.VM_PLACE_SEQ = C.SEQ"
//				+ " WHERE A.TYPE IN ('05', '07', '08') AND A.PAY_TYPE IN ('01', '11') AND A.YYYYMMDD BETWEEN ? AND ?" + WHERE
//				+ " GROUP BY A.YYYY, A.MM, A.DD, A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.PARENT_SEQ, B.NAME, C.PLACE"
//				+ " ORDER BY A.YYYY, A.MM, A.DD, B.PARENT_SEQ, B.NAME, C.PLACE");
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("YYYY", rs.getString("YYYY"));
//				c.put("MM", rs.getString("MM"));
//				c.put("DD", rs.getString("DD"));
//				c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
//				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//
//				date.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 자판기별 매출 현황
//		this.company = new ArrayList<GeneralConfig>();
//		this.list = new ArrayList<GeneralConfig>();
//		this.data = new GeneralConfig();
//		long[] cnt = {0, 0, 0, 0, 0, 0};
//		long[] amt = {0, 0, 0, 0, 0, 0};
//
//		for (int _i = 0; _i < date.size(); _i++) {
//			GeneralConfig _c = (GeneralConfig) date.get(_i);
//
//			try { // 선불 카드사
//				ps = conn.prepareStatement("SELECT /*+ ORDERED USE_NL(B) */ B.CODE, B.NAME"
//					+ " FROM TB_CLOSING A INNER JOIN TB_CODE B ON (A.PAY_CARD = B.CODE AND B.TYPE = 'PAY_CARD')"
//					+ " WHERE A.TYPE IN ('04') AND A.PAY_TYPE IN ('11') AND A.YYYY = ? AND A.MM = ? AND A.DD = ? AND A.COMPANY_SEQ = ? AND A.ORGANIZATION_SEQ = ? AND A.VM_PLACE_SEQ = ?"
//					+ " GROUP BY B.CODE, B.NAME");
//				ps.setString(1, _c.get("YYYY"));
//				ps.setString(2, _c.get("MM"));
//				ps.setString(3, _c.get("DD"));
//				ps.setLong(4, _c.getLong("COMPANY_SEQ"));
//				ps.setLong(5, _c.getLong("ORGANIZATION_SEQ"));
//				ps.setLong(6, _c.getLong("VM_PLACE_SEQ"));
//				rs = ps.executeQuery();
//
//				while (rs.next()) {
//					if (this.data.get("COMPANY").indexOf(rs.getString("CODE")) >= 0) {
//						continue;
//					}
//
//					GeneralConfig c = new GeneralConfig();
//
//					c.put("CODE", rs.getString("CODE"));
//					c.put("NAME", rs.getString("NAME"));
//
//					this.company.add(c);
//					this.data.put("COMPANY", this.data.get("COMPANY") + "," + rs.getString("CODE"));
//				}
//			} catch (Exception e) {
//				this.logger.error(e);
//				error = e.getMessage();
//			} finally {
//				dbLib.close(rs);
//				dbLib.close(ps);
//			}
//
//			if (!StringEx.isEmpty(error)) {
//				break;
//			}
//
//			ArrayList<GeneralConfig> prepay = new ArrayList<GeneralConfig>();
//
//			try { // 선불 카드사별 마감 현황
//				ps = conn.prepareStatement("SELECT"
//					+ "  NVL(SUM(A.CNT), 0) AS CNT"
//					+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//					+ ", A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD, A.YYYY || A.MM || A.DD AS CLOSING_DATE"
//					+ " FROM TB_CLOSING A"
//					+ " WHERE A.TYPE IN ('04') AND A.PAY_TYPE IN ('11') AND A.YYYY = ? AND A.MM = ? AND A.DD = ? AND A.COMPANY_SEQ = ? AND A.ORGANIZATION_SEQ = ? AND A.VM_PLACE_SEQ = ?"
//					+ " GROUP BY A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, A.PAY_CARD, A.YYYY, A.MM, A.DD");
//				ps.setString(1, _c.get("YYYY"));
//				ps.setString(2, _c.get("MM"));
//				ps.setString(3, _c.get("DD"));
//				ps.setLong(4, _c.getLong("COMPANY_SEQ"));
//				ps.setLong(5, _c.getLong("ORGANIZATION_SEQ"));
//				ps.setLong(6, _c.getLong("VM_PLACE_SEQ"));
//				rs = ps.executeQuery();
//
//				while (rs.next()) {
//					GeneralConfig c = new GeneralConfig();
//
//					c.put("CNT", rs.getLong("CNT"));
//					c.put("AMOUNT", rs.getLong("AMOUNT"));
//					c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
//					c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//					c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//					c.put("PAY_CARD", rs.getString("PAY_CARD"));
//					c.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
//
//					prepay.add(c);
//				}
//			} catch (Exception e) {
//				this.logger.error(e);
//				error = e.getMessage();
//			} finally {
//				dbLib.close(rs);
//				dbLib.close(ps);
//			}
//
//			if (!StringEx.isEmpty(error)) {
//				break;
//			}
//
//			try { // 자판기별 마감 현황
//				ps = conn.prepareStatement("SELECT"
//					+ "  NVL(SUM(CASE WHEN A.TYPE = '04' AND A.PAY_TYPE = '01' THEN A.CNT END), 0) AS CNT_CARD"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '04' AND A.PAY_TYPE = '01' THEN A.AMOUNT END), 0) AS AMOUNT_CARD"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '04' AND A.PAY_TYPE = '11' THEN A.CNT END), 0) AS CNT_PREPAY"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '04' AND A.PAY_TYPE = '11' THEN A.AMOUNT END), 0) AS AMOUNT_PREPAY"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '07' THEN A.CNT END), 0) AS CNT_POSTPONE"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '07' THEN A.AMOUNT END), 0) AS AMOUNT_POSTPONE"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '08' THEN A.CNT END), 0) AS CNT_REFUSE"
//					+ ", NVL(SUM(CASE WHEN A.TYPE = '08' THEN A.AMOUNT END), 0) AS AMOUNT_REFUSE"
//					+ ", NVL(MIN(TO_CHAR(TO_DATE(A.START_DATE || A.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS START_DATE"
//					+ ", NVL(MAX(TO_CHAR(TO_DATE(A.END_DATE || A.END_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS')), '-') AS END_DATE"
//					+ ", A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.NAME AS ORGAN, C.PLACE, A.YYYY || A.MM || A.DD AS CLOSING_DATE"
//					+ " FROM TB_CLOSING A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_VENDING_MACHINE_PLACE C ON A.VM_PLACE_SEQ = C.SEQ"
//					+ " WHERE A.TYPE IN ('04', '07', '08') AND A.PAY_TYPE IN ('01', '11') AND A.YYYY = ? AND A.MM = ? AND A.DD = ? AND A.COMPANY_SEQ = ? AND A.ORGANIZATION_SEQ = ? AND A.VM_PLACE_SEQ = ?"
//					+ " GROUP BY A.COMPANY_SEQ, A.ORGANIZATION_SEQ, A.VM_PLACE_SEQ, B.NAME, C.PLACE, A.YYYY, A.MM, A.DD");
//				ps.setString(1, _c.get("YYYY"));
//				ps.setString(2, _c.get("MM"));
//				ps.setString(3, _c.get("DD"));
//				ps.setLong(4, _c.getLong("COMPANY_SEQ"));
//				ps.setLong(5, _c.getLong("ORGANIZATION_SEQ"));
//				ps.setLong(6, _c.getLong("VM_PLACE_SEQ"));
//				rs = ps.executeQuery();
//
//				while (rs.next()) {
//					GeneralConfig c = this.payment(conn, rs.getLong("COMPANY_SEQ"), rs.getLong("ORGANIZATION_SEQ"), rs.getLong("VM_PLACE_SEQ"), rs.getString("CLOSING_DATE"));
//
//					c.put("CNT_CARD", rs.getLong("CNT_CARD"));
//					c.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
//					c.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
//					c.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
//					c.put("CNT_POSTPONE", rs.getLong("CNT_POSTPONE"));
//					c.put("AMOUNT_POSTPONE", rs.getLong("AMOUNT_POSTPONE"));
//					c.put("CNT_REFUSE", rs.getLong("CNT_REFUSE"));
//					c.put("AMOUNT_REFUSE", rs.getLong("AMOUNT_REFUSE"));
//					c.put("START_DATE", rs.getString("START_DATE"));
//					c.put("END_DATE", rs.getString("END_DATE"));
//					c.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
//					c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//					c.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//					c.put("ORGAN", rs.getString("ORGAN"));
//					c.put("PLACE", rs.getString("PLACE"));
//					c.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
//
//					if (prepay.size() > 0) { // 선불 카드사별 마감 현황
//						for (int i = 0; i < prepay.size(); i++) {
//							GeneralConfig s = (GeneralConfig) prepay.get(i);
//
//							if (rs.getLong("COMPANY_SEQ") == s.getLong("COMPANY_SEQ") && rs.getLong("ORGANIZATION_SEQ") == s.getLong("ORGANIZATION_SEQ") && rs.getLong("VM_PLACE_SEQ") == s.getLong("VM_PLACE_SEQ") && rs.getString("CLOSING_DATE").equals(s.get("CLOSING_DATE"))) {
//								c.put("CNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("CNT"));
//								c.put("AMOUNT_PREPAY_" + s.get("PAY_CARD"), s.getLong("AMOUNT"));
//
//								this.data.put("CLOSING_CNT_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("CLOSING_CNT_PREPAY_" + s.get("PAY_CARD")) + s.getLong("CNT"));
//								this.data.put("CLOSING_AMOUNT_PREPAY_" + s.get("PAY_CARD"), this.data.getLong("CLOSING_AMOUNT_PREPAY_" + s.get("PAY_CARD")) + s.getLong("AMOUNT"));
//							}
//						}
//					}
//
//					this.list.add(c);
//
//					cnt[0] += rs.getLong("CNT_CARD");
//					cnt[1] += rs.getLong("CNT_PREPAY");
//					cnt[2] += c.getLong("PAYMENT_CNT_CARD");
//					cnt[3] += c.getLong("PAYMENT_CNT_PREPAY");
//					cnt[4] += rs.getLong("CNT_POSTPONE");
//					cnt[5] += rs.getLong("CNT_REFUSE");
//					amt[0] += rs.getLong("AMOUNT_CARD");
//					amt[1] += rs.getLong("AMOUNT_PREPAY");
//					amt[2] += c.getLong("PAYMENT_AMOUNT_CARD");
//					amt[3] += c.getLong("PAYMENT_AMOUNT_PREPAY");
//					amt[4] += rs.getLong("AMOUNT_POSTPONE");
//					amt[5] += rs.getLong("AMOUNT_REFUSE");
//
//					if (this.company.size() > 0) { // 선불 카드사별 입금 합계
//						for (int i = 0; i < this.company.size(); i++) {
//							GeneralConfig s = (GeneralConfig) this.company.get(i);
//
//							for (int j = 0; j < c.getInt("PAY_COUNT"); j++) {
//								this.data.put("PAYMENT_CNT_PREPAY_" + s.get("CODE"), this.data.getLong("PAYMENT_CNT_PREPAY_" + s.get("CODE")) + c.getLong("CNT_PREPAY_" + s.get("CODE") + j));
//								this.data.put("PAYMENT_AMOUNT_PREPAY_" + s.get("CODE"), this.data.getLong("PAYMENT_AMOUNT_PREPAY_" + s.get("CODE")) + c.getLong("AMOUNT_PREPAY_" + s.get("CODE") + j));
//							}
//						}
//					}
//				}
//			} catch (Exception e) {
//				this.logger.error(e);
//				error = e.getMessage();
//			} finally {
//				dbLib.close(rs);
//				dbLib.close(ps);
//			}
//
//			if (!StringEx.isEmpty(error)) {
//				break;
//			}
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 합계
//		this.data.put("CLOSING_CNT_CARD", cnt[0]);
//		this.data.put("CLOSING_CNT_PREPAY", cnt[1]);
//		this.data.put("PAYMENT_CNT_CARD", cnt[2]);
//		this.data.put("PAYMENT_CNT_PREPAY", cnt[3]);
//		this.data.put("PAYMENT_CNT_POSTPONE", cnt[4]);
//		this.data.put("PAYMENT_CNT_REFUSE", cnt[5]);
//		this.data.put("CLOSING_AMOUNT_CARD", amt[0]);
//		this.data.put("CLOSING_AMOUNT_PREPAY", amt[1]);
//		this.data.put("PAYMENT_AMOUNT_CARD", amt[2]);
//		this.data.put("PAYMENT_AMOUNT_PREPAY", amt[3]);
//		this.data.put("PAYMENT_AMOUNT_POSTPONE", amt[4]);
//		this.data.put("PAYMENT_AMOUNT_REFUSE", amt[5]);
//
//	// 최하위 조직 타이틀
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
//
//	// 검색 설정
//		String sDesc = "검색기간=" + sDate + "-" + eDate;
//
//		if (company > 0) {
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
//		}
//
//		if (organ > 0) {
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
//		}
//
//		if (place > 0) {
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
//		}
//
//		this.data.put("sDesc", sDesc);
//
//	// 리소스 반환
//		dbLib.close(conn);
//
//	// 정렬
//		switch (oMode) {
//			case 1 :	// 거래처
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("ORGAN", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("ORGAN", true));
//				}
//
//				break;
//			case 2 :	// 설치위치
//				switch (oType) {
//					case 1 :	// DESC
//						Collections.sort(this.list, new UserCompare("PLACE", false));
//						break;
//					default :	// ASC
//						Collections.sort(this.list, new UserCompare("PLACE", true));
//				}
//
//				break;
//		}
//
//		return null;
//	}

	/**
	 * 마감별 입금 현황(쿼리수정본)
	 *
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param sDate 검색일
	 * @param eDate 종료일
	 * @param oMode 정렬필드
	 * @param oType 정렬방법
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String payment_new(long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
	// 필수 검색 조건이 없을 때
		if (company == 0 || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

		// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			throw new Exception("DB 연결에 실패하였습니다.");
		}

		String SUMMARIES_OF_EACH_PREPAY_COMPANY = "";
		String PAYMENT_SUMMARIES_OF_EACH_PREPAY_COMPANY = "";
		String COLUMNS_OF_EACH_PREPAY_COMPANY = "";
		String[] prepaySummaryColumns = new String[] {};
		String[] prepayPaymentSummaryColumns = new String[] {};

		// 자판기별 매출 현황
		this.company = new ArrayList<GeneralConfig>();

		// 검색절 생성
//20160129 입금일자 검색으로 변경
//		String WHERE = "";
		String WHERE = " A.YYYYMMDD BETWEEN '" + sDate + "' AND '" + eDate + "'"
				+ " AND A.TYPE IN ('05', '07', '08')"
			;
		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160127 INDEX 힌트 추가, UNION을 IN에 통합, COMPANY_SEQ 조건 추가
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160127 INDEX 힌트 추가, UNION 통합
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

		if (place > 0) { // 위치
			WHERE += " AND A.VM_PLACE_SEQ = " + place;
		}

		//조건에 마감일 대한 최대 최소 검색일을 가져온다.
//20160127
//		String strMinCloseDate;
//		String strMaxCloseDate
//		StringBuffer sbSql_1 = new StringBuffer();
//
//		sbSql_1.append(" SELECT MIN(UX.YYYYMMDD),MAX(UX.YYYYMMDD) ")
//			.append(" FROM ")
//			.append(" ( ")
//			.append(" SELECT ")
//			.append("     A.YYYY||A.MM||A.DD  YYYYMMDD ")
//			.append(" FROM ")
//			.append("     TB_CLOSING A ")
//			.append(" WHERE ")
//			.append("     A.TYPE IN ( ")
//			.append("        '05', '07', '08' ")
//			.append("      )  ")
//			.append("     AND A.PAY_TYPE IN ( ")
//			.append("        '01', '11' ")
//			.append("        )  ")
//			.append("     AND A.YYYYMMDD BETWEEN ? AND  ? ")
//			.append(WHERE)
//			.append("     GROUP BY ")
//			.append("    A.YYYY, ")
//			.append("    A.MM, ")
//			.append("    A.DD, ")
//			.append("    A.COMPANY_SEQ, ")
//			.append("   A.ORGANIZATION_SEQ, ")
//			.append("   A.VM_PLACE_SEQ ")
//			.append(" ) UX ");
//
//		try {
//			ps = conn.prepareStatement(sbSql_1.toString());
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);
//			rs = ps.executeQuery();
//
//			rs.next();
//			strMinCloseDate = rs.getString(1);
//			strMaxCloseDate = rs.getString(2);
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}

//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}

			//해당업체의 선불카드사 종류를 가져온다.
//20160129
//		StringBuffer sbSql_2 = new StringBuffer();
//
//		sbSql_2.append(" SELECT ")
//			.append(" /*+ ORDERED USE_NL(B) */ B.CODE, ")
//			.append(" B.NAME  ")
//			.append(" FROM ")
//			.append(" TB_CLOSING A ")
//			.append(" INNER JOIN ")
//			.append(" TB_CODE B  ")
//			.append("     ON ( ")
//			.append("         A.PAY_CARD = B.CODE ")
//			.append("         AND B.TYPE = 'PAY_CARD' ")
//			.append("     )  ")
//			.append(" WHERE ")
//			.append(" A.TYPE IN ( ")
//			.append("     '04' ")
//			.append(" )  ")
//			.append(" AND A.PAY_TYPE IN ( ")
//			.append("     '11' ")
//			.append(" )  ")
//			//.append(" AND A.YYYYMMDD >=? ")
//			//.append(" AND A.YYYYMMDD <= ? ")
//			.append(" AND A.YYYY||MM||DD >=? ")
//			.append(" AND A.YYYY||MM||DD <= ? ")
//			.append(WHERE)
//			.append(" GROUP BY ")
//  	   	.append(" B.CODE, ")
//  	   	.append(" B.NAME ");
//
		try {
//			ps = conn.prepareStatement(sbSql_2.toString());
//			//ps.setString(1, sDate);
//			//ps.setString(2, eDate);
//
//			ps.setString(1, strMinCloseDate);
//			ps.setString(2, strMaxCloseDate);

			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ INDEX(A) */"
							+ " CODE,"
							+ " NAME"
						+ " FROM TB_CODE A"
						+ " WHERE TYPE = 'PAY_CARD'"
							+ " AND CODE <> '000'"
						+ " ORDER BY CODE"
				);
			rs = ps.executeQuery();

			ArrayList<String> prepaySummaryColumnList = new ArrayList<String>();
			ArrayList<String> prepayPaymentSummaryColumnList = new ArrayList<String>();

			while(rs.next())
			{
				GeneralConfig c = new GeneralConfig();
				String code = rs.getString("CODE");

				c.put("CODE", code);
				c.put("NAME", rs.getString("NAME"));

				this.company.add(c);

				SUMMARIES_OF_EACH_PREPAY_COMPANY += " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' AND PAY_CARD = '" + code + "' THEN CNT END), 0) AS CNT_PREPAY_" + code + ","
						+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' AND PAY_CARD = '" + code + "' THEN AMOUNT END), 0) AS AMOUNT_PREPAY_" + code + ","
					;
				PAYMENT_SUMMARIES_OF_EACH_PREPAY_COMPANY += " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' AND PAY_CARD = '" + code + "' THEN CNT END), 0) AS PAY_CNT_PREPAY_" + code + ","
						+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' AND PAY_CARD = '" + code + "' THEN AMOUNT - COMMISSION + OUTAMOUNT END), 0) AS PAY_AMOUNT_PREPAY_" + code + ","
					;
				COLUMNS_OF_EACH_PREPAY_COMPANY += " AA.CNT_PREPAY_" + code + ","
						+ " AA.AMOUNT_PREPAY_" + code + ","
						+ " AB.PAY_CNT_PREPAY_" + code + ","
						+ " AB.PAY_AMOUNT_PREPAY_" + code + ","
					;
				prepaySummaryColumnList.add("CNT_PREPAY_" + code);
				prepaySummaryColumnList.add("AMOUNT_PREPAY_" + code);
				prepayPaymentSummaryColumnList.add("PAY_CNT_PREPAY_" + code);
				prepayPaymentSummaryColumnList.add("PAY_AMOUNT_PREPAY_" + code);
			}

			prepaySummaryColumns = prepaySummaryColumnList.toArray(new String[prepaySummaryColumnList.size()]);
			prepayPaymentSummaryColumns = prepayPaymentSummaryColumnList.toArray(new String[prepayPaymentSummaryColumnList.size()]);
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

		this.data = new GeneralConfig();
		this.list = new ArrayList<GeneralConfig>();

//		Properties propSubSum = new Properties();

		//마감별 입금현황 SQL현황을 만든다.
//20160129
//		StringBuffer sbSql_3 = new StringBuffer();
//		//sql
//		sbSql_3.append(" SELECT ")
//			//.append("        -- 마감일 \n")
//			.append("        UA.YYYY, ")
//			.append("        UA.MM, ")
//			.append("        UA.DD, ")
//			.append("        UA.COMPANY_SEQ, ")
//			.append("        UA.ORGANIZATION_SEQ, ")
//			.append("        UA.VM_PLACE_SEQ, ")
//			.append("        UC.ORGAN, ")
//			.append("        UC.PLACE,         ")
//
//			.append("        VM_CODE,         ")
//
//			.append("  ");
//		//.append("       -- 선불카드사별 마감현황 \n");
//
//		int intRoofCnt = this.company.size();
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			sbSql_3.append("     NVL(   UB."+ tmpRow.get("CODE") +"_CNT, 0 ) "+ tmpRow.get("CODE") +"_CNT , ");
//			sbSql_3.append("     NVL(   UB."+ tmpRow.get("CODE") +"_AMOUNT, 0 ) "+ tmpRow.get("CODE") +"_AMOUNT , ");
//			tmpRow = null;
//		}
//
//		//sbSql_3.append(" \n       -- 자판기별 마감현황 \n ")
//		sbSql_3.append("        UC.CNT_CARD, ")
//			.append("        UC.AMOUNT_CARD, ")
//			.append("        UC.CNT_PREPAY, ")
//			.append("        UC.AMOUNT_PREPAY, ")
//			.append("        UC.CNT_POSTPONE, ")
//			.append("        UC.AMOUNT_POSTPONE, ")
//			.append("        UC.CNT_REFUSE, ")
//			.append("        UC.AMOUNT_REFUSE, ")
//			.append("        UC.START_DATE, ")
//			.append("        UC.END_DATE, ")
//			.append("        UC.CLOSING_DATE,   ")
//			.append("         ")	;
//
//		//.append("    \n    -- 선불카드사별 입금현황 \n");
//
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			sbSql_3.append("        NVL(UD."+ tmpRow.get("CODE") +"_CNT,0)  PAY_"+ tmpRow.get("CODE") +"_CNT , ");
//			sbSql_3.append("        NVL(UD."+ tmpRow.get("CODE") +"_AMOUNT,0)  PAY_"+ tmpRow.get("CODE") +"_AMOUNT , ");
//			tmpRow = null;
//		}
//
//		//sbSql_3.append(" \n       -- 입금현황 \n")
//		sbSql_3.append("      NVL(UE.CNT_CARD,0)  PAY_CNT_CARD, ")
//			.append("        NVL(UE.AMOUNT_CARD,0)  PAY_AMOUNT_CARD, ")
//			.append("        NVL(UE.CNT_PREPAY,0)  PAY_CNT_PREPAY, ")
//			.append("        NVL(UE.AMOUNT_PREPAY,0) PAY_AMOUNT_PREPAY, ")
//			.append("        UE.PAY_DATE  ")
//			.append(" FROM ")
//			//.append(" -- 마감일 정보 \n")
//			.append("     ( ")
//			.append("         SELECT ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ, ")
//			.append("             A.VM_PLACE_SEQ,  ")
//			.append("              ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE ")
//
//			.append("             ,RX.VM_CODE ")
//
//			.append("              ")
//			.append("         FROM ")
//			.append("             TB_CLOSING A  ")
//			.append("         INNER JOIN ")
//			.append("             TB_ORGANIZATION B  ")
//			.append("                 ON A.ORGANIZATION_SEQ = B.SEQ  ")
//			.append("         INNER JOIN ")
//			.append("             TB_VENDING_MACHINE_PLACE C  ")
//			.append("                 ON A.VM_PLACE_SEQ = C.SEQ  ")
//
//			.append(" INNER JOIN (SELECT TX1.CODE VM_CODE, TX2.SEQ PLACE_SEQ FROM TB_VENDING_MACHINE TX1, TB_VENDING_MACHINE_PLACE TX2 WHERE TX1.SEQ = TX2.VM_SEQ ) RX ON A.VM_PLACE_SEQ = RX.PLACE_SEQ ")
//
//			.append("         WHERE ")
//			.append("             A.TYPE IN ( ")
//			.append("                 '05', '07', '08' ")
//			.append("             )  ")
//			.append("             AND A.PAY_TYPE IN ( ")
//			.append("                 '01', '11' ")
//			.append("             )  ")
//			.append("             AND A.YYYYMMDD BETWEEN  ? /**P*/ AND  ? /**P*/  ")
//			.append(WHERE)
//			.append("         GROUP BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ, ")
//			.append("             A.VM_PLACE_SEQ, ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE  ")
//
//			.append("             ,RX.VM_CODE ")
//
//			.append("         ORDER BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE ")
//			.append("     ) UA, ")
//			//.append("\n -- 선불마감금액정보 \n")
//			.append("     ( ")
//			.append("         SELECT  ")
//			.append("                 G2.COMPANY_SEQ, ")
//			.append("                 G2.ORGANIZATION_SEQ, ")
//			.append("                 G2.VM_PLACE_SEQ, ")
//			.append("                 G2.YYYY || G2.MM || G2.DD AS CLOSING_DATE, ");
//
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_CNT) "+ tmpRow.get("CODE") +"_CNT, ");
//			sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_AMOUNT) "+ tmpRow.get("CODE") +"_AMOUNT, ");
//			tmpRow = null;
//		}
//
//		sbSql_3.append("                 G2.YYYY, ")
//			.append("                 G2.MM, ")
//			.append("                 G2.DD       ")
//			.append("         FROM ")
//			.append("         ( ")
//			.append("             SELECT ")
//			.append("                 A.PAY_CARD,   ");
//
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			sbSql_3.append("                 decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(A.CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//			sbSql_3.append("                 decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(A.AMOUNT),0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//
//			tmpRow = null;
//		}
//
//		sbSql_3.append("                 NVL(SUM(A.CNT),0) AS CNT, ")
//			.append("                 NVL(SUM(A.AMOUNT),0) AS AMOUNT, ")
//			.append("                 A.COMPANY_SEQ, ")
//			.append("                 A.ORGANIZATION_SEQ, ")
//			.append("                 A.VM_PLACE_SEQ, ")
//			.append("                 A.YYYY || A.MM || A.DD AS CLOSING_DATE, ")
//			.append("                 A.YYYY, ")
//			.append("                 A.MM, ")
//			.append("                 A.DD                ")
//			.append("             FROM ")
//			.append("                 TB_CLOSING A  ")
//			.append("             WHERE ")
//			.append("                 A.TYPE IN ( '04' )  ")
//			.append("                 AND A.PAY_TYPE IN ( '11' ) ")
//			.append("                  ")
//			.append("                 AND A.YYYYMMDD >= ? ")
//			.append("                 AND A.YYYYMMDD <= ?  ")
//			.append(WHERE)
//			.append("             GROUP BY ")
//			.append("                 A.COMPANY_SEQ, ")
//			.append("                 A.ORGANIZATION_SEQ, ")
//			.append("                 A.VM_PLACE_SEQ, ")
//			.append("                 A.PAY_CARD, ")
//			.append("                 A.YYYY, ")
//			.append("                 A.MM, ")
//			.append("                 A.DD   ")
//			.append("           ) G2 ")
//			.append("        GROUP BY    ")
//			.append("                 G2.COMPANY_SEQ, ")
//			.append("                 G2.ORGANIZATION_SEQ, ")
//			.append("                 G2.VM_PLACE_SEQ, ")
//			//.append("                 G2.PAY_CARD, ")
//			.append("                 G2.YYYY, ")
//			.append("                 G2.MM, ")
//			.append("                 G2.DD        ")
//			.append("     ) UB,     ")
//			//.append("\n -- 마감금액정보   \n  ")
//			.append("     ( ")
//			.append("         SELECT ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '01' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_CARD, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '01' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_CARD, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '11' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_PREPAY, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '11' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_PREPAY, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '07' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_POSTPONE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '07' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_POSTPONE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '08' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_REFUSE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '08' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_REFUSE, ")
//			.append("         NVL(MIN(TO_CHAR(TO_DATE(A.START_DATE || A.START_TIME, ")
//			.append("         'YYYYMMDDHH24MISS'), ")
//			.append("         'YYYY-MM-DD HH24:MI:SS')), ")
//			.append("         '-') AS START_DATE, ")
//			.append("         NVL(MAX(TO_CHAR(TO_DATE(A.END_DATE || A.END_TIME, ")
//			.append("         'YYYYMMDDHH24MISS'), ")
//			.append("         'YYYY-MM-DD HH24:MI:SS')), ")
//			.append("         '-') AS END_DATE, ")
//			.append("         A.COMPANY_SEQ, ")
//			.append("         A.ORGANIZATION_SEQ, ")
//			.append("         A.VM_PLACE_SEQ, ")
//			.append("         B.NAME AS ORGAN, ")
//			.append("         C.PLACE, ")
//			.append("         A.YYYY || A.MM || A.DD AS CLOSING_DATE , ")
//			.append("          ")
//			.append("         A.YYYY, ")
//			.append("         A.MM, ")
//			.append("         A.DD         ")
//			.append("          ")
//			.append("     FROM ")
//			.append("         TB_CLOSING A  ")
//			.append("     INNER JOIN ")
//			.append("         TB_ORGANIZATION B  ")
//			.append("             ON A.ORGANIZATION_SEQ = B.SEQ  ")
//			.append("     INNER JOIN ")
//			.append("         TB_VENDING_MACHINE_PLACE C  ")
//			.append("             ON A.VM_PLACE_SEQ = C.SEQ  ")
//			.append("     WHERE ")
//			.append("         A.TYPE IN ( ")
//			.append("             '04', '07', '08' ")
//			.append("         )  ")
//			.append("         AND A.PAY_TYPE IN ( ")
//			.append("             '01', '11' ")
//			.append("         )  ")
//			//.append("         AND A.YYYYMMDD >= ? ")
//			//.append("         AND A.YYYYMMDD <= ?         ")
//
//			//20120604 마감별매출현황 기준일 변경
//			.append("         AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("         AND A.YYYY||A.MM||A.DD <= ?         ")
//
//			.append(WHERE)
//			.append("     GROUP BY ")
//			.append("         A.COMPANY_SEQ, ")
//			.append("         A.ORGANIZATION_SEQ, ")
//			.append("         A.VM_PLACE_SEQ, ")
//			.append("         B.NAME, ")
//			.append("         C.PLACE, ")
//			.append("         A.YYYY, ")
//			.append("         A.MM, ")
//			.append("         A.DD ")
//			.append("     ) UC, ")
//			//.append("\n     --- 선불카드사별 입금현황 \n ")
//			.append("     ( ")
//			.append("             SELECT  ")
//			.append("                     G2.COMPANY_SEQ, ")
//			.append("                     G2.ORGANIZATION_SEQ, ")
//			.append("                     G2.VM_PLACE_SEQ, ")
//			.append("                     G2.YYYY, ")
//			.append("                     G2.MM, ")
//			.append("                     G2.DD, ")
//			.append("                      ");
//
//
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			//sbSql_3.append("                 decode (G2.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(G2.CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//			//sbSql_3.append("                 decode (G2.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(G2.AMOUNT),0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//			sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_CNT) AS "+ tmpRow.get("CODE") +"_CNT, ");
//			sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_AMOUNT) AS "+ tmpRow.get("CODE") +"_AMOUNT, ");
//			tmpRow = null;
//		}
//		sbSql_3.append("                     G2.PAY_DATE                            ");
//
//		sbSql_3.append("             FROM ")
//			.append("             ( ")
//			.append("                 SELECT ")
//			.append("                     A.YYYY, ")
//			.append("                     A.MM, ")
//			.append("                     A.DD,   ")
//			.append("                     A.COMPANY_SEQ, ")
//			.append("                     A.ORGANIZATION_SEQ,  ")
//			.append("                     A.VM_PLACE_SEQ,    ");
//
//		for(int ix=0 ; ix < intRoofCnt ; ix++ )
//		{
//			GeneralConfig tmpRow  = this.company.get(ix);
//			sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//			//sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(AMOUNT - COMMISSION), 0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//			sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(AMOUNT - COMMISSION + OUTAMOUNT), 0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//			tmpRow = null;
//		}
//
//		sbSql_3.append("                     NVL(SUM(CNT),0) AS CNT, ")
//			//.append("                     NVL(SUM(AMOUNT - COMMISSION), 0) AS AMOUNT, ")
//			.append("                     NVL(SUM(AMOUNT - COMMISSION + OUTAMOUNT), 0) AS AMOUNT, ")
//			.append("                     PAY_CARD, ")
//			.append("                     YYYYMMDD AS PAY_DATE  ")
//			.append("                 FROM ")
//			.append("                     TB_CLOSING A  ")
//			.append("                 WHERE ")
//			.append("                     TYPE = '05'  ")
//			.append("                     AND PAY_TYPE IN ( ")
//			.append("                         '11' ")
//			.append("                     )  ")
//			.append("                     AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("                     AND A.YYYY||A.MM||A.DD <= ?         ")
//			.append("                      ")
//			.append(WHERE)
//			.append("                 GROUP BY ")
//			.append("                     A.YYYY, ")
//			.append("                     A.MM, ")
//			.append("                     A.DD, ")
//			.append("                     A.COMPANY_SEQ, ")
//			.append("                     A.ORGANIZATION_SEQ,  ")
//			.append("                     A.VM_PLACE_SEQ,  ")
//			.append("                     A.PAY_CARD, ")
//			.append("                     A.YYYYMMDD         ")
//			.append("               ) G2 ")
//			.append("            GROUP BY    ")
//			.append("                     G2.COMPANY_SEQ, ")
//			.append("                     G2.ORGANIZATION_SEQ, ")
//			.append("                     G2.VM_PLACE_SEQ, ")
//			//.append("                     G2.PAY_CARD, ")
//			.append("                     G2.YYYY, ")
//			.append("                     G2.MM, ")
//			.append("                     G2.DD, ")
//			.append("                     G2.PAY_DATE           ")
//			.append("     ) UD, \n")
//			//.append("\n     -- 입금정보 \n")
//			.append("     ( ")
//			.append("             SELECT ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ,  ")
//			.append("             A.VM_PLACE_SEQ,      ")
//			.append("             NVL(SUM(CASE  ")
//			.append("                 WHEN PAY_TYPE = '01' THEN CNT  ")
//			.append("             END), ")
//			.append("             0) AS CNT_CARD, ")
//			.append("             NVL(SUM(CASE  ")
//			//.append("                 WHEN PAY_TYPE = '01' THEN AMOUNT - COMMISSION  ")
//			.append("                 WHEN PAY_TYPE = '01' THEN AMOUNT - COMMISSION + OUTAMOUNT  ")
//			.append("             END), ")
//			.append("             0) AS AMOUNT_CARD, ")
//			.append("             NVL(SUM(CASE  ")
//			.append("                 WHEN PAY_TYPE = '11' THEN CNT  ")
//			.append("             END), ")
//			.append("             0) AS CNT_PREPAY, ")
//			.append("             NVL(SUM(CASE  ")
//			//.append("                 WHEN PAY_TYPE = '11' THEN AMOUNT - COMMISSION  ")
//			.append("                 WHEN PAY_TYPE = '11' THEN AMOUNT - COMMISSION + OUTAMOUNT  ")
//			.append("             END), ")
//			.append("             0) AS AMOUNT_PREPAY, ")
//			.append("             YYYYMMDD AS PAY_DATE  ")
//			.append("         FROM ")
//			.append("             TB_CLOSING A ")
//			.append("         WHERE ")
//			.append("             TYPE = '05'  ")
//			.append("             AND PAY_TYPE IN ( ")
//			.append("                 '01', '11' ")
//			.append("             )  ")
//			.append("             AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("             AND A.YYYY||A.MM||A.DD <= ? ")
//			.append(WHERE)
//			.append("         GROUP BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ,  ")
//			.append("             A.VM_PLACE_SEQ,  ")
//			.append("             YYYYMMDD  ")
//			.append("         ORDER BY ")
//			.append("             YYYYMMDD   ")
//			.append("      ")
//			.append("     ) UE ")
//			.append("  ")
//			.append("      ")
//			.append(" WHERE ")
//			.append("         UA.YYYY = UB.YYYY(+) ")
//			.append("         AND UA.MM = UB.MM(+) ")
//			.append("         AND UA.DD = UB.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UB.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UB.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UB.VM_PLACE_SEQ(+)   ")
//			.append("          ")
//			.append("         AND UA.YYYY = UC.YYYY(+) ")
//			.append("         AND UA.MM = UC.MM(+) ")
//			.append("         AND UA.DD = UC.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UC.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UC.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UC.VM_PLACE_SEQ(+)   ")
//			.append("          ")
//			/*
//			.append("         AND UA.YYYY = UD.YYYY(+) ")
//			.append("         AND UA.MM = UD.MM(+) ")
//			.append("         AND UA.DD = UD.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UD.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UD.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UD.VM_PLACE_SEQ(+) ")
//			.append("          ")
//			.append("         AND UA.YYYY = UE.YYYY(+) ")
//			.append("         AND UA.MM = UE.MM(+) ")
//			.append("         AND UA.DD = UE.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UE.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UE.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UE.VM_PLACE_SEQ(+)   ")
//			*/
//	       .append("         AND UA.YYYY = UE.YYYY(+) ")
//	       .append("         AND UA.MM = UE.MM(+) ")
//	       .append("         AND UA.DD = UE.DD(+) ")
//	       .append("         AND UA.COMPANY_SEQ = UE.COMPANY_SEQ(+) ")
//	       .append("         AND UA.ORGANIZATION_SEQ = UE.ORGANIZATION_SEQ(+) ")
//	       .append("         AND UA.VM_PLACE_SEQ = UE.VM_PLACE_SEQ(+)   ")
//
//	       .append("         AND UE.YYYY = UD.YYYY(+) ")
//	       .append("         AND UE.MM = UD.MM(+) ")
//	       .append("         AND UE.DD = UD.DD(+) ")
//	       .append("         AND UE.COMPANY_SEQ = UD.COMPANY_SEQ(+) ")
//	       .append("         AND UE.ORGANIZATION_SEQ = UD.ORGANIZATION_SEQ(+) ")
//	       .append("         AND UE.VM_PLACE_SEQ = UD.VM_PLACE_SEQ(+) ")
//	       .append("         AND UE.PAY_DATE = UD.PAY_DATE(+) ")
//			.append("          ")
//			.append(" ORDER BY ")
//			/*
//			.append("             UA.YYYY, ")
//			.append("             UA.MM, ")
//			.append("             UA.DD, ")
//			.append("             UA.PARENT_SEQ, ")
//			.append("             UA.NAME, ")
//			.append("             UA.PLACE,UE.PAY_DATE  ");
//			*/
//			//20131219 수정
//			//.append(" UA.YYYY, UA.MM, UA.DD, UA.PARENT_SEQ, UA.NAME, UA.PLACE, UC.START_DATE, UC.END_DATE, UE.PAY_DATE ");
//			.append(" UA.YYYY, UA.MM, UA.DD, UA.PARENT_SEQ, UA.NAME, UA.PLACE, UC.START_DATE, UC.END_DATE, VM_CODE, UE.PAY_DATE ");
//
//		logger.debug("sbSql_3.toString() = " + sbSql_3.toString());
//
		try {
			long[] cnt = {0, 0, 0, 0, 0, 0};
			long[] amt = {0, 0, 0, 0, 0, 0};

//			ps = conn.prepareStatement(sbSql_3.toString());
//
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);
//
//			System.out.println("sDate = " + sDate);
//			System.out.println("eDate = " + eDate);
//			System.out.println("strMinCloseDate = " + strMinCloseDate);
//			System.out.println("strMaxCloseDate = " + strMaxCloseDate);
//
//			ps.setString(3, strMinCloseDate);
//			ps.setString(4, strMaxCloseDate);
//			ps.setString(5, strMinCloseDate);
//			ps.setString(6, strMaxCloseDate);
//			ps.setString(7, strMinCloseDate);
//			ps.setString(8, strMaxCloseDate);
//			ps.setString(9, strMinCloseDate);
//			ps.setString(10, strMaxCloseDate);

//20160211 WITH 절로 변경
//			ps = dbLib.prepareStatement(conn,
//					"SELECT /*+ ORDERED USE_HASH(AB B C D) */"
//							+ " AA.CLOSING_DATE AS YYYYMMDD,"
//							+ " AA.CLOSING_DATE,"
//							+ " AA.ORGANIZATION_SEQ, AA.VM_PLACE_SEQ,"
//							+ " B.NAME AS ORGAN,"
//							+ " C.PLACE,"
//							+ " D.CODE AS VM_CODE,"
//							+ " AA.START_DATE,"
//							+ " AA.END_DATE,"
//							+ " AA.CNT,"
//							+ " AA.AMOUNT,"
//							+ " AA.CNT_CARD,"
//							+ " AA.AMOUNT_CARD,"
//							+ " AA.CNT_PREPAY,"
//							+ " AA.AMOUNT_PREPAY,"
//							+ " AA.CNT_POSTPONE,"
//							+ " AA.AMOUNT_POSTPONE,"
//							+ " AA.CNT_REFUSE,"
//							+ " AA.AMOUNT_REFUSE,"
//							+ " AB.PAY_DATE,"
//							+ " AB.PAY_CNT_CARD,"
//							+ " AB.PAY_AMOUNT_CARD,"
//							+ COLUMNS_OF_EACH_PREPAY_COMPANY
//							+ " AB.PAY_CNT_PREPAY,"
//							+ " AB.PAY_AMOUNT_PREPAY"
//						+ " FROM ("
//									+ " SELECT /*+ INDEX(AA_A) */"
//											+ " YYYY || MM || DD AS CLOSING_DATE,"
//											+ " ORGANIZATION_SEQ, VM_PLACE_SEQ,"
//											+ " MIN(CASE WHEN START_DATE IS NOT NULL THEN START_DATE || NVL(START_TIME, '000000') END) AS START_DATE,"
//											+ " MAX(CASE WHEN END_DATE IS NOT NULL THEN END_DATE || NVL(END_TIME, '000000') END) AS END_DATE,"
//											+ " NVL(SUM(CNT), 0) AS CNT,"
//											+ " NVL(SUM(AMOUNT), 0) AS AMOUNT,"
//											+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '01' THEN CNT END), 0) AS CNT_CARD,"
//											+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '01' THEN AMOUNT END), 0) AS AMOUNT_CARD,"
//											+ SUMMARIES_OF_EACH_PREPAY_COMPANY
//											+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' THEN CNT END), 0) AS CNT_PREPAY,"
//											+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' THEN AMOUNT END), 0) AS AMOUNT_PREPAY,"
//											+ " NVL(SUM(CASE WHEN TYPE = '07' THEN CNT END), 0) AS CNT_POSTPONE,"
//											+ " NVL(SUM(CASE WHEN TYPE = '07' THEN AMOUNT END), 0) AS AMOUNT_POSTPONE,"
//											+ " NVL(SUM(CASE WHEN TYPE = '08' THEN CNT END), 0) AS CNT_REFUSE,"
//											+ " NVL(SUM(CASE WHEN TYPE = '08' THEN AMOUNT END), 0) AS AMOUNT_REFUSE"
//										+ " FROM TB_CLOSING AA_A"
//										+ " WHERE TYPE IN ('04', '07', '08')"
//											+ ((company > 0) ? " AND COMPANY_SEQ = " + company
//													: (cfg.getLong("user.company") > 0) ? " AND COMPANY_SEQ = " + cfg.getLong("user.company")
//													: ""
//												)
//											+ " AND EXISTS ("
//													+ " SELECT /*+ INDEX(A) */"
//																+ " 1"
//															+ " FROM TB_CLOSING A"
//															+ " WHERE" + WHERE
//																+ " AND A.PAY_TYPE IN ('01', '11')"
//																+ " AND (A.YYYY || A.MM || A.DD) = (AA_A.YYYY || AA_A.MM || AA_A.DD)"
//																+ " AND A.ORGANIZATION_SEQ = AA_A.ORGANIZATION_SEQ"
//																+ " AND A.VM_PLACE_SEQ = AA_A.VM_PLACE_SEQ"
//												+ " )"
//										+ " GROUP BY YYYY || MM || DD, ORGANIZATION_SEQ, VM_PLACE_SEQ"
//									+ " ) AA"
//							+ " INNER JOIN ("
//									+ " SELECT /*+ INDEX(A) */"
//											+ " YYYY || MM || DD AS CLOSING_DATE,"
//										+ " ORGANIZATION_SEQ, VM_PLACE_SEQ,"
//										+ " YYYYMMDD AS PAY_DATE,"
//										+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '01' THEN CNT END), 0) AS PAY_CNT_CARD,"
//										+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '01' THEN AMOUNT - COMMISSION + OUTAMOUNT END), 0) AS PAY_AMOUNT_CARD,"
//										+ PAYMENT_SUMMARIES_OF_EACH_PREPAY_COMPANY
//										+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' THEN CNT END), 0) AS PAY_CNT_PREPAY,"
//										+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' THEN AMOUNT - COMMISSION + OUTAMOUNT END), 0) AS PAY_AMOUNT_PREPAY"
//									+ " FROM TB_CLOSING A"
//									+ " WHERE" + WHERE
//										+ " AND A.PAY_TYPE IN ('01', '11')"
//									+ " GROUP BY YYYY || MM || DD, ORGANIZATION_SEQ, VM_PLACE_SEQ, YYYYMMDD"
//								+ " ) AB"
//								+ " ON AB.CLOSING_DATE = AA.CLOSING_DATE"
//									+ " AND AB.ORGANIZATION_SEQ = AA.ORGANIZATION_SEQ"
//									+ " AND AB.VM_PLACE_SEQ = AA.VM_PLACE_SEQ"
//							+ " INNER JOIN TB_ORGANIZATION B"
//								+ " ON AA.ORGANIZATION_SEQ = B.SEQ"
//							+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
//								+ " ON AA.VM_PLACE_SEQ = C.SEQ"
//							+ " INNER JOIN TB_VENDING_MACHINE D"
//								+ " ON C.VM_SEQ = D.SEQ"
			ps = dbLib.prepareStatement(conn,
					"WITH AB AS ("
							+ " SELECT /*+ INDEX(A IX_CLOSING_YYYYMMDD) */"
									+ " YYYY || MM || DD AS CLOSING_DATE,"
									+ " ORGANIZATION_SEQ,"
									+ " VM_PLACE_SEQ,"
									+ " YYYYMMDD AS PAY_DATE,"
									+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '01' THEN CNT END), 0) AS PAY_CNT_CARD,"
									+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '01' THEN AMOUNT - COMMISSION + OUTAMOUNT END), 0) AS PAY_AMOUNT_CARD,"
									+ PAYMENT_SUMMARIES_OF_EACH_PREPAY_COMPANY
									+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' THEN CNT END), 0) AS PAY_CNT_PREPAY,"
									+ " NVL(SUM(CASE WHEN TYPE = '05' AND PAY_TYPE = '11' THEN AMOUNT - COMMISSION + OUTAMOUNT END), 0) AS PAY_AMOUNT_PREPAY"
								+ " FROM TB_CLOSING A"
								+ " WHERE" + WHERE
								+ " GROUP BY YYYY || MM || DD, ORGANIZATION_SEQ, VM_PLACE_SEQ, YYYYMMDD"
						+ " )"
					+ " SELECT /*+ ORDERED USE_HASH(AB B C D) */"
								+ " AA.CLOSING_DATE AS YYYYMMDD,"
								+ " AA.CLOSING_DATE,"
								+ " AA.ORGANIZATION_SEQ,"
								+ " AA.VM_PLACE_SEQ,"
								+ " B.NAME AS ORGAN,"
								+ " C.PLACE,"
								+ " D.CODE AS VM_CODE,"
								+ " AA.START_DATE,"
								+ " AA.END_DATE,"
								+ " AA.CNT,"
								+ " AA.AMOUNT,"
								+ " AA.CNT_CARD,"
								+ " AA.AMOUNT_CARD,"
								+ " AA.CNT_PREPAY,"
								+ " AA.AMOUNT_PREPAY,"
								+ " AA.CNT_POSTPONE,"
								+ " AA.AMOUNT_POSTPONE,"
								+ " AA.CNT_REFUSE,"
								+ " AA.AMOUNT_REFUSE,"
								+ " AB.PAY_DATE,"
								+ " AB.PAY_CNT_CARD,"
								+ " AB.PAY_AMOUNT_CARD,"
								+ COLUMNS_OF_EACH_PREPAY_COMPANY
								+ " AB.PAY_CNT_PREPAY,"
								+ " AB.PAY_AMOUNT_PREPAY"
							+ " FROM ("
										+ " SELECT /*+ INDEX(A) */"
												+ " YYYY || MM || DD AS CLOSING_DATE,"
												+ " ORGANIZATION_SEQ,"
												+ " VM_PLACE_SEQ,"
												+ " MIN(CASE WHEN START_DATE IS NOT NULL THEN START_DATE || NVL(START_TIME, '000000') END) AS START_DATE,"
												+ " MAX(CASE WHEN END_DATE IS NOT NULL THEN END_DATE || NVL(END_TIME, '000000') END) AS END_DATE,"
												+ " NVL(SUM(CNT), 0) AS CNT, NVL(SUM(AMOUNT), 0) AS AMOUNT,"
												+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '01' THEN CNT END), 0) AS CNT_CARD,"
												+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '01' THEN AMOUNT END), 0) AS AMOUNT_CARD,"
												+ SUMMARIES_OF_EACH_PREPAY_COMPANY
												+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' THEN CNT END), 0) AS CNT_PREPAY,"
												+ " NVL(SUM(CASE WHEN TYPE = '04' AND PAY_TYPE = '11' THEN AMOUNT END), 0) AS AMOUNT_PREPAY,"
												+ " NVL(SUM(CASE WHEN TYPE = '07' THEN CNT END), 0) AS CNT_POSTPONE,"
												+ " NVL(SUM(CASE WHEN TYPE = '07' THEN AMOUNT END), 0) AS AMOUNT_POSTPONE,"
												+ " NVL(SUM(CASE WHEN TYPE = '08' THEN CNT END), 0) AS CNT_REFUSE,"
												+ " NVL(SUM(CASE WHEN TYPE = '08' THEN AMOUNT END), 0) AS AMOUNT_REFUSE"
											+ " FROM TB_CLOSING A"
											+ " WHERE COMPANY_SEQ = " + company
												+ " AND TYPE IN ('04', '07', '08')"
												+ " AND EXISTS ("
														+ " SELECT 1"
															+ " FROM AB"
															+ " WHERE CLOSING_DATE = (A.YYYY || A.MM || A.DD)"
																+ " AND ORGANIZATION_SEQ = A.ORGANIZATION_SEQ"
																+ " AND VM_PLACE_SEQ = A.VM_PLACE_SEQ"
													+ " )"
											+ " GROUP BY YYYY || MM || DD, ORGANIZATION_SEQ, VM_PLACE_SEQ"
									+ " ) AA"
								+ " INNER JOIN AB"
									+ " ON AB.CLOSING_DATE = AA.CLOSING_DATE"
										+ " AND AB.ORGANIZATION_SEQ = AA.ORGANIZATION_SEQ"
										+ " AND AB.VM_PLACE_SEQ = AA.VM_PLACE_SEQ"
								+ " INNER JOIN TB_ORGANIZATION B"
									+ " ON AA.ORGANIZATION_SEQ = B.SEQ"
								+ " INNER JOIN TB_VENDING_MACHINE_PLACE C"
									+ " ON AA.VM_PLACE_SEQ = C.SEQ"
								+ " INNER JOIN TB_VENDING_MACHINE D"
									+ " ON C.VM_SEQ = D.SEQ"
							+ " WHERE AB.PAY_CNT_CARD > 0"
								+ " OR AB.PAY_CNT_PREPAY > 0"
						//+ "	ORDER BY AA.CLOSING_DATE, B.NAME, C.PLACE, D.CODE, AB.PAY_DATE"
						// 정렬 값(oMode, oType)에 따라 ORDER BY 변경
						+ ((oType == 1) ? (	// DESC
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE DESC, B.NAME DESC, D.CODE DESC, AB.PAY_DATE, AA.START_DATE, AA.END_DATE" :
								// default: 거래처
												" ORDER BY B.NAME DESC, C.PLACE DESC, D.CODE DESC, AB.PAY_DATE, AA.START_DATE, AA.END_DATE"
							) : (			// ASC
								// 설치장소
								(oMode == 2) ?	" ORDER BY C.PLACE, B.NAME, D.CODE, AB.PAY_DATE, AA.START_DATE, AA.END_DATE" :
								// default: 거래처
												" ORDER BY B.NAME, C.PLACE, D.CODE, AB.PAY_DATE, AA.START_DATE, AA.END_DATE"
								)
							)
				);
			rs = ps.executeQuery();

//			GeneralConfig SumRow = null;
//
//			int intListCnt = 0;
//
//			String strPreRowInfo = "";
//
//			long lnRowID = 0;
//
//			boolean blRowFlag = false;

			int rowCount = 0;
			int listCount = 0;

			String preRowKey = null;
			GeneralConfig masterRow = null;

			while (rs.next())
			{
//				blRowFlag = false;

				GeneralConfig row = new GeneralConfig();

//				String strCurRowInfo = "";
//
//				strCurRowInfo = rs.getString("YYYYMMDD")+ rs.getString("COMPANY_SEQ")+ rs.getString("ORGANIZATION_SEQ")+rs.getString("VM_PLACE_SEQ")+rs.getString("START_DATE")+rs.getString("END_DATE");

				//Row를 검사한다.
//20160129
//				if(strCurRowInfo.equals(strPreRowInfo))
//				{
//					blRowFlag = false;//같은마감
//
//					row.put("YYYY", lnRowID);
//					this.data.put(String.valueOf(lnRowID), this.data.getInt(String.valueOf(lnRowID)) + 1);
//				}
//				else
//				{
//					lnRowID++;
//					blRowFlag = true;//다른마감
//					row.put("YYYY", lnRowID);
//					this.data.put(String.valueOf(lnRowID), 1);
//				}
//
//				strPreRowInfo = rs.getString("YYYYMMDD")+ rs.getString("COMPANY_SEQ")+ rs.getString("ORGANIZATION_SEQ")+rs.getString("VM_PLACE_SEQ")+rs.getString("START_DATE")+rs.getString("END_DATE");

				String rowKey = rs.getString("YYYYMMDD")
						//+ rs.getString("COMPANY_SEQ")
						+ rs.getString("ORGANIZATION_SEQ")
						+ rs.getString("VM_PLACE_SEQ")
						+ rs.getString("START_DATE")
						+ rs.getString("END_DATE")
					;
				boolean isMasterRow = !rowKey.equals(preRowKey);

				preRowKey = rowKey;

				//공통사항
//20160130
//				row.put("YYYY", rs.getString("YYYY"));
//				row.put("MM", rs.getString("MM"));
//				row.put("DD", rs.getString("DD"));
				row.put("YYYYMMDD", rs.getString("YYYYMMDD"));
				//row.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
				row.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				row.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
				row.put("ORGAN", rs.getString("ORGAN"));
				row.put("PLACE", rs.getString("PLACE"));
				row.put("VM_CODE", rs.getString("VM_CODE"));

				//마감현황 입력
//20160201 날짜포멧을 JAVA로 처리
//				row.put("START_DATE", rs.getString("START_DATE"));
//				row.put("END_DATE", rs.getString("END_DATE"));
				String date = rs.getString("START_DATE");
				row.put("START_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: "-"
					);
				date = rs.getString("END_DATE");
				row.put("END_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: "-"
					);
				//마감일은 포멧처리 안 함
				row.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));

				row.put("CNT_CARD", rs.getLong("CNT_CARD"));
				row.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
				row.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
				row.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
				row.put("CNT_POSTPONE", rs.getLong("CNT_POSTPONE"));
				row.put("AMOUNT_POSTPONE", rs.getLong("AMOUNT_POSTPONE"));
				row.put("CNT_REFUSE", rs.getLong("CNT_REFUSE"));
				row.put("AMOUNT_REFUSE", rs.getLong("AMOUNT_REFUSE"));

				//선불카드사별 마감현황
//20160129 prepaySummaryColumns를 사용하여 처리
//				intRoofCnt = this.company.size();
//				for(int ix=0 ; ix < intRoofCnt ; ix++ )
//				{
//					GeneralConfig tmpRow  = this.company.get(ix);
//
//					row.put( tmpRow.get("CODE") +"_CNT", rs.getLong(tmpRow.get("CODE") +"_CNT"));
//					row.put( tmpRow.get("CODE") +"_AMOUNT", rs.getLong(tmpRow.get("CODE") +"_AMOUNT"));
//
//					tmpRow = null;
//				}
				for (String columnName : prepaySummaryColumns) {
					row.put(columnName, rs.getLong(columnName));
					if (isMasterRow) this.data.put(columnName, this.data.getLong(columnName) + rs.getLong(columnName));
				}

				//입금현황 입력
//20160201 날짜포멧을 JAVA로 처리
				row.put("PAY_DATE", rs.getString("PAY_DATE"));
//				date = rs.getString("PAY_DATE");
//				row.put("PAY_DATE",
//						date != null
//							? date.substring(0, 4) + "-"
//								+ date.substring(4, 6) + "-"
//								+ date.substring(6, 8)
//							: "-"
//					);

				row.put("PAY_CNT_CARD", rs.getLong("PAY_CNT_CARD"));
				row.put("PAY_AMOUNT_CARD", rs.getLong("PAY_AMOUNT_CARD"));
				row.put("PAY_CNT_PREPAY", rs.getLong("PAY_CNT_PREPAY"));
				row.put("PAY_AMOUNT_PREPAY", rs.getLong("PAY_AMOUNT_PREPAY"));

				//선불카드사별 입금현황
//20160129 prepayPaymentSummaryColumns를 사용하여 처리
//				intRoofCnt = this.company.size();
//				for(int ix=0 ; ix < intRoofCnt ; ix++ )
//				{
//					GeneralConfig tmpRow  = this.company.get(ix);
//
//					row.put( "PAY_"+ tmpRow.get("CODE") +"_CNT" , rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT"));
//					row.put( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT", rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT"));
//
//					tmpRow = null;
//				}
				for (String columnName : prepayPaymentSummaryColumns) {
					row.put(columnName, rs.getLong(columnName));
					this.data.put(columnName, this.data.getLong(columnName) + rs.getLong(columnName));
				}

				this.list.add(row);

//20160129 사용 안함
//				StringBuffer sbchk = new StringBuffer();
//				StringBuffer sbPrechk = new StringBuffer();

//20160129 최적화
//				if (SumRow == null)
//				{
//					SumRow = row;
//					row.put("ROWSPANCNT", "1");
//
//					intListCnt++;
//
//					//다른마감일경우 마감건의 합계를 실행한다.
//					if(blRowFlag)
//					{
//						//건수 합계
//						cnt[0] += rs.getLong("CNT_CARD");
//						cnt[1] += rs.getLong("CNT_PREPAY");
//						cnt[4] += rs.getLong("CNT_POSTPONE");
//						cnt[5] += rs.getLong("CNT_REFUSE");
//
//						//금액 합계
//						amt[0] += rs.getLong("AMOUNT_CARD");
//						amt[1] += rs.getLong("AMOUNT_PREPAY");
//						amt[4] += rs.getLong("AMOUNT_POSTPONE");
//						amt[5] += rs.getLong("AMOUNT_REFUSE");
//					}
//
//					cnt[2] += rs.getLong("PAY_CNT_CARD");
//					cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//
//
//					amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//					amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//
//					for(int ix=0 ; ix < intRoofCnt ; ix++ )
//					{
//						GeneralConfig tmpRow  = this.company.get(ix);
//
//						//다른마감일경우 마감건의 합계를 실행한다.
//						if(blRowFlag)
//						{
//							propSubSum.setProperty( tmpRow.get("CODE") +"_CNT" , String.valueOf(rs.getLong(tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(rs.getLong(tmpRow.get("CODE") +"_AMOUNT")));
//						}
//
//						propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//						propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//						tmpRow = null;
//					}
//
//
//				}
////20160129 불필요한 if 제거
//				else //if(SumRow != null)
//				{
//					/*
//					sbchk.delete(0, sbchk.capacity());
//					sbPrechk.delete(0, sbPrechk.capacity());
//
//					sbchk.append(rs.getString("YYYY"));
//					sbchk.append(rs.getString("MM"));
//					sbchk.append(rs.getString("DD"));
//					sbchk.append(rs.getString("COMPANY_SEQ"));
//					sbchk.append(rs.getString("ORGANIZATION_SEQ"));
//					sbchk.append(rs.getString("VM_PLACE_SEQ"));
//
//					sbPrechk.append(SumRow.getString("YYYY"));
//					sbPrechk.append(SumRow.getString("MM"));
//					sbPrechk.append(SumRow.getString("DD"));
//					sbPrechk.append(SumRow.getString("COMPANY_SEQ"));
//					sbPrechk.append(SumRow.getString("ORGANIZATION_SEQ"));
//					sbPrechk.append(SumRow.getString("VM_PLACE_SEQ"));
//					*/
//
//					//같은ROW일 경우
//					if(!blRowFlag)
//					{
//						SumRow.put("ROWSPANCNT", String.valueOf(SumRow.getInt("ROWSPANCNT") + 1));
//						row.put("ROWSPANCNT", "0");
//
//						cnt[2] += rs.getLong("PAY_CNT_CARD");
//						cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//
//						amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//						amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//
//						for(int ix=0 ; ix < intRoofCnt ; ix++ )
//						{
//							GeneralConfig tmpRow  = this.company.get(ix);
//
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(  Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_CNT", "0")) + rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf( Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0")) +  rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//							tmpRow = null;
//						}
//
//					}
//					//다른Row일경우
//					else
//					{
//						row.put("ROWSPANCNT", "1");
//
//						cnt[0] += rs.getLong("CNT_CARD");
//						cnt[1] += rs.getLong("CNT_PREPAY");
//						cnt[2] += rs.getLong("PAY_CNT_CARD");
//						cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//						cnt[4] += rs.getLong("CNT_POSTPONE");
//						cnt[5] += rs.getLong("CNT_REFUSE");
//
//						amt[0] += rs.getLong("AMOUNT_CARD");
//						amt[1] += rs.getLong("AMOUNT_PREPAY");
//						amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//						amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//						amt[4] += rs.getLong("AMOUNT_POSTPONE");
//						amt[5] += rs.getLong("AMOUNT_REFUSE");
//
//
//						for(int ix=0 ; ix < intRoofCnt ; ix++ )
//						{
//							GeneralConfig tmpRow  = this.company.get(ix);
//
//							propSubSum.setProperty( tmpRow.get("CODE") +"_CNT" , String.valueOf(Long.parseLong(propSubSum.getProperty(tmpRow.get("CODE") +"_CNT", "0")) +rs.getLong(tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(Long.parseLong(propSubSum.getProperty(tmpRow.get("CODE") +"_AMOUNT", "0")) +rs.getLong(tmpRow.get("CODE") +"_AMOUNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_CNT", "0")) +rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0")) +rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//							tmpRow = null;
//						}
//
//						SumRow = row;
//						intListCnt++;
//					}
//				}
				if (isMasterRow) {
					cnt[0] += rs.getLong("CNT_CARD");
					cnt[1] += rs.getLong("CNT_PREPAY");
					cnt[2] += rs.getLong("PAY_CNT_CARD");
					cnt[3] += rs.getLong("PAY_CNT_PREPAY");
					cnt[4] += rs.getLong("CNT_POSTPONE");
					cnt[5] += rs.getLong("CNT_REFUSE");

					amt[0] += rs.getLong("AMOUNT_CARD");
					amt[1] += rs.getLong("AMOUNT_PREPAY");
					amt[2] += rs.getLong("PAY_AMOUNT_CARD");
					amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
					amt[4] += rs.getLong("AMOUNT_POSTPONE");
					amt[5] += rs.getLong("AMOUNT_REFUSE");

					if (masterRow != null) masterRow.put("ROWSPANCNT", rowCount);

					listCount++;
					rowCount = 1;
					masterRow = row;
				} else {
					cnt[2] += rs.getLong("PAY_CNT_CARD");
					cnt[3] += rs.getLong("PAY_CNT_PREPAY");

					amt[2] += rs.getLong("PAY_AMOUNT_CARD");
					amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");

					rowCount++;
					row.put("ROWSPANCNT", 0);
				}
			}

			if (masterRow != null) masterRow.put("ROWSPANCNT", rowCount);

			this.data.put("LISTCNT", listCount);

			// 합계
			this.data.put("CNT_CARD", cnt[0]);
			this.data.put("CNT_PREPAY", cnt[1]);
			this.data.put("PAY_CNT_CARD", cnt[2]);
			this.data.put("PAY_CNT_PREPAY", cnt[3]);
			this.data.put("CNT_POSTPONE", cnt[4]);
			this.data.put("CNT_REFUSE", cnt[5]);
			this.data.put("AMOUNT_CARD", amt[0]);
			this.data.put("AMOUNT_PREPAY", amt[1]);
			this.data.put("PAY_AMOUNT_CARD", amt[2]);
			this.data.put("PAY_AMOUNT_PREPAY", amt[3]);
			this.data.put("AMOUNT_POSTPONE", amt[4]);
			this.data.put("AMOUNT_REFUSE", amt[5]);

//20160129
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//
//				this.data.put( tmpRow.get("CODE") +"_CNT", propSubSum.getProperty( tmpRow.get("CODE") +"_CNT", "0"));
//				this.data.put( tmpRow.get("CODE") +"_AMOUNT", propSubSum.getProperty( tmpRow.get("CODE") +"_AMOUNT", "0"));
//				this.data.put("PAY_"+ tmpRow.get("CODE") +"_CNT", propSubSum.getProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT", "0"));
//				this.data.put("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", propSubSum.getProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0"));
//
//
//				tmpRow = null;
//			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
			e.printStackTrace();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

			// 최하위 조직 타이틀
//20160129 INDEX 힌트 추가
//		this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
		this.data.put("ORGAN",
				dbLib.getResult(conn,
						"SELECT NAME"
							+ " FROM ("
									+ " SELECT /*+ INDEX(A) */"
											+ " NAME"
										+ " FROM TB_ORGANIZATION A"
										+ " WHERE COMPANY_SEQ = " + company
											+ " AND SORT = 0"
										+ " ORDER BY DEPTH DESC"
								+ " )"
							+ " WHERE ROWNUM = 1"
					)
			);

		// 검색 설정
		String sDesc = "검색기간=" + sDate + "-" + eDate;

		if (company > 0) {
//20160129 INDEX 힌트 추가
//			sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
			sDesc += "&소속="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " NAME"
								+ " FROM TB_COMPANY A"
								+ " WHERE SEQ = " + company
						)
				;
		}

		if (organ > 0) {
//20160129 INDEX 힌트 추가, REVERSE 적용
//			sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
			sDesc += "&조직="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
								+ " FROM TB_ORGANIZATION A"
								+ " WHERE PARENT_SEQ = 0"
								+ " START WITH SEQ = " + organ
								+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
						)
				;
		}

		if (place > 0) {
//20160129 INDEX 힌트 추가
//			sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
			sDesc += "&설치위치="
					+ dbLib.getResult(conn,
							"SELECT /*+ INDEX(A) */"
									+ " PLACE"
								+ " FROM TB_VENDING_MACHINE_PLACE A"
								+ " WHERE SEQ = " + place
						)
				;
		}

		this.data.put("sDesc", sDesc);

		// 리소스 반환
			dbLib.close(conn);

		// 정렬
//20160129 쿼리문에서 ORDER BY로 정렬
//			switch (oMode) {
//				case 1 :	// 거래처
//					switch (oType) {
//						case 1 :	// DESC
//							Collections.sort(this.list, new UserCompare("ORGAN", false));
//							break;
//						default :	// ASC
//							Collections.sort(this.list, new UserCompare("ORGAN", true));
//					}
//
//					break;
//				case 2 :	// 설치위치
//					switch (oType) {
//						case 1 :	// DESC
//							Collections.sort(this.list, new UserCompare("PLACE", false));
//							break;
//						default :	// ASC
//							Collections.sort(this.list, new UserCompare("PLACE", true));
//					}
//
//					break;
//			}

			return error;
	}

//	/**
//	 * 마감별 입금 현황 - 20160127 사용안함
//	 *
//	 * @param company 소속
//	 * @param organ 조직
//	 * @param place 위치
//	 * @param sDate 검색일
//	 * @param eDate 종료일
//	 * @param oMode 정렬필드
//	 * @param oType 정렬방법
//	 * @return 에러가 있을 경우 에러 내용
//	 *
//	 */
//	public String payment_new_org(long company, long organ, long place, String sDate, String eDate, int oMode, int oType) throws Exception {
//	// 필수 검색 조건이 없을 때
//		if (company == 0 || StringEx.isEmpty(sDate) || StringEx.isEmpty(eDate)) {
//			return null;
//		}
//
//	// 실행에 사용될 변수
//		DBLibrary dbLib = new DBLibrary();
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String error = null;
//
//		try
//		{
//			// DB 연결
//			conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));
//
//			if (conn == null) {
//				throw new Exception("DB 연결에 실패하였습니다.");
//			}
//
//
//			// 자판기별 매출 현황
//			this.company = new ArrayList<GeneralConfig>();
//			this.list = new ArrayList<GeneralConfig>();
//			this.data = new GeneralConfig();
//			long[] cnt = {0, 0, 0, 0, 0, 0};
//			long[] amt = {0, 0, 0, 0, 0, 0};
//
//			Properties propSubSum = new Properties();
//
//
//			// 검색절 생성
//			String WHERE = "";
//
//			if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
//				WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
//			} else {
//				if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
//					WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
//				}
//
//				if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//					WHERE += " AND A.ORGANIZATION_SEQ IN ("
//						  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//						  +  " UNION"
//						  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//						  +  " UNION"
//						  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//						  +  " UNION"
//						  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//						  +  " )";
//				}
//			}
//
//			if (company > 0) { // 소속
//				WHERE += " AND A.COMPANY_SEQ = " + company;
//			}
//
//			if (organ > 0) { // 조직
//				WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
//			}
//
//			if (place > 0) { // 위치
//				WHERE += " AND A.VM_PLACE_SEQ = " + place;
//			}
//			//조건에 마감일 대한 최대 최소 검색일을 가져온다.
//			StringBuffer sbSql_1 = new StringBuffer();
//
//			sbSql_1.append(" SELECT MIN(UX.YYYYMMDD),MAX(UX.YYYYMMDD) ")
//			.append(" FROM ")
//			.append(" ( ")
//			.append(" SELECT ")
//			.append("     A.YYYY||A.MM||A.DD  YYYYMMDD ")
//			.append(" FROM ")
//			.append("     TB_CLOSING A ")
//			.append(" WHERE ")
//			.append("     A.TYPE IN ( ")
//			.append("        '05', '07', '08' ")
//			.append("      )  ")
//			.append("     AND A.PAY_TYPE IN ( ")
//			.append("        '01', '11' ")
//			.append("        )  ")
//			.append("     AND A.YYYYMMDD BETWEEN ? /**P*/ AND  ? /**P*/ ")
//			.append(WHERE)
//			.append("     GROUP BY ")
//			.append("    A.YYYY, ")
//			.append("    A.MM, ")
//			.append("    A.DD, ")
//			.append("    A.COMPANY_SEQ, ")
//			.append("   A.ORGANIZATION_SEQ, ")
//			.append("   A.VM_PLACE_SEQ ")
//			.append(" ) UX ");
//
//			ps = conn.prepareStatement(sbSql_1.toString());
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);
//			rs = ps.executeQuery();
//
//			rs.next();
//			String strMinCloseDate = rs.getString(1);
//			String strMaxCloseDate = rs.getString(2);
//
//			rs.close();
//			ps.close();
//
//			rs = null;
//			ps = null;
//
//			//해당업체의 선불카드사 종류를 가져온다.
//			StringBuffer sbSql_2 = new StringBuffer();
//
//			sbSql_2.append(" SELECT ")
//			.append(" /*+ ORDERED USE_NL(B) */ B.CODE, ")
//			.append(" B.NAME  ")
//			.append(" FROM ")
//			.append(" TB_CLOSING A ")
//			.append(" INNER JOIN ")
//			.append(" TB_CODE B  ")
//			.append("     ON ( ")
//			.append("         A.PAY_CARD = B.CODE ")
//			.append("         AND B.TYPE = 'PAY_CARD' ")
//			.append("     )  ")
//			.append(" WHERE ")
//			.append(" A.TYPE IN ( ")
//			.append("     '04' ")
//			.append(" )  ")
//			.append(" AND A.PAY_TYPE IN ( ")
//			.append("     '11' ")
//			.append(" )  ")
//			//.append(" AND A.YYYYMMDD >=? ")
//			//.append(" AND A.YYYYMMDD <= ? ")
//			.append(" AND A.YYYY||MM||DD >=? ")
//			.append(" AND A.YYYY||MM||DD <= ? ")
//			.append(WHERE)
//			.append(" GROUP BY ")
//        	.append(" B.CODE, ")
//        	.append(" B.NAME ");
//
//			ps = conn.prepareStatement(sbSql_2.toString());
//			//ps.setString(1, sDate);
//			//ps.setString(2, eDate);
//
//			ps.setString(1, strMinCloseDate);
//			ps.setString(2, strMaxCloseDate);
//			rs = ps.executeQuery();
//
//			while(rs.next())
//			{
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CODE", rs.getString("CODE"));
//				c.put("NAME", rs.getString("NAME"));
//
//				this.company.add(c);
//			}
//
//			rs.close();
//			ps.close();
//
//			rs = null;
//			ps = null;
//
//			//마감별 입금현황 SQL현황을 만든다.
//			StringBuffer sbSql_3 = new StringBuffer();
//			//sql
//			sbSql_3.append(" SELECT ")
//			//.append("        -- 마감일 \n")
//			.append("        UA.YYYY, ")
//			.append("        UA.MM, ")
//			.append("        UA.DD, ")
//			.append("        UA.COMPANY_SEQ, ")
//			.append("        UA.ORGANIZATION_SEQ, ")
//			.append("        UA.VM_PLACE_SEQ, ")
//			.append("        UC.ORGAN, ")
//			.append("        UC.PLACE,         ")
//			.append("  ");
//			//.append("       -- 선불카드사별 마감현황 \n");
//
//			int intRoofCnt = this.company.size();
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				sbSql_3.append("     NVL(   UB."+ tmpRow.get("CODE") +"_CNT, 0 ) "+ tmpRow.get("CODE") +"_CNT , ");
//				sbSql_3.append("     NVL(   UB."+ tmpRow.get("CODE") +"_AMOUNT, 0 ) "+ tmpRow.get("CODE") +"_AMOUNT , ");
//				tmpRow = null;
//			}
//
//			//sbSql_3.append(" \n       -- 자판기별 마감현황 \n ")
//			sbSql_3.append("        UC.CNT_CARD, ")
//			.append("        UC.AMOUNT_CARD, ")
//			.append("        UC.CNT_PREPAY, ")
//			.append("        UC.AMOUNT_PREPAY, ")
//			.append("        UC.CNT_POSTPONE, ")
//			.append("        UC.AMOUNT_POSTPONE, ")
//			.append("        UC.CNT_REFUSE, ")
//			.append("        UC.AMOUNT_REFUSE, ")
//			.append("        UC.START_DATE, ")
//			.append("        UC.END_DATE, ")
//			.append("        UC.CLOSING_DATE,   ")
//			.append("         ")	;
//
//			//.append("    \n    -- 선불카드사별 입금현황 \n");
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				sbSql_3.append("        NVL(UD."+ tmpRow.get("CODE") +"_CNT,0)  PAY_"+ tmpRow.get("CODE") +"_CNT , ");
//				sbSql_3.append("        NVL(UD."+ tmpRow.get("CODE") +"_AMOUNT,0)  PAY_"+ tmpRow.get("CODE") +"_AMOUNT , ");
//				tmpRow = null;
//			}
//
//			//sbSql_3.append(" \n       -- 입금현황 \n")
//			sbSql_3.append("      NVL(UE.CNT_CARD,0)  PAY_CNT_CARD, ")
//			.append("        NVL(UE.AMOUNT_CARD,0)  PAY_AMOUNT_CARD, ")
//			.append("        NVL(UE.CNT_PREPAY,0)  PAY_CNT_PREPAY, ")
//			.append("        NVL(UE.AMOUNT_PREPAY,0) PAY_AMOUNT_PREPAY, ")
//			.append("        UE.PAY_DATE  ")
//			.append(" FROM ")
//			//.append(" -- 마감일 정보 \n")
//			.append("     ( ")
//			.append("         SELECT ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ, ")
//			.append("             A.VM_PLACE_SEQ,  ")
//			.append("              ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE ")
//			.append("              ")
//			.append("         FROM ")
//			.append("             TB_CLOSING A  ")
//			.append("         INNER JOIN ")
//			.append("             TB_ORGANIZATION B  ")
//			.append("                 ON A.ORGANIZATION_SEQ = B.SEQ  ")
//			.append("         INNER JOIN ")
//			.append("             TB_VENDING_MACHINE_PLACE C  ")
//			.append("                 ON A.VM_PLACE_SEQ = C.SEQ  ")
//			.append("         WHERE ")
//			.append("             A.TYPE IN ( ")
//			.append("                 '05', '07', '08' ")
//			.append("             )  ")
//			.append("             AND A.PAY_TYPE IN ( ")
//			.append("                 '01', '11' ")
//			.append("             )  ")
//			.append("             AND A.YYYYMMDD BETWEEN  ? /**P*/ AND  ? /**P*/  ")
//			.append(WHERE)
//			.append("         GROUP BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ, ")
//			.append("             A.VM_PLACE_SEQ, ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE  ")
//			.append("         ORDER BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             B.PARENT_SEQ, ")
//			.append("             B.NAME, ")
//			.append("             C.PLACE ")
//			.append("     ) UA, ")
//			//.append("\n -- 선불마감금액정보 \n")
//			.append("     ( ")
//			.append("         SELECT  ")
//			.append("                 G2.COMPANY_SEQ, ")
//			.append("                 G2.ORGANIZATION_SEQ, ")
//			.append("                 G2.VM_PLACE_SEQ, ")
//			.append("                 G2.YYYY || G2.MM || G2.DD AS CLOSING_DATE, ");
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_CNT) "+ tmpRow.get("CODE") +"_CNT, ");
//				sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_AMOUNT) "+ tmpRow.get("CODE") +"_AMOUNT, ");
//				tmpRow = null;
//			}
//
//			sbSql_3.append("                 G2.YYYY, ")
//			.append("                 G2.MM, ")
//			.append("                 G2.DD       ")
//			.append("         FROM ")
//			.append("         ( ")
//			.append("             SELECT ")
//			.append("                 A.PAY_CARD,   ");
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				sbSql_3.append("                 decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(A.CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//				sbSql_3.append("                 decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(A.AMOUNT),0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//
//				tmpRow = null;
//			}
//
//			sbSql_3.append("                 NVL(SUM(A.CNT),0) AS CNT, ")
//			.append("                 NVL(SUM(A.AMOUNT),0) AS AMOUNT, ")
//			.append("                 A.COMPANY_SEQ, ")
//			.append("                 A.ORGANIZATION_SEQ, ")
//			.append("                 A.VM_PLACE_SEQ, ")
//			.append("                 A.YYYY || A.MM || A.DD AS CLOSING_DATE, ")
//			.append("                 A.YYYY, ")
//			.append("                 A.MM, ")
//			.append("                 A.DD                ")
//			.append("             FROM ")
//			.append("                 TB_CLOSING A  ")
//			.append("             WHERE ")
//			.append("                 A.TYPE IN ( '04' )  ")
//			.append("                 AND A.PAY_TYPE IN ( '11' ) ")
//			.append("                  ")
//			.append("                 AND A.YYYYMMDD >= ? ")
//			.append("                 AND A.YYYYMMDD <= ?  ")
//			.append(WHERE)
//			.append("             GROUP BY ")
//			.append("                 A.COMPANY_SEQ, ")
//			.append("                 A.ORGANIZATION_SEQ, ")
//			.append("                 A.VM_PLACE_SEQ, ")
//			.append("                 A.PAY_CARD, ")
//			.append("                 A.YYYY, ")
//			.append("                 A.MM, ")
//			.append("                 A.DD   ")
//			.append("           ) G2 ")
//			.append("        GROUP BY    ")
//			.append("                 G2.COMPANY_SEQ, ")
//			.append("                 G2.ORGANIZATION_SEQ, ")
//			.append("                 G2.VM_PLACE_SEQ, ")
//			//.append("                 G2.PAY_CARD, ")
//			.append("                 G2.YYYY, ")
//			.append("                 G2.MM, ")
//			.append("                 G2.DD        ")
//			.append("     ) UB,     ")
//			//.append("\n -- 마감금액정보   \n  ")
//			.append("     ( ")
//			.append("         SELECT ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '01' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_CARD, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '01' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_CARD, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '11' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_PREPAY, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '04'  ")
//			.append("             AND A.PAY_TYPE = '11' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_PREPAY, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '07' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_POSTPONE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '07' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_POSTPONE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '08' THEN A.CNT  ")
//			.append("         END), ")
//			.append("         0) AS CNT_REFUSE, ")
//			.append("         NVL(SUM(CASE  ")
//			.append("             WHEN A.TYPE = '08' THEN A.AMOUNT  ")
//			.append("         END), ")
//			.append("         0) AS AMOUNT_REFUSE, ")
//			.append("         NVL(MIN(TO_CHAR(TO_DATE(A.START_DATE || A.START_TIME, ")
//			.append("         'YYYYMMDDHH24MISS'), ")
//			.append("         'YYYY-MM-DD HH24:MI:SS')), ")
//			.append("         '-') AS START_DATE, ")
//			.append("         NVL(MAX(TO_CHAR(TO_DATE(A.END_DATE || A.END_TIME, ")
//			.append("         'YYYYMMDDHH24MISS'), ")
//			.append("         'YYYY-MM-DD HH24:MI:SS')), ")
//			.append("         '-') AS END_DATE, ")
//			.append("         A.COMPANY_SEQ, ")
//			.append("         A.ORGANIZATION_SEQ, ")
//			.append("         A.VM_PLACE_SEQ, ")
//			.append("         B.NAME AS ORGAN, ")
//			.append("         C.PLACE, ")
//			.append("         A.YYYY || A.MM || A.DD AS CLOSING_DATE , ")
//			.append("          ")
//			.append("         A.YYYY, ")
//			.append("         A.MM, ")
//			.append("         A.DD         ")
//			.append("          ")
//			.append("     FROM ")
//			.append("         TB_CLOSING A  ")
//			.append("     INNER JOIN ")
//			.append("         TB_ORGANIZATION B  ")
//			.append("             ON A.ORGANIZATION_SEQ = B.SEQ  ")
//			.append("     INNER JOIN ")
//			.append("         TB_VENDING_MACHINE_PLACE C  ")
//			.append("             ON A.VM_PLACE_SEQ = C.SEQ  ")
//			.append("     WHERE ")
//			.append("         A.TYPE IN ( ")
//			.append("             '04', '07', '08' ")
//			.append("         )  ")
//			.append("         AND A.PAY_TYPE IN ( ")
//			.append("             '01', '11' ")
//			.append("         )  ")
//			//.append("         AND A.YYYYMMDD >= ? ")
//			//.append("         AND A.YYYYMMDD <= ?         ")
//
//			//20120604 마감별매출현황 기준일 변경
//			.append("         AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("         AND A.YYYY||A.MM||A.DD <= ?         ")
//
//			.append(WHERE)
//			.append("     GROUP BY ")
//			.append("         A.COMPANY_SEQ, ")
//			.append("         A.ORGANIZATION_SEQ, ")
//			.append("         A.VM_PLACE_SEQ, ")
//			.append("         B.NAME, ")
//			.append("         C.PLACE, ")
//			.append("         A.YYYY, ")
//			.append("         A.MM, ")
//			.append("         A.DD ")
//			.append("     ) UC, ")
//			//.append("\n     --- 선불카드사별 입금현황 \n ")
//			.append("     ( ")
//			.append("             SELECT  ")
//			.append("                     G2.COMPANY_SEQ, ")
//			.append("                     G2.ORGANIZATION_SEQ, ")
//			.append("                     G2.VM_PLACE_SEQ, ")
//			.append("                     G2.YYYY, ")
//			.append("                     G2.MM, ")
//			.append("                     G2.DD, ")
//			.append("                      ");
//
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				//sbSql_3.append("                 decode (G2.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(G2.CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//				//sbSql_3.append("                 decode (G2.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(G2.AMOUNT),0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//				sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_CNT) AS "+ tmpRow.get("CODE") +"_CNT, ");
//				sbSql_3.append("                 SUM(G2."+ tmpRow.get("CODE") +"_AMOUNT) AS "+ tmpRow.get("CODE") +"_AMOUNT, ");
//				tmpRow = null;
//			}
//			sbSql_3.append("                     G2.PAY_DATE                            ");
//
//			sbSql_3.append("             FROM ")
//			.append("             ( ")
//			.append("                 SELECT ")
//			.append("                     A.YYYY, ")
//			.append("                     A.MM, ")
//			.append("                     A.DD,   ")
//			.append("                     A.COMPANY_SEQ, ")
//			.append("                     A.ORGANIZATION_SEQ,  ")
//			.append("                     A.VM_PLACE_SEQ,    ");
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//				sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(CNT),0) , 0) as "+ tmpRow.get("CODE") +"_CNT, ");
//				//sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(AMOUNT - COMMISSION), 0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//				sbSql_3.append("                     decode (A.PAY_CARD, '"+ tmpRow.get("CODE") +"', NVL(SUM(AMOUNT - COMMISSION + OUTAMOUNT), 0), 0) as "+ tmpRow.get("CODE") +"_AMOUNT, ");
//				tmpRow = null;
//			}
//
//			sbSql_3.append("                     NVL(SUM(CNT),0) AS CNT, ")
//			//.append("                     NVL(SUM(AMOUNT - COMMISSION), 0) AS AMOUNT, ")
//			.append("                     NVL(SUM(AMOUNT - COMMISSION + OUTAMOUNT), 0) AS AMOUNT, ")
//			.append("                     PAY_CARD, ")
//			.append("                     YYYYMMDD AS PAY_DATE  ")
//			.append("                 FROM ")
//			.append("                     TB_CLOSING A  ")
//			.append("                 WHERE ")
//			.append("                     TYPE = '05'  ")
//			.append("                     AND PAY_TYPE IN ( ")
//			.append("                         '11' ")
//			.append("                     )  ")
//			.append("                     AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("                     AND A.YYYY||A.MM||A.DD <= ?         ")
//			.append("                      ")
//			.append(WHERE)
//			.append("                 GROUP BY ")
//			.append("                     A.YYYY, ")
//			.append("                     A.MM, ")
//			.append("                     A.DD, ")
//			.append("                     A.COMPANY_SEQ, ")
//			.append("                     A.ORGANIZATION_SEQ,  ")
//			.append("                     A.VM_PLACE_SEQ,  ")
//			.append("                     A.PAY_CARD, ")
//			.append("                     A.YYYYMMDD         ")
//			.append("               ) G2 ")
//			.append("            GROUP BY    ")
//			.append("                     G2.COMPANY_SEQ, ")
//			.append("                     G2.ORGANIZATION_SEQ, ")
//			.append("                     G2.VM_PLACE_SEQ, ")
//			//.append("                     G2.PAY_CARD, ")
//			.append("                     G2.YYYY, ")
//			.append("                     G2.MM, ")
//			.append("                     G2.DD, ")
//			.append("                     G2.PAY_DATE           ")
//			.append("     ) UD, \n")
//			//.append("\n     -- 입금정보 \n")
//			.append("     ( ")
//			.append("             SELECT ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ,  ")
//			.append("             A.VM_PLACE_SEQ,      ")
//			.append("             NVL(SUM(CASE  ")
//			.append("                 WHEN PAY_TYPE = '01' THEN CNT  ")
//			.append("             END), ")
//			.append("             0) AS CNT_CARD, ")
//			.append("             NVL(SUM(CASE  ")
//			//.append("                 WHEN PAY_TYPE = '01' THEN AMOUNT - COMMISSION  ")
//			.append("                 WHEN PAY_TYPE = '01' THEN AMOUNT - COMMISSION + OUTAMOUNT  ")
//			.append("             END), ")
//			.append("             0) AS AMOUNT_CARD, ")
//			.append("             NVL(SUM(CASE  ")
//			.append("                 WHEN PAY_TYPE = '11' THEN CNT  ")
//			.append("             END), ")
//			.append("             0) AS CNT_PREPAY, ")
//			.append("             NVL(SUM(CASE  ")
//			//.append("                 WHEN PAY_TYPE = '11' THEN AMOUNT - COMMISSION  ")
//			.append("                 WHEN PAY_TYPE = '11' THEN AMOUNT - COMMISSION + OUTAMOUNT  ")
//			.append("             END), ")
//			.append("             0) AS AMOUNT_PREPAY, ")
//			.append("             YYYYMMDD AS PAY_DATE  ")
//			.append("         FROM ")
//			.append("             TB_CLOSING A ")
//			.append("         WHERE ")
//			.append("             TYPE = '05'  ")
//			.append("             AND PAY_TYPE IN ( ")
//			.append("                 '01', '11' ")
//			.append("             )  ")
//			.append("             AND A.YYYY||A.MM||A.DD >= ? ")
//			.append("             AND A.YYYY||A.MM||A.DD <= ? ")
//			.append(WHERE)
//			.append("         GROUP BY ")
//			.append("             A.YYYY, ")
//			.append("             A.MM, ")
//			.append("             A.DD, ")
//			.append("             A.COMPANY_SEQ, ")
//			.append("             A.ORGANIZATION_SEQ,  ")
//			.append("             A.VM_PLACE_SEQ,  ")
//			.append("             YYYYMMDD  ")
//			.append("         ORDER BY ")
//			.append("             YYYYMMDD   ")
//			.append("      ")
//			.append("     ) UE ")
//			.append("  ")
//			.append("      ")
//			.append(" WHERE ")
//			.append("         UA.YYYY = UB.YYYY(+) ")
//			.append("         AND UA.MM = UB.MM(+) ")
//			.append("         AND UA.DD = UB.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UB.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UB.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UB.VM_PLACE_SEQ(+)   ")
//			.append("          ")
//			.append("         AND UA.YYYY = UC.YYYY(+) ")
//			.append("         AND UA.MM = UC.MM(+) ")
//			.append("         AND UA.DD = UC.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UC.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UC.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UC.VM_PLACE_SEQ(+)   ")
//			.append("          ")
//			/*
//			.append("         AND UA.YYYY = UD.YYYY(+) ")
//			.append("         AND UA.MM = UD.MM(+) ")
//			.append("         AND UA.DD = UD.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UD.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UD.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UD.VM_PLACE_SEQ(+) ")
//			.append("          ")
//			.append("         AND UA.YYYY = UE.YYYY(+) ")
//			.append("         AND UA.MM = UE.MM(+) ")
//			.append("         AND UA.DD = UE.DD(+) ")
//			.append("         AND UA.COMPANY_SEQ = UE.COMPANY_SEQ(+) ")
//			.append("         AND UA.ORGANIZATION_SEQ = UE.ORGANIZATION_SEQ(+) ")
//			.append("         AND UA.VM_PLACE_SEQ = UE.VM_PLACE_SEQ(+)   ")
//			*/
//	       .append("         AND UA.YYYY = UE.YYYY(+) ")
//	       .append("         AND UA.MM = UE.MM(+) ")
//	       .append("         AND UA.DD = UE.DD(+) ")
//	       .append("         AND UA.COMPANY_SEQ = UE.COMPANY_SEQ(+) ")
//	       .append("         AND UA.ORGANIZATION_SEQ = UE.ORGANIZATION_SEQ(+) ")
//	       .append("         AND UA.VM_PLACE_SEQ = UE.VM_PLACE_SEQ(+)   ")
//
//	       .append("         AND UE.YYYY = UD.YYYY(+) ")
//	       .append("         AND UE.MM = UD.MM(+) ")
//	       .append("         AND UE.DD = UD.DD(+) ")
//	       .append("         AND UE.COMPANY_SEQ = UD.COMPANY_SEQ(+) ")
//	       .append("         AND UE.ORGANIZATION_SEQ = UD.ORGANIZATION_SEQ(+) ")
//	       .append("         AND UE.VM_PLACE_SEQ = UD.VM_PLACE_SEQ(+) ")
//	       .append("         AND UE.PAY_DATE = UD.PAY_DATE(+) ")
//			.append("          ")
//			.append(" ORDER BY ")
//			.append("             UA.YYYY, ")
//			.append("             UA.MM, ")
//			.append("             UA.DD, ")
//			.append("             UA.PARENT_SEQ, ")
//			.append("             UA.NAME, ")
//			.append("             UA.PLACE,UE.PAY_DATE  ");
//
//
//			ps = conn.prepareStatement(sbSql_3.toString());
//
//			ps.setString(1, sDate);
//			ps.setString(2, eDate);
//
//			ps.setString(3, strMinCloseDate);
//			ps.setString(4, strMaxCloseDate);
//			ps.setString(5, strMinCloseDate);
//			ps.setString(6, strMaxCloseDate);
//			ps.setString(7, strMinCloseDate);
//			ps.setString(8, strMaxCloseDate);
//			ps.setString(9, strMinCloseDate);
//			ps.setString(10, strMaxCloseDate);
//
//			rs = ps.executeQuery();
//
//			GeneralConfig SumRow = null;
//
//			int intListCnt = 0;
//
//			while(rs.next())
//			{
//				GeneralConfig row = new GeneralConfig();
//
//				//공통사항
//				row.put("YYYY", rs.getString("YYYY"));
//				row.put("MM", rs.getString("MM"));
//				row.put("DD", rs.getString("DD"));
//
//				row.put("COMPANY_SEQ", rs.getLong("COMPANY_SEQ"));
//				row.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				row.put("VM_PLACE_SEQ", rs.getLong("VM_PLACE_SEQ"));
//				row.put("ORGAN", rs.getString("ORGAN"));
//				row.put("PLACE", rs.getString("PLACE"));
//
//				//선불카드사별 마감현황
//				intRoofCnt = this.company.size();
//				for(int ix=0 ; ix < intRoofCnt ; ix++ )
//				{
//					GeneralConfig tmpRow  = this.company.get(ix);
//
//					row.put( tmpRow.get("CODE") +"_CNT", rs.getLong(tmpRow.get("CODE") +"_CNT"));
//					row.put( tmpRow.get("CODE") +"_AMOUNT", rs.getLong(tmpRow.get("CODE") +"_AMOUNT"));
//
//					tmpRow = null;
//				}
//
//				//마감현황 입력
//				row.put("CNT_CARD", rs.getLong("CNT_CARD"));
//				row.put("AMOUNT_CARD", rs.getLong("AMOUNT_CARD"));
//				row.put("CNT_PREPAY", rs.getLong("CNT_PREPAY"));
//				row.put("AMOUNT_PREPAY", rs.getLong("AMOUNT_PREPAY"));
//				row.put("CNT_POSTPONE", rs.getLong("CNT_POSTPONE"));
//				row.put("AMOUNT_POSTPONE", rs.getLong("AMOUNT_POSTPONE"));
//				row.put("CNT_REFUSE", rs.getLong("CNT_REFUSE"));
//				row.put("AMOUNT_REFUSE", rs.getLong("AMOUNT_REFUSE"));
//				row.put("START_DATE", rs.getString("START_DATE"));
//				row.put("END_DATE", rs.getString("END_DATE"));
//				row.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
//
//				//입금현황 입력
//				row.put("PAY_CNT_CARD", rs.getLong("PAY_CNT_CARD"));
//				row.put("PAY_AMOUNT_CARD", rs.getLong("PAY_AMOUNT_CARD"));
//				row.put("PAY_CNT_PREPAY", rs.getLong("PAY_CNT_PREPAY"));
//				row.put("PAY_AMOUNT_PREPAY", rs.getLong("PAY_AMOUNT_PREPAY"));
//				row.put("PAY_DATE", rs.getString("PAY_DATE"));
//
//
//				//선불카드사별 입금현황
//				intRoofCnt = this.company.size();
//				for(int ix=0 ; ix < intRoofCnt ; ix++ )
//				{
//					GeneralConfig tmpRow  = this.company.get(ix);
//
//					row.put( "PAY_"+ tmpRow.get("CODE") +"_CNT" , rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT"));
//					row.put( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT", rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT"));
//
//					tmpRow = null;
//				}
//
//				this.list.add(row);
//
//				StringBuffer sbchk = new StringBuffer();
//				StringBuffer sbPrechk = new StringBuffer();
//
//				if(SumRow == null)
//				{
//					SumRow = row;
//					row.put("ROWSPANCNT", "1");
//
//					intListCnt++;
//
//					cnt[0] += rs.getLong("CNT_CARD");
//					cnt[1] += rs.getLong("CNT_PREPAY");
//					cnt[2] += rs.getLong("PAY_CNT_CARD");
//					cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//					cnt[4] += rs.getLong("CNT_POSTPONE");
//					cnt[5] += rs.getLong("CNT_REFUSE");
//
//					amt[0] += rs.getLong("AMOUNT_CARD");
//					amt[1] += rs.getLong("AMOUNT_PREPAY");
//					amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//					amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//					amt[4] += rs.getLong("AMOUNT_POSTPONE");
//					amt[5] += rs.getLong("AMOUNT_REFUSE");
//
//					for(int ix=0 ; ix < intRoofCnt ; ix++ )
//					{
//						GeneralConfig tmpRow  = this.company.get(ix);
//
//						propSubSum.setProperty( tmpRow.get("CODE") +"_CNT" , String.valueOf(rs.getLong(tmpRow.get("CODE") +"_CNT")));
//						propSubSum.setProperty( tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(rs.getLong(tmpRow.get("CODE") +"_AMOUNT")));
//						propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//						propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//						tmpRow = null;
//					}
//
//
//				}
//				else if(SumRow != null)
//				{
//
//					sbchk.delete(0, sbchk.capacity());
//					sbPrechk.delete(0, sbPrechk.capacity());
//
//					sbchk.append(rs.getString("YYYY"));
//					sbchk.append(rs.getString("MM"));
//					sbchk.append(rs.getString("DD"));
//					sbchk.append(rs.getString("COMPANY_SEQ"));
//					sbchk.append(rs.getString("ORGANIZATION_SEQ"));
//					sbchk.append(rs.getString("VM_PLACE_SEQ"));
//
//
//					sbPrechk.append(SumRow.getString("YYYY"));
//					sbPrechk.append(SumRow.getString("MM"));
//					sbPrechk.append(SumRow.getString("DD"));
//					sbPrechk.append(SumRow.getString("COMPANY_SEQ"));
//					sbPrechk.append(SumRow.getString("ORGANIZATION_SEQ"));
//					sbPrechk.append(SumRow.getString("VM_PLACE_SEQ"));
//
//					if(sbchk.toString().equals(sbPrechk.toString()))
//					{
//						SumRow.put("ROWSPANCNT", String.valueOf(SumRow.getInt("ROWSPANCNT")+1) );
//						row.put("ROWSPANCNT", "0");
//
//						cnt[2] += rs.getLong("PAY_CNT_CARD");
//						cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//
//						amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//						amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//
//						for(int ix=0 ; ix < intRoofCnt ; ix++ )
//						{
//							GeneralConfig tmpRow  = this.company.get(ix);
//
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(  Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_CNT", "0")) + rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf( Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0")) +  rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//							tmpRow = null;
//						}
//
//					}
//					else
//					{
//						row.put("ROWSPANCNT", "1");
//
//						cnt[0] += rs.getLong("CNT_CARD");
//						cnt[1] += rs.getLong("CNT_PREPAY");
//						cnt[2] += rs.getLong("PAY_CNT_CARD");
//						cnt[3] += rs.getLong("PAY_CNT_PREPAY");
//						cnt[4] += rs.getLong("CNT_POSTPONE");
//						cnt[5] += rs.getLong("CNT_REFUSE")
//
//						;
//						amt[0] += rs.getLong("AMOUNT_CARD");
//						amt[1] += rs.getLong("AMOUNT_PREPAY");
//						amt[2] += rs.getLong("PAY_AMOUNT_CARD");
//						amt[3] += rs.getLong("PAY_AMOUNT_PREPAY");
//						amt[4] += rs.getLong("AMOUNT_POSTPONE");
//						amt[5] += rs.getLong("AMOUNT_REFUSE");
//
//
//						for(int ix=0 ; ix < intRoofCnt ; ix++ )
//						{
//							GeneralConfig tmpRow  = this.company.get(ix);
//
//							propSubSum.setProperty( tmpRow.get("CODE") +"_CNT" , String.valueOf(Long.parseLong(propSubSum.getProperty(tmpRow.get("CODE") +"_CNT", "0")) +rs.getLong(tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(Long.parseLong(propSubSum.getProperty(tmpRow.get("CODE") +"_AMOUNT", "0")) +rs.getLong(tmpRow.get("CODE") +"_AMOUNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT" , String.valueOf(Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_CNT", "0")) +rs.getLong("PAY_"+ tmpRow.get("CODE") +"_CNT")));
//							propSubSum.setProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT" , String.valueOf(Long.parseLong(propSubSum.getProperty("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0")) +rs.getLong("PAY_"+ tmpRow.get("CODE") +"_AMOUNT")));
//
//							tmpRow = null;
//						}
//
//						SumRow = row;
//						intListCnt++;
//					}
//				}
//			}
//
//			this.data.put("LISTCNT", intListCnt);
//
//			rs.close();
//			ps.close();
//
//			rs = null;
//			ps = null;
//
//
//			// 최하위 조직 타이틀
//			this.data.put("ORGAN", dbLib.getResult(conn, "SELECT NAME FROM (SELECT NAME FROM TB_ORGANIZATION WHERE COMPANY_SEQ = " + company + " AND SORT = 0 ORDER BY DEPTH DESC) WHERE ROWNUM = 1"));
//
//		    // 검색 설정
//			String sDesc = "검색기간=" + sDate + "-" + eDate;
//
//			if (company > 0) {
//				sDesc += "&소속=" + dbLib.getResult(conn, "SELECT NAME FROM TB_COMPANY WHERE SEQ = " + company);
//			}
//
//			if (organ > 0) {
//				sDesc += "&조직=" + dbLib.getResult(conn, "SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = " + organ + " START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ");
//			}
//
//			if (place > 0) {
//				sDesc += "&설치위치=" + dbLib.getResult(conn, "SELECT PLACE FROM TB_VENDING_MACHINE_PLACE WHERE SEQ = " + place);
//			}
//
//			this.data.put("sDesc", sDesc);
//
//		// 리소스 반환
//			dbLib.close(conn);
//
//		// 정렬
//			switch (oMode) {
//				case 1 : // 거래처
//					switch (oType) {
//						case 1 :  // DESC
//							Collections.sort(this.list, new UserCompare("ORGAN", false));
//							break;
//						default : // ASC
//							Collections.sort(this.list, new UserCompare("ORGAN", true));
//					}
//
//					break;
//				case 2 : // 설치위치
//					switch (oType) {
//						case 1 :  // DESC
//							Collections.sort(this.list, new UserCompare("PLACE", false));
//							break;
//						default : // ASC
//							Collections.sort(this.list, new UserCompare("PLACE", true));
//					}
//
//					break;
//			}
//
//			// 합계
//			this.data.put("CLOSING_CNT_CARD", cnt[0]);
//			this.data.put("CLOSING_CNT_PREPAY", cnt[1]);
//			this.data.put("PAYMENT_CNT_CARD", cnt[2]);
//			this.data.put("PAYMENT_CNT_PREPAY", cnt[3]);
//			this.data.put("PAYMENT_CNT_POSTPONE", cnt[4]);
//			this.data.put("PAYMENT_CNT_REFUSE", cnt[5]);
//			this.data.put("CLOSING_AMOUNT_CARD", amt[0]);
//			this.data.put("CLOSING_AMOUNT_PREPAY", amt[1]);
//			this.data.put("PAYMENT_AMOUNT_CARD", amt[2]);
//			this.data.put("PAYMENT_AMOUNT_PREPAY", amt[3]);
//			this.data.put("PAYMENT_AMOUNT_POSTPONE", amt[4]);
//			this.data.put("PAYMENT_AMOUNT_REFUSE", amt[5]);
//
//			for(int ix=0 ; ix < intRoofCnt ; ix++ )
//			{
//				GeneralConfig tmpRow  = this.company.get(ix);
//
//				this.data.put( tmpRow.get("CODE") +"_CNT", propSubSum.getProperty( tmpRow.get("CODE") +"_CNT", "0"));
//				this.data.put( tmpRow.get("CODE") +"_AMOUNT", propSubSum.getProperty( tmpRow.get("CODE") +"_AMOUNT", "0"));
//				this.data.put("PAY_"+ tmpRow.get("CODE") +"_CNT", propSubSum.getProperty( "PAY_"+ tmpRow.get("CODE") +"_CNT", "0"));
//				this.data.put("PAY_"+ tmpRow.get("CODE") +"_AMOUNT", propSubSum.getProperty( "PAY_"+ tmpRow.get("CODE") +"_AMOUNT", "0"));
//
//
//				tmpRow = null;
//			}
//
//
//			return null;
//
//		}
//		//waring처리
//		catch(WarningException Ex)
//		{
//			this.logger.warn(Ex);
//			return Ex.getMessage();
//		}
//		//error 처리
//		catch(SQLException Ex)
//		{
//			//this.logger.error(Ex);
//			this.logger.warn(Ex);
//			return Ex.getMessage();
//		}
//		catch(Exception Ex)
//		{
//			this.logger.error(Ex);
//			return Ex.getMessage();
//		}
//		finally
//		{
//			dbLib.close(conn);
//		}
//	}

//	/**
//	 * 자판기별 입금 현황 - 20160211 사용안함
//	 *
//	 * @param conn java.sql.Connection
//	 * @param company 소속
//	 * @param organ 조직
//	 * @param place 위치
//	 * @param cDate 마감일
//	 * @return 자판기별 입금 현황
//	 *
//	 */
//	private GeneralConfig payment(Connection conn, long company, long organ, long place, String cDate) throws Exception {
//	// 실행에 사용될 변수
//		DBLibrary dbLib = new DBLibrary(this.logger);
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		int i = 0;
//
//	// 선불 카드사별 입금 현황
//		ArrayList<GeneralConfig> prepay = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = conn.prepareStatement("SELECT"
//				+ "  NVL(SUM(CNT), 0) AS CNT"
//				+ ", NVL(SUM(AMOUNT - COMMISSION), 0) AS AMOUNT"
//				+ ", PAY_CARD, YYYYMMDD AS PAY_DATE"
//				+ " FROM TB_CLOSING"
//				+ " WHERE TYPE = '05' AND PAY_TYPE IN ('11') AND YYYY = ? AND MM = ? AND DD = ? AND COMPANY_SEQ = ? AND ORGANIZATION_SEQ = ? AND VM_PLACE_SEQ = ?"
//				+ " GROUP BY PAY_CARD, YYYYMMDD");
//			ps.setString(1, cDate.substring(0, 4));
//			ps.setString(2, cDate.substring(4, 6));
//			ps.setString(3, cDate.substring(6, 8));
//			ps.setLong(4, company);
//			ps.setLong(5, organ);
//			ps.setLong(6, place);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("PAY_CARD", rs.getString("PAY_CARD"));
//				c.put("PAY_DATE", rs.getString("PAY_DATE"));
//
//				prepay.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 자판기별 입금 현황
//		GeneralConfig data = new GeneralConfig();
//
//		try {
//			long[] cnt = {0, 0};
//			long[] amt = {0, 0};
//
//			ps = conn.prepareStatement("SELECT"
//				+ "  NVL(SUM(CASE WHEN PAY_TYPE = '01' THEN CNT END), 0) AS CNT_CARD"
//				+ ", NVL(SUM(CASE WHEN PAY_TYPE = '01' THEN AMOUNT - COMMISSION END), 0) AS AMOUNT_CARD"
//				+ ", NVL(SUM(CASE WHEN PAY_TYPE = '11' THEN CNT END), 0) AS CNT_PREPAY"
//				+ ", NVL(SUM(CASE WHEN PAY_TYPE = '11' THEN AMOUNT - COMMISSION END), 0) AS AMOUNT_PREPAY"
//				+ ", YYYYMMDD AS PAY_DATE"
//				+ " FROM TB_CLOSING"
//				+ " WHERE TYPE = '05' AND PAY_TYPE IN ('01', '11') AND YYYY = ? AND MM = ? AND DD = ? AND COMPANY_SEQ = ? AND ORGANIZATION_SEQ = ? AND VM_PLACE_SEQ = ?"
//				+ " GROUP BY YYYYMMDD"
//				+ " ORDER BY YYYYMMDD");
//			ps.setString(1, cDate.substring(0, 4));
//			ps.setString(2, cDate.substring(4, 6));
//			ps.setString(3, cDate.substring(6, 8));
//			ps.setLong(4, company);
//			ps.setLong(5, organ);
//			ps.setLong(6, place);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				data.put("CNT_CARD" + i, rs.getLong("CNT_CARD"));
//				data.put("AMOUNT_CARD" + i, rs.getLong("AMOUNT_CARD"));
//				data.put("CNT_PREPAY" + i, rs.getLong("CNT_PREPAY"));
//				data.put("AMOUNT_PREPAY" + i, rs.getLong("AMOUNT_PREPAY"));
//				data.put("PAY_DATE" + i, rs.getString("PAY_DATE"));
//
//				if (prepay.size() > 0) { // 선불 카드사별 입금 현황
//					for (int j = 0; j < prepay.size(); j++) {
//						GeneralConfig c = (GeneralConfig) prepay.get(j);
//
//						if (rs.getString("PAY_DATE").equals(c.get("PAY_DATE"))) {
//							data.put("CNT_PREPAY_" + c.get("PAY_CARD") + i, c.getLong("CNT"));
//							data.put("AMOUNT_PREPAY_" + c.get("PAY_CARD") + i, c.getLong("AMOUNT"));
//						}
//					}
//				}
//
//				cnt[0] += rs.getLong("CNT_CARD");
//				cnt[1] += rs.getLong("CNT_PREPAY");
//				amt[0] += rs.getLong("AMOUNT_CARD");
//				amt[1] += rs.getLong("AMOUNT_PREPAY");
//
//				i++;
//			}
//
//			data.put("PAY_COUNT", i);
//			data.put("PAYMENT_CNT_CARD", cnt[0]);
//			data.put("PAYMENT_CNT_PREPAY", cnt[1]);
//			data.put("PAYMENT_AMOUNT_CARD", amt[0]);
//			data.put("PAYMENT_AMOUNT_PREPAY", amt[1]);
//		} catch (Exception e) {
//			this.logger.error(e);
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//		return data;
//	}

	/**
	 * 입금 예정일과 입금일이 다른 판매 내역
	 *
	 * @param company 소속
	 * @param organ 조직
	 * @param place 위치
	 * @param aDate 입금일
	 * @param cDate 마감일
	 * @param card 선불 카드사
	 * @param sField 검색 필드
	 * @param sQuery 검색어
	 * @param pageNo 페이지
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String difference(long company, long organ, long place, String aDate, String cDate, String card, String sField, String sQuery, int pageNo) throws Exception {
	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
	//	String WHERE = "A.PAY_STEP IN ('03') AND A.COMPANY_SEQ = " + company + " AND A.ORGANIZATION_SEQ = " + organ + " AND A.VM_PLACE_SEQ = " + place + " AND A.CLOSING_DATE = '" + cDate + "' AND A.PAY_DATE = '" + aDate + "'";
//20160211
//		String WHERE = "A.PAY_STEP IN ('02', '03', '21', '22') AND A.COMPANY_SEQ = " + company + " AND A.ORGANIZATION_SEQ = " + organ + " AND A.VM_PLACE_SEQ = " + place + " AND A.CLOSING_DATE = '" + cDate + "'";
//		String TABLE = "TB_SALES A LEFT JOIN TB_CODE B ON (A.PAY_TYPE = B.CODE AND B.TYPE = 'PAY_TYPE') LEFT JOIN TB_CODE C ON (A.PAY_CARD = C.CODE AND C.TYPE = 'PAY_CARD')";
		String WHERE = " A.PAY_STEP IN ('02', '03', '21', '22')"
				+ " AND A.COMPANY_SEQ = " + company
				+ " AND A.ORGANIZATION_SEQ = " + organ
				+ " AND A.VM_PLACE_SEQ = " + place
				+ " AND A.CLOSING_DATE = '" + cDate + "'"
			;
//		String TABLE = " TB_SALES A"
//				+ " LEFT JOIN TB_CODE B"
//					+ " ON A.PAY_TYPE = B.CODE AND B.TYPE = 'PAY_TYPE'"
//				+ " LEFT JOIN TB_CODE C"
//					+ "ON A.PAY_CARD = C.CODE AND C.TYPE = 'PAY_CARD'"
//			;

//20160211 조회 권한체크 추가
		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (StringEx.isEmpty(card)) { // 신용
			WHERE += " AND A.PAY_TYPE = '01'";
		} else { // 선불
			WHERE += " AND A.PAY_TYPE = '11' AND A.PAY_CARD = '" + card + "'";
		}

		if (!StringEx.isEmpty(sField) && !StringEx.isEmpty(sQuery)) {
			if (StringEx.inArray(sField, "A.TRANSACTION_DATE;A.CLOSING_DATE".split(";"))) {
				WHERE += " AND " + sField + " = '" + sQuery + "'";
			} else {
				WHERE += " AND " + sField + " LIKE '%" + sQuery + "%'";
			}
		}

		WHERE += " AND ("
					+ " (A.PAY_STEP IN ('02') AND A.PAY_DATE_EXP = '" + aDate + "')"
					+ " OR (A.PAY_STEP IN ('03') AND A.PAY_DATE != A.PAY_DATE_EXP)"
					+ " OR A.PAY_STEP IN ('21', '22')"
				+ " )"
			;

	// 총 레코드수
//20160211 INDEX 힌트 추가, 불필요한 JOIN 제거
//		this.records = StringEx.str2long(dbLib.getResult(conn, "SELECT /*+ ORDERED USE_NL(B C) */ COUNT(*) FROM " + TABLE + " WHERE " + WHERE));
		this.records = StringEx.str2long(
				dbLib.getResult(conn,
						"SELECT /*+ INDEX(A) */"
								+ " COUNT(*)"
							+ " FROM TB_SALES A"
							+ " WHERE" + WHERE
					)
			);

	// 총 페이지수
		this.pages = Pager.getSize(this.records, cfg.getInt("limit.list"));

	// 리스트 가상번호
		long no = this.records - (pageNo - 1) * cfg.getInt("limit.list");

	// 판매 내역
		this.list = new ArrayList<GeneralConfig>();

		try {
			int s = ((pageNo - 1) * cfg.getInt("limit.list")) + 1;
			int e = (s - 1) + cfg.getInt("limit.list");

//20160211
//			ps = dbLib.prepareStatement(conn, "SELECT S2.*"
//				+ " FROM"
//				+ " ("
//				+ " SELECT ROWNUM AS RNUM, S1.*"
//				+ " FROM"
//				+ " ("
//				+ " SELECT /*+ ORDERED USE_NL(B C) INDEX_DESC(A UK_SALES_2) */ TO_CHAR(TO_DATE(A.TRANSACTION_DATE || A.TRANSACTION_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS TRANSACTION_DATE, TO_CHAR(TO_DATE(A.CLOSING_DATE || A.CLOSING_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS CLOSING_DATE, A.AMOUNT, A.COMMISSION, A.OUTAMOUNT, CASE WHEN A.PAY_TYPE = '11' THEN C.NAME ELSE B.NAME END AS PAY_TYPE, CASE WHEN A.PAY_STEP = '02' AND A.PAY_DATE_EXP = '" + aDate + "' THEN '입금누락' WHEN A.PAY_STEP = '03' AND TO_DATE(A.PAY_DATE, 'YYYYMMDD') > TO_DATE(A.PAY_DATE_EXP, 'YYYYMMDD') THEN '후입금' WHEN A.PAY_STEP = '03' AND TO_DATE(A.PAY_DATE, 'YYYYMMDD') < TO_DATE(A.PAY_DATE_EXP, 'YYYYMMDD') THEN '선입금' WHEN A.PAY_STEP = '21' THEN '매입보류' WHEN A.PAY_STEP = '22' THEN '매입거절' ELSE '-' END AS REASON"
//				+ " FROM " + TABLE
//				+ " WHERE " + WHERE
//				+ " ) S1"
//				+ " WHERE ROWNUM <= " + e
//				+ " ) S2"
//				+ " WHERE RNUM >= " + s);
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED USE_NL(B C) */"
							+ " AAA.TRANSACTION_DATE || AAA.TRANSACTION_TIME AS TRANSACTION_DATE,"
							+ " CASE WHEN AAA.CLOSING_DATE IS NULL THEN NULL ELSE AAA.CLOSING_DATE || NVL(AAA.CLOSING_TIME, '000000') END AS CLOSING_DATE,"
							+ " AAA.AMOUNT,"
							+ " AAA.COMMISSION,"
							+ " AAA.OUTAMOUNT,"
							+ " CASE WHEN AAA.PAY_TYPE = '11' THEN C.NAME ELSE B.NAME END AS PAY_TYPE,"
							+ " CASE WHEN AAA.PAY_STEP = '02' AND AAA.PAY_DATE_EXP = '" + aDate + "' THEN '입금누락'"
									+ " WHEN AAA.PAY_STEP = '03' AND TO_DATE(AAA.PAY_DATE, 'YYYYMMDD') > TO_DATE(AAA.PAY_DATE_EXP, 'YYYYMMDD') THEN '후입금'"
									+ " WHEN AAA.PAY_STEP = '03' AND TO_DATE(AAA.PAY_DATE, 'YYYYMMDD') < TO_DATE(AAA.PAY_DATE_EXP, 'YYYYMMDD') THEN '선입금'"
									+ " WHEN AAA.PAY_STEP = '21' THEN '매입보류'"
									+ " WHEN AAA.PAY_STEP = '22' THEN '매입거절'"
									+ " ELSE '-'"
								+ " END AS REASON"
						+ " FROM ("
									+ " SELECT"
											+ " ROWNUM AS ROW_NUM,"
											+ " AA.*"
										+ " FROM ("
												+ " SELECT /*+ INDEX(A) */"
														+ " *"
													+ " FROM TB_SALES A"
													+ " WHERE" + WHERE
													+ " ORDER BY A.TRANSACTION_DATE DESC, A.TRANSACTION_TIME DESC"
											+ " ) AA"
										+ " WHERE ROWNUM <= " + e
								+ " ) AAA"
							+ " LEFT JOIN TB_CODE B"
								+ " ON AAA.PAY_TYPE = B.CODE"
									+ " AND B.TYPE = 'PAY_TYPE'"
							+ " LEFT JOIN TB_CODE C"
								+ " ON AAA.PAY_CARD = C.CODE"
									+ " AND C.TYPE = 'PAY_CARD'"
						+ " WHERE ROW_NUM >= " + s
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

//20160211 날짜포맷을 JAVA로 처리
//				c.put("TRANSACTION_DATE", rs.getString("TRANSACTION_DATE"));
//				c.put("CLOSING_DATE", rs.getString("CLOSING_DATE"));
				String date = rs.getString("TRANSACTION_DATE");
				c.put("TRANSACTION_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
				date = rs.getString("CLOSING_DATE");
				c.put("CLOSING_DATE",
						date != null
							? date.substring(0, 4) + "-"
								+ date.substring(4, 6) + "-"
								+ date.substring(6, 8) + " "
								+ date.substring(8, 10) + ":"
								+ date.substring(10, 12) + ":"
								+ date.substring(12, 14)
							: ""
					);
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("COMMISSION", rs.getLong("COMMISSION"));
				c.put("OUTAMOUNT", rs.getLong("OUTAMOUNT"));
				c.put("PAY_TYPE", rs.getString("PAY_TYPE"));
				c.put("REASON", rs.getString("REASON"));
				c.put("NO", no--);

				this.list.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 리소스 반환
		dbLib.close(conn);

		return null;
	}

	/**
	 * 월 정산 리포트
	 *
	 * @param sType 정산 유형
	 * @param sDate 날짜
	 * @return 에러가 있을 경우 에러 내용
	 *
	 */
	public String account_new(String sType, String sDate, long company, long organ) throws Exception {
	// 필수 검색 조건이 없을 때
		if (StringEx.isEmpty(sType) || StringEx.isEmpty(sDate)) {
			return null;
		}

	// 실행에 사용될 변수
		DBLibrary dbLib = new DBLibrary(this.logger);
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String error = null;

	// DB 연결
		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));

		if (conn == null) {
			return "DB 연결에 실패하였습니다.";
		}

	// 검색절 생성
		String WHERE = " A.YYYYMM = '" + sDate + "'"
				+ " AND A.TYPE = '" + sType + "'";

		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
		} else {
			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
			}

			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//20160211 INDEX 힌트 추가, UNION을 IN에 통합, COMPANY_SEQ 조건 추가
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
				WHERE += " AND A.ORGANIZATION_SEQ IN ("
							+ " SELECT /*+ INDEX(A_A) */"
									+ " SEQ"
								+ " FROM TB_ORGANIZATION A_A"
								+ " WHERE SORT = 1"
								+ " START WITH COMPANY_SEQ = " + this.cfg.getLong("user.company")
									+ " AND SEQ IN ("
											+ " SELECT " + this.cfg.getLong("user.organ") + " FROM DUAL"
											+ " UNION"
											+ " SELECT /*+ INDEX(A_A_A) */"
													+ " ORGANIZATION_SEQ"
												+ " FROM TB_USER_APP_ORGAN A_A_A"
												+ " WHERE SEQ = " + this.cfg.getLong("user.seq")
										+ " )"
								+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
						+ " )"
					;
			}
		}

		if (company > 0) { // 소속
			WHERE += " AND A.COMPANY_SEQ = " + company;
		}

		if (organ > 0) { // 조직
//20160211 INDEX 힌트 추가
//			WHERE += " AND A.ORGANIZATION_SEQ IN (SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + organ + " CONNECT BY PRIOR SEQ = PARENT_SEQ UNION SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + organ + ")";
			WHERE += " AND A.ORGANIZATION_SEQ IN ("
						+ " SELECT /*+ INDEX(A_B) */"
								+ " SEQ"
							+ " FROM TB_ORGANIZATION A_B"
							+ " WHERE SORT = 1"
							+ " START WITH SEQ = " + organ
							+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
					+ " )"
				;
		}

	// 선불 카드사
		this.company = new ArrayList<GeneralConfig>();

		try {
//20160211
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */ B.CODE, B.NAME FROM TB_SALES_MONTHLY A INNER JOIN TB_CODE B ON (A.PAY_CARD = B.CODE AND B.TYPE = 'PAY_CARD') WHERE " + WHERE + " AND A.PAY_TYPE IN ('11') GROUP BY B.CODE, B.NAME");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ INDEX(A) */"
							+ " CODE,"
							+ " NAME"
						+ " FROM TB_CODE A"
						+ " WHERE TYPE = 'PAY_CARD'"
							+ " AND CODE <> '000'"
						+ " ORDER BY CODE"
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("CODE", rs.getString("CODE"));
				c.put("NAME", rs.getString("NAME"));

				this.company.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 선불
		this.prepay = new ArrayList<GeneralConfig>();

		try {
//20160211 INDEX, USE_HASH 힌트 추가
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//				+ "  NVL(SUM(A.CNT), 0) AS CNT"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//
//				+ ", NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
//
//				+ ", A.ORGANIZATION_SEQ, A.PAY_CARD, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('11')"
//				+ " GROUP BY A.ORGANIZATION_SEQ, A.PAY_CARD, B.PARENT_SEQ, B.NAME, C.NAME"
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_MONTHLY_YYYYMM) USE_HASH(B) */"
							+ " B.NAME AS COMPANY,"
							+ " ("
//20160216 REVERSE 적용
//									+ " SELECT /*+ INDEX(C) */"
//											+ " LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/')"
//										+ " FROM TB_ORGANIZATION C"
//										+ " WHERE SEQ = A.ORGANIZATION_SEQ"
//										+ " START WITH PARENT_SEQ = 0"
//										+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
									+ " SELECT /*+ INDEX(C) */"
											+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
										+ " FROM TB_ORGANIZATION C"
										+ " WHERE PARENT_SEQ = 0"
										+ " START WITH SEQ = A.ORGANIZATION_SEQ"
										+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
								+ " ) AS ORGAN,"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.PAY_CARD,"
							+ " NVL(SUM(A.CNT), 0) AS CNT,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT,"
							+ " NVL(SUM(A.COMMISSION), 0) AS COMMISSION,"
							+ " NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
						+ " FROM TB_SALES_MONTHLY A"
							+ " INNER JOIN TB_COMPANY B"
								+ " ON A.COMPANY_SEQ = B.SEQ"
						+ " WHERE" + WHERE
							+ " AND A.PAY_TYPE IN ('11')"
						+ " GROUP BY B.NAME, A.ORGANIZATION_SEQ, A.PAY_CARD"
						+ " ORDER BY 1, 2"
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("CNT", rs.getLong("CNT"));
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("COMMISSION", rs.getLong("COMMISSION"));

				c.put("OUTAMOUNT", rs.getLong("OUTAMOUNT"));

				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("PAY_CARD", rs.getString("PAY_CARD"));
				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));

				this.prepay.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 카드 (선불 + 신용)
		this.card = new ArrayList<GeneralConfig>();

		try {
//20160211 INDEX, USE_HASH 힌트 추가
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//					+ "  NVL(SUM(A.CNT), 0) AS CNT"
//					+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//					+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//
//					+ ", NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
//
//					+ ", A.ORGANIZATION_SEQ, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//					+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//					+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('01', '11')"
//					+ " GROUP BY A.ORGANIZATION_SEQ, B.PARENT_SEQ, B.NAME, C.NAME"
//					+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_MONTHLY_YYYYMM) USE_HASH(B) */"
							+ " B.NAME AS COMPANY,"
							+ " ("
//20160216 REVERSE 적용
//										+ " SELECT /*+ INDEX(C) */"
//												+ " LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/')"
//											+ " FROM TB_ORGANIZATION C"
//											+ " WHERE SEQ = A.ORGANIZATION_SEQ"
//											+ " START WITH PARENT_SEQ = 0"
//											+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
										+ " SELECT /*+ INDEX(C) */"
												+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
											+ " FROM TB_ORGANIZATION C"
											+ " WHERE PARENT_SEQ = 0"
											+ " START WITH SEQ = A.ORGANIZATION_SEQ"
											+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
									+ " ) AS ORGAN,"
							+ " A.ORGANIZATION_SEQ,"
							+ " NVL(SUM(A.CNT), 0) AS CNT,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT,"
							+ " NVL(SUM(A.COMMISSION), 0) AS COMMISSION,"
							+ " NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
				+ " FROM TB_SALES_MONTHLY A"
					+ " INNER JOIN TB_COMPANY B"
						+ " ON A.COMPANY_SEQ = B.SEQ"
				+ " WHERE" + WHERE
					+ " AND A.PAY_TYPE IN ('01', '11')"
				+ " GROUP BY B.NAME, A.ORGANIZATION_SEQ"
				+ " ORDER BY 1, 2"
			);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));

				c.put("CNT", rs.getLong("CNT"));
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("COMMISSION", rs.getLong("COMMISSION"));
				c.put("OUTAMOUNT", rs.getLong("OUTAMOUNT"));

				this.card.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 전체
		this.list = new ArrayList<GeneralConfig>();

		try {
//20160211 INDEX, USE_HASH 힌트 추가
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//				+ "  NVL(SUM(A.CNT), 0) AS CNT"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//
//				+ ", NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
//
//				+ ", A.ORGANIZATION_SEQ, A.PAY_TYPE, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('01', '11')"
//				+ " GROUP BY A.ORGANIZATION_SEQ, A.PAY_TYPE, B.PARENT_SEQ, B.NAME, C.NAME"
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
			ps = dbLib.prepareStatement(conn,
					"SELECT /*+ ORDERED INDEX(A IX_SALES_MONTHLY_YYYYMM) USE_HASH(B) */"
							+ " B.NAME AS COMPANY,"
							+ " ("
//20160216 REVERSE 적용
//									+ " SELECT /*+ INDEX(C) */"
//											+ " LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/')"
//										+ " FROM TB_ORGANIZATION C"
//										+ " WHERE SEQ = A.ORGANIZATION_SEQ"
//										+ " START WITH PARENT_SEQ = 0"
//										+ " CONNECT BY PRIOR SEQ = PARENT_SEQ"
									+ " SELECT /*+ INDEX(C) */"
											+ " REVERSE(LTRIM(SYS_CONNECT_BY_PATH(REVERSE(NAME), '/'), '/'))"
										+ " FROM TB_ORGANIZATION C"
										+ " WHERE PARENT_SEQ = 0"
										+ " START WITH SEQ = A.ORGANIZATION_SEQ"
										+ " CONNECT BY SEQ = PRIOR PARENT_SEQ"
								+ " ) AS ORGAN,"
							+ " A.ORGANIZATION_SEQ,"
							+ " A.PAY_TYPE,"
							+ " NVL(SUM(A.CNT), 0) AS CNT,"
							+ " NVL(SUM(A.AMOUNT), 0) AS AMOUNT,"
							+ " NVL(SUM(A.COMMISSION), 0) AS COMMISSION,"
							+ " NVL(SUM(A.OUTAMOUNT), 0) AS OUTAMOUNT"
					+ " FROM TB_SALES_MONTHLY A"
						+ " INNER JOIN TB_COMPANY B"
							+ " ON A.COMPANY_SEQ = B.SEQ"
					+ " WHERE" + WHERE
						+ " AND A.PAY_TYPE IN ('01', '11')"
					+ " GROUP BY B.NAME, A.ORGANIZATION_SEQ, A.PAY_TYPE"
					+ " ORDER BY 1, 2"
				);
			rs = ps.executeQuery();

			while (rs.next()) {
				GeneralConfig c = new GeneralConfig();

				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
				c.put("PAY_TYPE", rs.getString("PAY_TYPE"));
				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));

				c.put("CNT", rs.getLong("CNT"));
				c.put("AMOUNT", rs.getLong("AMOUNT"));
				c.put("COMMISSION", rs.getLong("COMMISSION"));
				c.put("OUTAMOUNT", rs.getLong("OUTAMOUNT"));

				this.list.add(c);
			}
		} catch (Exception e) {
			this.logger.error(e);
			error = e.getMessage();
		} finally {
			dbLib.close(rs);
			dbLib.close(ps);
		}

	// 에러 처리
		if (!StringEx.isEmpty(error)) {
			dbLib.close(conn);
			return error;
		}

	// 리소스 반환
		dbLib.close(conn);

		return null;
	}

//	/**
//	 * 월 정산 리포트 - 20160127 사용안함
//	 *
//	 * @param sType 정산 유형
//	 * @param sDate 날짜
//	 * @return 에러가 있을 경우 에러 내용
//	 *
//	 */
//	public String account(String sType, String sDate) throws Exception {
//	// 필수 검색 조건이 없을 때
//		if (StringEx.isEmpty(sType) || StringEx.isEmpty(sDate)) {
//			return null;
//		}
//
//	// 실행에 사용될 변수
//		DBLibrary dbLib = new DBLibrary(this.logger);
//		Connection conn = null;
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		String error = null;
//
//	// DB 연결
//		conn = dbLib.getConnection(this.cfg.get("db.jdbc.name"), this.cfg.get("db.jdbc.host"), this.cfg.get("db.jdbc.user"), this.cfg.get("db.jdbc.pass"));
//
//		if (conn == null) {
//			return "DB 연결에 실패하였습니다.";
//		}
//
//	// 검색절 생성
//		String WHERE = "A.TYPE = '" + sType + "' AND A.YYYYMM = '" + sDate + "'";
//
//		if (this.cfg.get("user.operator").equals("Y")) { // 자판기 운영자
//			WHERE += " AND A.USER_SEQ = " + this.cfg.get("user.seq");
//		} else {
//			if (this.cfg.getLong("user.company") > 0) { // 시스템 관리자가 아닌 경우, 내가 속한 소속만 검색
//				WHERE += " AND A.COMPANY_SEQ = " + this.cfg.getLong("user.company");
//			}
//
//			if (this.cfg.getLong("user.organ") > 0) { // 조직이 지정된 경우, 내 하위 조직들만 검색 (내가 속한 조직 및 내 하위 조직 AND 매출 조회가 가능한 조직에 등록된 조직)
//				WHERE += " AND A.ORGANIZATION_SEQ IN ("
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ = " + this.cfg.getLong("user.organ") + " CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SEQ = " + this.cfg.getLong("user.organ")
//					  +  " UNION"
//					  +  " SELECT SEQ FROM TB_ORGANIZATION WHERE SORT = 1 START WITH PARENT_SEQ IN (SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq") + " GROUP BY ORGANIZATION_SEQ) CONNECT BY PRIOR SEQ = PARENT_SEQ"
//					  +  " UNION"
//					  +  " SELECT ORGANIZATION_SEQ FROM TB_USER_APP_ORGAN WHERE SEQ = " + this.cfg.getLong("user.seq")
//					  +  " )";
//			}
//		}
//
//	// 선불 카드사
//		this.company = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */ B.CODE, B.NAME FROM TB_SALES_MONTHLY A INNER JOIN TB_CODE B ON (A.PAY_CARD = B.CODE AND B.TYPE = 'PAY_CARD') WHERE " + WHERE + " AND A.PAY_TYPE IN ('11') GROUP BY B.CODE, B.NAME");
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CODE", rs.getString("CODE"));
//				c.put("NAME", rs.getString("NAME"));
//
//				this.company.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 선불
//		this.prepay = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//				+ "  NVL(SUM(A.CNT), 0) AS CNT"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//				+ ", A.ORGANIZATION_SEQ, A.PAY_CARD, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('11')"
//				+ " GROUP BY A.ORGANIZATION_SEQ, A.PAY_CARD, B.PARENT_SEQ, B.NAME, C.NAME"
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("COMMISSION", rs.getLong("COMMISSION"));
//				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				c.put("PAY_CARD", rs.getString("PAY_CARD"));
//				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));
//
//				this.prepay.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 카드 (선불 + 신용)
//		this.card = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//				+ "  NVL(SUM(A.CNT), 0) AS CNT"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//				+ ", A.ORGANIZATION_SEQ, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('01', '11')"
//				+ " GROUP BY A.ORGANIZATION_SEQ, B.PARENT_SEQ, B.NAME, C.NAME"
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("COMMISSION", rs.getLong("COMMISSION"));
//				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));
//
//				this.card.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 전체
//		this.list = new ArrayList<GeneralConfig>();
//
//		try {
//			ps = dbLib.prepareStatement(conn, "SELECT /*+ ORDERED USE_NL(B) */"
//				+ "  NVL(SUM(A.CNT), 0) AS CNT"
//				+ ", NVL(SUM(A.AMOUNT), 0) AS AMOUNT"
//				+ ", NVL(SUM(A.COMMISSION), 0) AS COMMISSION"
//				+ ", A.ORGANIZATION_SEQ, A.PAY_TYPE, (SELECT LTRIM(SYS_CONNECT_BY_PATH(NAME, '/'), '/') FROM TB_ORGANIZATION WHERE SEQ = A.ORGANIZATION_SEQ START WITH PARENT_SEQ = 0 CONNECT BY PRIOR SEQ = PARENT_SEQ) AS ORGAN, C.NAME AS COMPANY"
//				+ " FROM TB_SALES_MONTHLY A INNER JOIN TB_ORGANIZATION B ON A.ORGANIZATION_SEQ = B.SEQ INNER JOIN TB_COMPANY C ON A.COMPANY_SEQ = C.SEQ"
//				+ " WHERE " + WHERE + " AND A.PAY_TYPE IN ('01', '11')"
//				+ " GROUP BY A.ORGANIZATION_SEQ, A.PAY_TYPE, B.PARENT_SEQ, B.NAME, C.NAME"
//				+ " ORDER BY B.PARENT_SEQ, A.ORGANIZATION_SEQ");
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				GeneralConfig c = new GeneralConfig();
//
//				c.put("CNT", rs.getLong("CNT"));
//				c.put("AMOUNT", rs.getLong("AMOUNT"));
//				c.put("COMMISSION", rs.getLong("COMMISSION"));
//				c.put("ORGANIZATION_SEQ", rs.getLong("ORGANIZATION_SEQ"));
//				c.put("PAY_TYPE", rs.getString("PAY_TYPE"));
//				c.put("ORGAN", (this.cfg.getLong("user.company") > 0 ? "" : rs.getString("COMPANY") + "/") + rs.getString("ORGAN"));
//
//				this.list.add(c);
//			}
//		} catch (Exception e) {
//			this.logger.error(e);
//			error = e.getMessage();
//		} finally {
//			dbLib.close(rs);
//			dbLib.close(ps);
//		}
//
//	// 에러 처리
//		if (!StringEx.isEmpty(error)) {
//			dbLib.close(conn);
//			return error;
//		}
//
//	// 리소스 반환
//		dbLib.close(conn);
//
//		return null;
//	}

//	/**
//	 * 정렬자 - 20160127 사용안함
//	 *
//	 */
//	class UserCompare implements Comparator<GeneralConfig> {
//		boolean asc = false;
//		String key = null;
//		public UserCompare(String key, boolean asc) {
//			this.key = key;
//			this.asc = asc;
//		}
//		public int compare(GeneralConfig c1, GeneralConfig c2) {
//			if (this.asc) {
//				return c1.get(this.key).compareTo(c2.get(this.key));
//			} else {
//				return c2.get(this.key).compareTo(c1.get(this.key));
//			}
//		}
//	}
}